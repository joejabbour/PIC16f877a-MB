

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Mon Aug 23 12:44:32 2021

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	intentry,global,class=CODE,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    26                           	dabs	1,0x7E,2
    27  0000                     
    28                           ; Version 2.20
    29                           ; Generated 12/02/2020 GMT
    30                           ; 
    31                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    32                           ; All rights reserved.
    33                           ; 
    34                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    35                           ; 
    36                           ; Redistribution and use in source and binary forms, with or without modification, are
    37                           ; permitted provided that the following conditions are met:
    38                           ; 
    39                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    40                           ;        conditions and the following disclaimer.
    41                           ; 
    42                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    43                           ;        of conditions and the following disclaimer in the documentation and/or other
    44                           ;        materials provided with the distribution.
    45                           ; 
    46                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    47                           ;        software without specific prior written permission.
    48                           ; 
    49                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    50                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    51                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    52                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    53                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    54                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    55                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    56                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    57                           ; 
    58                           ; 
    59                           ; Code-generator required, PIC16F877A Definitions
    60                           ; 
    61                           ; SFR Addresses
    62  0000                     	;# 
    63  0001                     	;# 
    64  0002                     	;# 
    65  0003                     	;# 
    66  0004                     	;# 
    67  0005                     	;# 
    68  0006                     	;# 
    69  0007                     	;# 
    70  0008                     	;# 
    71  0009                     	;# 
    72  000A                     	;# 
    73  000B                     	;# 
    74  000C                     	;# 
    75  000D                     	;# 
    76  000E                     	;# 
    77  000E                     	;# 
    78  000F                     	;# 
    79  0010                     	;# 
    80  0011                     	;# 
    81  0012                     	;# 
    82  0013                     	;# 
    83  0014                     	;# 
    84  0015                     	;# 
    85  0015                     	;# 
    86  0016                     	;# 
    87  0017                     	;# 
    88  0018                     	;# 
    89  0019                     	;# 
    90  001A                     	;# 
    91  001B                     	;# 
    92  001B                     	;# 
    93  001C                     	;# 
    94  001D                     	;# 
    95  001E                     	;# 
    96  001F                     	;# 
    97  0081                     	;# 
    98  0085                     	;# 
    99  0086                     	;# 
   100  0087                     	;# 
   101  0088                     	;# 
   102  0089                     	;# 
   103  008C                     	;# 
   104  008D                     	;# 
   105  008E                     	;# 
   106  0091                     	;# 
   107  0092                     	;# 
   108  0093                     	;# 
   109  0094                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009C                     	;# 
   113  009D                     	;# 
   114  009E                     	;# 
   115  009F                     	;# 
   116  010C                     	;# 
   117  010D                     	;# 
   118  010E                     	;# 
   119  010F                     	;# 
   120  018C                     	;# 
   121  018D                     	;# 
   122  0000                     	;# 
   123  0001                     	;# 
   124  0002                     	;# 
   125  0003                     	;# 
   126  0004                     	;# 
   127  0005                     	;# 
   128  0006                     	;# 
   129  0007                     	;# 
   130  0008                     	;# 
   131  0009                     	;# 
   132  000A                     	;# 
   133  000B                     	;# 
   134  000C                     	;# 
   135  000D                     	;# 
   136  000E                     	;# 
   137  000E                     	;# 
   138  000F                     	;# 
   139  0010                     	;# 
   140  0011                     	;# 
   141  0012                     	;# 
   142  0013                     	;# 
   143  0014                     	;# 
   144  0015                     	;# 
   145  0015                     	;# 
   146  0016                     	;# 
   147  0017                     	;# 
   148  0018                     	;# 
   149  0019                     	;# 
   150  001A                     	;# 
   151  001B                     	;# 
   152  001B                     	;# 
   153  001C                     	;# 
   154  001D                     	;# 
   155  001E                     	;# 
   156  001F                     	;# 
   157  0081                     	;# 
   158  0085                     	;# 
   159  0086                     	;# 
   160  0087                     	;# 
   161  0088                     	;# 
   162  0089                     	;# 
   163  008C                     	;# 
   164  008D                     	;# 
   165  008E                     	;# 
   166  0091                     	;# 
   167  0092                     	;# 
   168  0093                     	;# 
   169  0094                     	;# 
   170  0098                     	;# 
   171  0099                     	;# 
   172  009C                     	;# 
   173  009D                     	;# 
   174  009E                     	;# 
   175  009F                     	;# 
   176  010C                     	;# 
   177  010D                     	;# 
   178  010E                     	;# 
   179  010F                     	;# 
   180  018C                     	;# 
   181  018D                     	;# 
   182                           
   183                           	psect	strings
   184  0800                     __pstrings:
   185  0800                     stringtab:
   186  0800                     __stringtab:
   187  0800                     stringcode:	
   188                           ;	String table - string pointers are 1 byte each
   189                           
   190  0800                     stringdir:
   191  0800  3008               	movlw	high stringdir
   192  0801  008A               	movwf	10
   193  0802  0804               	movf	4,w
   194  0803  0A84               	incf	4,f
   195  0804  0782               	addwf	2,f
   196  0805                     __stringbase:
   197  0805  3400               	retlw	0
   198  0806                     __end_of__stringtab:
   199  0806                     _address:
   200  0806  3401               	retlw	1
   201  0807                     __end_of_address:
   202  000B                     _INTCONbits	set	11
   203  0001                     _TMR0	set	1
   204  0018                     _RCSTAbits	set	24
   205  001A                     _RCREG	set	26
   206  0019                     _TXREG	set	25
   207  0065                     _RCIF	set	101
   208  00C4                     _CREN	set	196
   209  00C6                     _RX9	set	198
   210  00C7                     _SPEN	set	199
   211  0081                     _OPTION_REGbits	set	129
   212  008C                     _PIE1bits	set	140
   213  0088                     _TRISD	set	136
   214  0099                     _SPBRG	set	153
   215  04C1                     _TRMT	set	1217
   216  04C5                     _TXEN	set	1221
   217  043E                     _TRISC6	set	1086
   218  043F                     _TRISC7	set	1087
   219  04C4                     _SYNC	set	1220
   220  04C2                     _BRGH	set	1218
   221                           
   222                           	psect	cinit
   223  0015                     start_initialization:	
   224                           ; #config settings
   225                           
   226  0015                     __initialization:
   227                           
   228                           ; Clear objects allocated to BANK0
   229  0015  1383               	bcf	3,7	;select IRP bank0
   230  0016  3060               	movlw	low __pbssBANK0
   231  0017  0084               	movwf	4
   232  0018  3070               	movlw	low (__pbssBANK0+16)
   233  0019  120A  158A  263F  120A  118A  	fcall	clear_ram0
   234                           
   235                           ; Clear objects allocated to BANK1
   236  001E  30A0               	movlw	low __pbssBANK1
   237  001F  0084               	movwf	4
   238  0020  30CA               	movlw	low (__pbssBANK1+42)
   239  0021  120A  158A  263F  120A  118A  	fcall	clear_ram0
   240  0026                     end_of_initialization:	
   241                           ;End of C runtime variable initialization code
   242                           
   243  0026                     __end_of__initialization:
   244  0026  0183               	clrf	3
   245  0027  120A  158A  2E47   	ljmp	_main	;jump to C main() function
   246                           
   247                           	psect	bssBANK0
   248  0060                     __pbssBANK0:
   249  0060                     _CRC:
   250  0060                     	ds	2
   251  0062                     _checksum:
   252  0062                     	ds	2
   253  0064                     _status:
   254  0064                     	ds	1
   255  0065                     _count:
   256  0065                     	ds	1
   257  0066                     _PDU:
   258  0066                     	ds	10
   259                           
   260                           	psect	bssBANK1
   261  00A0                     __pbssBANK1:
   262  00A0                     _Coils:
   263  00A0                     	ds	16
   264  00B0                     _DiscreteInputs:
   265  00B0                     	ds	16
   266  00C0                     _HoldingRegisters:
   267  00C0                     	ds	6
   268  00C6                     _InputRegisters:
   269  00C6                     	ds	4
   270                           
   271                           	psect	clrtext
   272  0E3F                     clear_ram0:	
   273                           ;	Called with FSR containing the base address, and
   274                           ;	W with the last address+1
   275                           
   276  0E3F  0064               	clrwdt	;clear the watchdog before getting into this loop
   277  0E40                     clrloop0:
   278  0E40  0180               	clrf	0	;clear RAM location pointed to by FSR
   279  0E41  0A84               	incf	4,f	;increment pointer
   280  0E42  0604               	xorwf	4,w	;XOR with final address
   281  0E43  1903               	btfsc	3,2	;have we reached the end yet?
   282  0E44  3400               	retlw	0	;all done for this memory range, return
   283  0E45  0604               	xorwf	4,w	;XOR again to restore value
   284  0E46  2E40               	goto	clrloop0	;do the next byte
   285                           
   286                           	psect	cstackBANK1
   287  00CA                     __pcstackBANK1:
   288  00CA                     ?___aldiv:
   289  00CA                     ___aldiv@divisor:	
   290                           ; 4 bytes @ 0x0
   291                           
   292                           
   293                           ; 4 bytes @ 0x0
   294  00CA                     	ds	4
   295  00CE                     ___aldiv@dividend:
   296                           
   297                           ; 4 bytes @ 0x4
   298  00CE                     	ds	4
   299  00D2                     ??___aldiv:
   300                           
   301                           ; 1 bytes @ 0x8
   302  00D2                     	ds	1
   303  00D3                     ___aldiv@counter:
   304                           
   305                           ; 1 bytes @ 0x9
   306  00D3                     	ds	1
   307  00D4                     ___aldiv@sign:
   308                           
   309                           ; 1 bytes @ 0xA
   310  00D4                     	ds	1
   311  00D5                     ___aldiv@quotient:
   312                           
   313                           ; 4 bytes @ 0xB
   314  00D5                     	ds	4
   315  00D9                     ?_uart_init:
   316  00D9                     uart_init@baudrate:	
   317                           ; 1 bytes @ 0xF
   318                           
   319                           
   320                           ; 4 bytes @ 0xF
   321  00D9                     	ds	4
   322  00DD                     ??_uart_init:
   323                           
   324                           ; 1 bytes @ 0x13
   325  00DD                     	ds	12
   326  00E9                     uart_init@x:
   327                           
   328                           ; 2 bytes @ 0x1F
   329  00E9                     	ds	2
   330  00EB                     ??_main:
   331                           
   332                           	psect	cstackCOMMON
   333  0070                     __pcstackCOMMON:	
   334                           ; 1 bytes @ 0x21
   335                           
   336  0070                     ?_uart_write:
   337  0070                     ??_uart_write:	
   338                           ; 1 bytes @ 0x0
   339                           
   340  0070                     ?_uart_dataready:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0070                     ??_uart_dataready:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0070                     ?_even_parity:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0070                     ??_even_parity:	
   350                           ; 1 bytes @ 0x0
   351                           
   352  0070                     ?_writePDU:	
   353                           ; 1 bytes @ 0x0
   354                           
   355  0070                     ?_getPDU:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0070                     ?_processPDU:	
   359                           ; 1 bytes @ 0x0
   360                           
   361  0070                     ?_myISR:	
   362                           ; 1 bytes @ 0x0
   363                           
   364  0070                     ?_main:	
   365                           ; 1 bytes @ 0x0
   366                           
   367  0070                     ?_CRC16:	
   368                           ; 1 bytes @ 0x0
   369                           
   370  0070                     uart_write@data:	
   371                           ; 2 bytes @ 0x0
   372                           
   373  0070                     CRC16@count:	
   374                           ; 1 bytes @ 0x0
   375                           
   376                           
   377                           ; 1 bytes @ 0x0
   378  0070                     	ds	1
   379  0071                     ??_writePDU:
   380  0071                     even_parity@chbyte:	
   381                           ; 1 bytes @ 0x1
   382                           
   383                           
   384                           ; 1 bytes @ 0x1
   385  0071                     	ds	1
   386  0072                     ??_CRC16:
   387  0072                     writePDU@count:	
   388                           ; 1 bytes @ 0x2
   389                           
   390  0072                     even_parity@i:	
   391                           ; 1 bytes @ 0x2
   392                           
   393                           
   394                           ; 2 bytes @ 0x2
   395  0072                     	ds	1
   396  0073                     writePDU@i:
   397                           
   398                           ; 2 bytes @ 0x3
   399  0073                     	ds	1
   400  0074                     even_parity@parity:
   401                           
   402                           ; 1 bytes @ 0x4
   403  0074                     	ds	1
   404  0075                     even_parity@tool:
   405  0075                     CRC16@i:	
   406                           ; 1 bytes @ 0x5
   407                           
   408                           
   409                           ; 2 bytes @ 0x5
   410  0075                     	ds	1
   411  0076                     ??_getPDU:
   412  0076                     getPDU@nineth:	
   413                           ; 1 bytes @ 0x6
   414                           
   415                           
   416                           ; 1 bytes @ 0x6
   417  0076                     	ds	1
   418  0077                     getPDU@i:
   419  0077                     CRC16@j:	
   420                           ; 1 bytes @ 0x7
   421                           
   422                           
   423                           ; 2 bytes @ 0x7
   424  0077                     	ds	2
   425  0079                     CRC16@PDU:
   426                           
   427                           ; 1 bytes @ 0x9
   428  0079                     	ds	1
   429  007A                     CRC16@reg_crc:
   430                           
   431                           ; 2 bytes @ 0xA
   432  007A                     	ds	2
   433  007C                     ?_sendexception:
   434  007C                     sendexception@errorcode:	
   435                           ; 1 bytes @ 0xC
   436                           
   437                           
   438                           ; 1 bytes @ 0xC
   439  007C                     	ds	1
   440  007D                     ??_sendexception:
   441  007D                     sendexception@functioncode:	
   442                           ; 1 bytes @ 0xD
   443                           
   444                           
   445                           ; 1 bytes @ 0xD
   446  007D                     	ds	1
   447                           
   448                           	psect	cstackBANK0
   449  0020                     __pcstackBANK0:
   450  0020                     ??_processPDU:
   451                           
   452                           ; 1 bytes @ 0x0
   453  0020                     	ds	4
   454  0024                     processPDU@valueint_262:
   455                           
   456                           ; 2 bytes @ 0x4
   457  0024                     	ds	2
   458  0026                     processPDU@i_239:
   459                           
   460                           ; 2 bytes @ 0x6
   461  0026                     	ds	2
   462  0028                     processPDU@i_241:
   463                           
   464                           ; 2 bytes @ 0x8
   465  0028                     	ds	2
   466  002A                     processPDU@i_248:
   467                           
   468                           ; 2 bytes @ 0xA
   469  002A                     	ds	2
   470  002C                     processPDU@i_250:
   471                           
   472                           ; 2 bytes @ 0xC
   473  002C                     	ds	2
   474  002E                     processPDU@regadd_261:
   475                           
   476                           ; 2 bytes @ 0xE
   477  002E                     	ds	2
   478  0030                     processPDU@coilsleft:
   479                           
   480                           ; 1 bytes @ 0x10
   481  0030                     	ds	1
   482  0031                     processPDU@coilsleft_246:
   483                           
   484                           ; 1 bytes @ 0x11
   485  0031                     	ds	1
   486  0032                     processPDU@count:
   487                           
   488                           ; 1 bytes @ 0x12
   489  0032                     	ds	1
   490  0033                     processPDU@reg:
   491                           
   492                           ; 2 bytes @ 0x13
   493  0033                     	ds	2
   494  0035                     processPDU@i:
   495                           
   496                           ; 2 bytes @ 0x15
   497  0035                     	ds	2
   498  0037                     processPDU@j:
   499                           
   500                           ; 2 bytes @ 0x17
   501  0037                     	ds	2
   502  0039                     processPDU@reg_242:
   503                           
   504                           ; 2 bytes @ 0x19
   505  0039                     	ds	2
   506  003B                     processPDU@i_244:
   507                           
   508                           ; 2 bytes @ 0x1B
   509  003B                     	ds	2
   510  003D                     processPDU@j_249:
   511                           
   512                           ; 2 bytes @ 0x1D
   513  003D                     	ds	2
   514  003F                     processPDU@regadd:
   515                           
   516                           ; 2 bytes @ 0x1F
   517  003F                     	ds	2
   518  0041                     processPDU@i_253:
   519                           
   520                           ; 2 bytes @ 0x21
   521  0041                     	ds	2
   522  0043                     processPDU@i_254:
   523                           
   524                           ; 2 bytes @ 0x23
   525  0043                     	ds	2
   526  0045                     processPDU@regadd_255:
   527                           
   528                           ; 2 bytes @ 0x25
   529  0045                     	ds	2
   530  0047                     processPDU@i_257:
   531                           
   532                           ; 2 bytes @ 0x27
   533  0047                     	ds	2
   534  0049                     processPDU@i_258:
   535                           
   536                           ; 2 bytes @ 0x29
   537  0049                     	ds	2
   538  004B                     processPDU@regadd_259:
   539                           
   540                           ; 2 bytes @ 0x2B
   541  004B                     	ds	2
   542  004D                     processPDU@regcount:
   543                           
   544                           ; 2 bytes @ 0x2D
   545  004D                     	ds	2
   546  004F                     processPDU@regcount_256:
   547                           
   548                           ; 2 bytes @ 0x2F
   549  004F                     	ds	2
   550  0051                     processPDU@valueint:
   551                           
   552                           ; 2 bytes @ 0x31
   553  0051                     	ds	2
   554  0053                     processPDU@coilbytescount:
   555                           
   556                           ; 1 bytes @ 0x33
   557  0053                     	ds	1
   558  0054                     processPDU@coilbytescount_245:
   559                           
   560                           ; 1 bytes @ 0x34
   561  0054                     	ds	1
   562  0055                     processPDU@buff:
   563                           
   564                           ; 1 bytes @ 0x35
   565  0055                     	ds	1
   566  0056                     processPDU@buff_247:
   567                           
   568                           ; 1 bytes @ 0x36
   569  0056                     	ds	1
   570  0057                     processPDU@coilcount:
   571                           
   572                           ; 2 bytes @ 0x37
   573  0057                     	ds	2
   574  0059                     processPDU@coilcount_243:
   575                           
   576                           ; 2 bytes @ 0x39
   577  0059                     	ds	2
   578  005B                     processPDU@index:
   579                           
   580                           ; 1 bytes @ 0x3B
   581  005B                     	ds	1
   582  005C                     ??_myISR:
   583                           
   584                           ; 1 bytes @ 0x3C
   585  005C                     	ds	4
   586                           
   587                           	psect	maintext
   588  0E47                     __pmaintext:	
   589 ;;
   590 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   591 ;;
   592 ;; *************** function _main *****************
   593 ;; Defined at:
   594 ;;		line 420 in file "newmain.c"
   595 ;; Parameters:    Size  Location     Type
   596 ;;		None
   597 ;; Auto vars:     Size  Location     Type
   598 ;;		None
   599 ;; Return value:  Size  Location     Type
   600 ;;                  1    wreg      void 
   601 ;; Registers used:
   602 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   603 ;; Tracked objects:
   604 ;;		On entry : B00/0
   605 ;;		On exit  : 0/0
   606 ;;		Unchanged: 0/0
   607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   608 ;;      Params:         0       0       0       0       0
   609 ;;      Locals:         0       0       0       0       0
   610 ;;      Temps:          0       0       0       0       0
   611 ;;      Totals:         0       0       0       0       0
   612 ;;Total ram usage:        0 bytes
   613 ;; Hardware stack levels required when called:    7
   614 ;; This function calls:
   615 ;;		_uart_init
   616 ;; This function is called by:
   617 ;;		Startup code after reset
   618 ;; This function uses a non-reentrant model
   619 ;;
   620                           
   621                           
   622                           ;psect for function _main
   623  0E47                     _main:
   624  0E47                     l2173:	
   625                           ;incstack = 0
   626                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   627                           
   628                           
   629                           ;newmain.c: 423:     TRISD=0x00;
   630  0E47  1683               	bsf	3,5	;RP0=1, select bank1
   631  0E48  1303               	bcf	3,6	;RP1=0, select bank1
   632  0E49  0188               	clrf	8	;volatile
   633  0E4A                     l2175:
   634                           
   635                           ;newmain.c: 424:     uart_init(9600);
   636  0E4A  3000               	movlw	0
   637  0E4B  00DC               	movwf	(uart_init@baudrate+3)^(0+128)
   638  0E4C  3000               	movlw	0
   639  0E4D  00DB               	movwf	(uart_init@baudrate+2)^(0+128)
   640  0E4E  3025               	movlw	37
   641  0E4F  00DA               	movwf	(uart_init@baudrate+1)^(0+128)
   642  0E50  3080               	movlw	128
   643  0E51  00D9               	movwf	uart_init@baudrate^(0+128)
   644  0E52  120A  118A  26B3  120A  158A  	fcall	_uart_init
   645  0E57                     l2177:
   646                           
   647                           ;newmain.c: 426:     PIE1bits.RCIE=1;
   648  0E57  1683               	bsf	3,5	;RP0=1, select bank1
   649  0E58  1303               	bcf	3,6	;RP1=0, select bank1
   650  0E59  168C               	bsf	12,5	;volatile
   651  0E5A                     l2179:
   652                           
   653                           ;newmain.c: 427:     OPTION_REGbits.T0CS = 0;
   654  0E5A  1281               	bcf	1,5	;volatile
   655  0E5B                     l2181:
   656                           
   657                           ;newmain.c: 428:     OPTION_REGbits.T0SE = 0;
   658  0E5B  1201               	bcf	1,4	;volatile
   659  0E5C                     l2183:
   660                           
   661                           ;newmain.c: 429:     OPTION_REGbits.PSA = 0;
   662  0E5C  1181               	bcf	1,3	;volatile
   663  0E5D                     l2185:
   664                           
   665                           ;newmain.c: 430:     OPTION_REGbits.PS2 = 1;
   666  0E5D  1501               	bsf	1,2	;volatile
   667  0E5E                     l2187:
   668                           
   669                           ;newmain.c: 431:     OPTION_REGbits.PS1 = 0;
   670  0E5E  1081               	bcf	1,1	;volatile
   671  0E5F                     l2189:
   672                           
   673                           ;newmain.c: 432:     OPTION_REGbits.PS0 = 1;
   674  0E5F  1401               	bsf	1,0	;volatile
   675  0E60                     l226:	
   676                           ;newmain.c: 436:     while(1)
   677                           
   678  0E60                     l227:	
   679                           ;newmain.c: 437:     {;newmain.c: 439:     }
   680                           
   681  0E60  2E60               	goto	l226
   682  0E61  120A  118A  2812   	ljmp	start
   683  0E64                     __end_of_main:
   684                           
   685                           	psect	text1
   686  06B3                     __ptext1:	
   687 ;; *************** function _uart_init *****************
   688 ;; Defined at:
   689 ;;		line 18 in file "./uart.h"
   690 ;; Parameters:    Size  Location     Type
   691 ;;  baudrate        4   15[BANK1 ] const long 
   692 ;; Auto vars:     Size  Location     Type
   693 ;;  x               2   31[BANK1 ] unsigned int 
   694 ;; Return value:  Size  Location     Type
   695 ;;                  1    wreg      unsigned char 
   696 ;; Registers used:
   697 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   698 ;; Tracked objects:
   699 ;;		On entry : 0/0
   700 ;;		On exit  : 0/0
   701 ;;		Unchanged: 0/0
   702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   703 ;;      Params:         0       0       4       0       0
   704 ;;      Locals:         0       0       2       0       0
   705 ;;      Temps:          0       0      12       0       0
   706 ;;      Totals:         0       0      18       0       0
   707 ;;Total ram usage:       18 bytes
   708 ;; Hardware stack levels used:    1
   709 ;; Hardware stack levels required when called:    6
   710 ;; This function calls:
   711 ;;		___aldiv
   712 ;; This function is called by:
   713 ;;		_main
   714 ;; This function uses a non-reentrant model
   715 ;;
   716                           
   717                           
   718                           ;psect for function _uart_init
   719  06B3                     _uart_init:
   720  06B3                     l1649:	
   721                           ;incstack = 0
   722                           ; Regs used in _uart_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   723                           
   724                           
   725                           ;./uart.h: 18:     char uart_init(const long int baudrate);./uart.h: 19: {;./uart.h: 20:
      +                               unsigned int x;;./uart.h: 21:     x=(20000000 - baudrate*64)/(baudrate*64);
   726  06B3  1683               	bsf	3,5	;RP0=1, select bank1
   727  06B4  1303               	bcf	3,6	;RP1=0, select bank1
   728  06B5  0859               	movf	uart_init@baudrate^(0+128),w
   729  06B6  00DD               	movwf	??_uart_init^(0+128)
   730  06B7  085A               	movf	(uart_init@baudrate+1)^(0+128),w
   731  06B8  00DE               	movwf	(??_uart_init^(0+128)+1)
   732  06B9  085B               	movf	(uart_init@baudrate+2)^(0+128),w
   733  06BA  00DF               	movwf	(??_uart_init^(0+128)+2)
   734  06BB  085C               	movf	(uart_init@baudrate+3)^(0+128),w
   735  06BC  00E0               	movwf	(??_uart_init^(0+128)+3)
   736  06BD  3006               	movlw	6
   737  06BE                     u1015:
   738  06BE  1003               	clrc
   739  06BF  0DDD               	rlf	??_uart_init^(0+128),f
   740  06C0  0DDE               	rlf	(??_uart_init^(0+128)+1),f
   741  06C1  0DDF               	rlf	(??_uart_init^(0+128)+2),f
   742  06C2  0DE0               	rlf	(??_uart_init^(0+128)+3),f
   743  06C3                     u1010:
   744  06C3  3EFF               	addlw	-1
   745  06C4  1D03               	skipz
   746  06C5  2EBE               	goto	u1015
   747  06C6  0860               	movf	(??_uart_init+3)^(0+128),w
   748  06C7  00CD               	movwf	(___aldiv@divisor+3)^(0+128)
   749  06C8  085F               	movf	(??_uart_init+2)^(0+128),w
   750  06C9  00CC               	movwf	(___aldiv@divisor+2)^(0+128)
   751  06CA  085E               	movf	(??_uart_init+1)^(0+128),w
   752  06CB  00CB               	movwf	(___aldiv@divisor+1)^(0+128)
   753  06CC  085D               	movf	??_uart_init^(0+128),w
   754  06CD  00CA               	movwf	___aldiv@divisor^(0+128)
   755  06CE  0859               	movf	uart_init@baudrate^(0+128),w
   756  06CF  00E1               	movwf	(??_uart_init+4)^(0+128)
   757  06D0  085A               	movf	(uart_init@baudrate+1)^(0+128),w
   758  06D1  00E2               	movwf	((??_uart_init+4)^(0+128)+1)
   759  06D2  085B               	movf	(uart_init@baudrate+2)^(0+128),w
   760  06D3  00E3               	movwf	((??_uart_init+4)^(0+128)+2)
   761  06D4  085C               	movf	(uart_init@baudrate+3)^(0+128),w
   762  06D5  00E4               	movwf	((??_uart_init+4)^(0+128)+3)
   763  06D6  3006               	movlw	6
   764  06D7                     u1025:
   765  06D7  1003               	clrc
   766  06D8  0DE1               	rlf	(??_uart_init+4)^(0+128),f
   767  06D9  0DE2               	rlf	((??_uart_init+4)^(0+128)+1),f
   768  06DA  0DE3               	rlf	((??_uart_init+4)^(0+128)+2),f
   769  06DB  0DE4               	rlf	((??_uart_init+4)^(0+128)+3),f
   770  06DC                     u1020:
   771  06DC  3EFF               	addlw	-1
   772  06DD  1D03               	skipz
   773  06DE  2ED7               	goto	u1025
   774  06DF  3000               	movlw	0
   775  06E0  00E5               	movwf	(??_uart_init+8)^(0+128)
   776  06E1  302D               	movlw	45
   777  06E2  00E6               	movwf	((??_uart_init+8)^(0+128)+1)
   778  06E3  3031               	movlw	49
   779  06E4  00E7               	movwf	((??_uart_init+8)^(0+128)+2)
   780  06E5  3001               	movlw	1
   781  06E6  00E8               	movwf	((??_uart_init+8)^(0+128)+3)
   782  06E7  0861               	movf	(??_uart_init+4)^(0+128),w
   783  06E8  02E5               	subwf	(??_uart_init+8)^(0+128),f
   784  06E9  0862               	movf	(??_uart_init+5)^(0+128),w
   785  06EA  1C03               	skipc
   786  06EB  0F62               	incfsz	(??_uart_init+5)^(0+128),w
   787  06EC  2EEE               	goto	u1031
   788  06ED  2EEF               	goto	u1032
   789  06EE                     u1031:
   790  06EE  02E6               	subwf	((??_uart_init+8)^(0+128)+1),f
   791  06EF                     u1032:
   792  06EF  0863               	movf	(??_uart_init+6)^(0+128),w
   793  06F0  1C03               	skipc
   794  06F1  0F63               	incfsz	(??_uart_init+6)^(0+128),w
   795  06F2  2EF4               	goto	u1033
   796  06F3  2EF5               	goto	u1034
   797  06F4                     u1033:
   798  06F4  02E7               	subwf	((??_uart_init+8)^(0+128)+2),f
   799  06F5                     u1034:
   800  06F5  0864               	movf	(??_uart_init+7)^(0+128),w
   801  06F6  1C03               	skipc
   802  06F7  0F64               	incfsz	(??_uart_init+7)^(0+128),w
   803  06F8  2EFA               	goto	u1035
   804  06F9  2EFB               	goto	u1036
   805  06FA                     u1035:
   806  06FA  02E8               	subwf	((??_uart_init+8)^(0+128)+3),f
   807  06FB                     u1036:
   808  06FB  0868               	movf	(??_uart_init+11)^(0+128),w
   809  06FC  00D1               	movwf	(___aldiv@dividend+3)^(0+128)
   810  06FD  0867               	movf	(??_uart_init+10)^(0+128),w
   811  06FE  00D0               	movwf	(___aldiv@dividend+2)^(0+128)
   812  06FF  0866               	movf	(??_uart_init+9)^(0+128),w
   813  0700  00CF               	movwf	(___aldiv@dividend+1)^(0+128)
   814  0701  0865               	movf	(??_uart_init+8)^(0+128),w
   815  0702  00CE               	movwf	___aldiv@dividend^(0+128)
   816  0703  120A  158A  2763  120A  118A  	fcall	___aldiv
   817  0708  1683               	bsf	3,5	;RP0=1, select bank1
   818  0709  1303               	bcf	3,6	;RP1=0, select bank1
   819  070A  084B               	movf	(?___aldiv+1)^(0+128),w
   820  070B  00EA               	movwf	(uart_init@x+1)^(0+128)
   821  070C  084A               	movf	?___aldiv^(0+128),w
   822  070D  00E9               	movwf	uart_init@x^(0+128)
   823  070E                     l1651:
   824                           
   825                           ;./uart.h: 22:     if(x>255)
   826  070E  3001               	movlw	1
   827  070F  026A               	subwf	(uart_init@x+1)^(0+128),w
   828  0710  3000               	movlw	0
   829  0711  1903               	skipnz
   830  0712  0269               	subwf	uart_init@x^(0+128),w
   831  0713  1C03               	skipc
   832  0714  2F16               	goto	u1041
   833  0715  2F17               	goto	u1040
   834  0716                     u1041:
   835  0716  2F71               	goto	l1657
   836  0717                     u1040:
   837  0717                     l1653:
   838                           
   839                           ;./uart.h: 23:     {;./uart.h: 24:         x=(20000000 - baudrate*16)/(baudrate*16);
   840  0717  0859               	movf	uart_init@baudrate^(0+128),w
   841  0718  00DD               	movwf	??_uart_init^(0+128)
   842  0719  085A               	movf	(uart_init@baudrate+1)^(0+128),w
   843  071A  00DE               	movwf	(??_uart_init^(0+128)+1)
   844  071B  085B               	movf	(uart_init@baudrate+2)^(0+128),w
   845  071C  00DF               	movwf	(??_uart_init^(0+128)+2)
   846  071D  085C               	movf	(uart_init@baudrate+3)^(0+128),w
   847  071E  00E0               	movwf	(??_uart_init^(0+128)+3)
   848  071F  3004               	movlw	4
   849  0720                     u1055:
   850  0720  1003               	clrc
   851  0721  0DDD               	rlf	??_uart_init^(0+128),f
   852  0722  0DDE               	rlf	(??_uart_init^(0+128)+1),f
   853  0723  0DDF               	rlf	(??_uart_init^(0+128)+2),f
   854  0724  0DE0               	rlf	(??_uart_init^(0+128)+3),f
   855  0725                     u1050:
   856  0725  3EFF               	addlw	-1
   857  0726  1D03               	skipz
   858  0727  2F20               	goto	u1055
   859  0728  0860               	movf	(??_uart_init+3)^(0+128),w
   860  0729  00CD               	movwf	(___aldiv@divisor+3)^(0+128)
   861  072A  085F               	movf	(??_uart_init+2)^(0+128),w
   862  072B  00CC               	movwf	(___aldiv@divisor+2)^(0+128)
   863  072C  085E               	movf	(??_uart_init+1)^(0+128),w
   864  072D  00CB               	movwf	(___aldiv@divisor+1)^(0+128)
   865  072E  085D               	movf	??_uart_init^(0+128),w
   866  072F  00CA               	movwf	___aldiv@divisor^(0+128)
   867  0730  0859               	movf	uart_init@baudrate^(0+128),w
   868  0731  00E1               	movwf	(??_uart_init+4)^(0+128)
   869  0732  085A               	movf	(uart_init@baudrate+1)^(0+128),w
   870  0733  00E2               	movwf	((??_uart_init+4)^(0+128)+1)
   871  0734  085B               	movf	(uart_init@baudrate+2)^(0+128),w
   872  0735  00E3               	movwf	((??_uart_init+4)^(0+128)+2)
   873  0736  085C               	movf	(uart_init@baudrate+3)^(0+128),w
   874  0737  00E4               	movwf	((??_uart_init+4)^(0+128)+3)
   875  0738  3004               	movlw	4
   876  0739                     u1065:
   877  0739  1003               	clrc
   878  073A  0DE1               	rlf	(??_uart_init+4)^(0+128),f
   879  073B  0DE2               	rlf	((??_uart_init+4)^(0+128)+1),f
   880  073C  0DE3               	rlf	((??_uart_init+4)^(0+128)+2),f
   881  073D  0DE4               	rlf	((??_uart_init+4)^(0+128)+3),f
   882  073E                     u1060:
   883  073E  3EFF               	addlw	-1
   884  073F  1D03               	skipz
   885  0740  2F39               	goto	u1065
   886  0741  3000               	movlw	0
   887  0742  00E5               	movwf	(??_uart_init+8)^(0+128)
   888  0743  302D               	movlw	45
   889  0744  00E6               	movwf	((??_uart_init+8)^(0+128)+1)
   890  0745  3031               	movlw	49
   891  0746  00E7               	movwf	((??_uart_init+8)^(0+128)+2)
   892  0747  3001               	movlw	1
   893  0748  00E8               	movwf	((??_uart_init+8)^(0+128)+3)
   894  0749  0861               	movf	(??_uart_init+4)^(0+128),w
   895  074A  02E5               	subwf	(??_uart_init+8)^(0+128),f
   896  074B  0862               	movf	(??_uart_init+5)^(0+128),w
   897  074C  1C03               	skipc
   898  074D  0F62               	incfsz	(??_uart_init+5)^(0+128),w
   899  074E  2F50               	goto	u1071
   900  074F  2F51               	goto	u1072
   901  0750                     u1071:
   902  0750  02E6               	subwf	((??_uart_init+8)^(0+128)+1),f
   903  0751                     u1072:
   904  0751  0863               	movf	(??_uart_init+6)^(0+128),w
   905  0752  1C03               	skipc
   906  0753  0F63               	incfsz	(??_uart_init+6)^(0+128),w
   907  0754  2F56               	goto	u1073
   908  0755  2F57               	goto	u1074
   909  0756                     u1073:
   910  0756  02E7               	subwf	((??_uart_init+8)^(0+128)+2),f
   911  0757                     u1074:
   912  0757  0864               	movf	(??_uart_init+7)^(0+128),w
   913  0758  1C03               	skipc
   914  0759  0F64               	incfsz	(??_uart_init+7)^(0+128),w
   915  075A  2F5C               	goto	u1075
   916  075B  2F5D               	goto	u1076
   917  075C                     u1075:
   918  075C  02E8               	subwf	((??_uart_init+8)^(0+128)+3),f
   919  075D                     u1076:
   920  075D  0868               	movf	(??_uart_init+11)^(0+128),w
   921  075E  00D1               	movwf	(___aldiv@dividend+3)^(0+128)
   922  075F  0867               	movf	(??_uart_init+10)^(0+128),w
   923  0760  00D0               	movwf	(___aldiv@dividend+2)^(0+128)
   924  0761  0866               	movf	(??_uart_init+9)^(0+128),w
   925  0762  00CF               	movwf	(___aldiv@dividend+1)^(0+128)
   926  0763  0865               	movf	(??_uart_init+8)^(0+128),w
   927  0764  00CE               	movwf	___aldiv@dividend^(0+128)
   928  0765  120A  158A  2763  120A  118A  	fcall	___aldiv
   929  076A  1683               	bsf	3,5	;RP0=1, select bank1
   930  076B  1303               	bcf	3,6	;RP1=0, select bank1
   931  076C  084B               	movf	(?___aldiv+1)^(0+128),w
   932  076D  00EA               	movwf	(uart_init@x+1)^(0+128)
   933  076E  084A               	movf	?___aldiv^(0+128),w
   934  076F  00E9               	movwf	uart_init@x^(0+128)
   935  0770                     l1655:
   936                           
   937                           ;./uart.h: 25:         BRGH=1;
   938  0770  1518               	bsf	24,2	;volatile
   939  0771                     l1657:
   940                           
   941                           ;./uart.h: 27:     if(x<256)
   942  0771  3001               	movlw	1
   943  0772  026A               	subwf	(uart_init@x+1)^(0+128),w
   944  0773  3000               	movlw	0
   945  0774  1903               	skipnz
   946  0775  0269               	subwf	uart_init@x^(0+128),w
   947  0776  1803               	skipnc
   948  0777  2F79               	goto	u1081
   949  0778  2F7A               	goto	u1080
   950  0779                     u1081:
   951  0779  2F8B               	goto	l43
   952  077A                     u1080:
   953  077A                     l1659:
   954                           
   955                           ;./uart.h: 28:     {;./uart.h: 29:         SPBRG=x;
   956  077A  0869               	movf	uart_init@x^(0+128),w
   957  077B  0099               	movwf	25	;volatile
   958  077C                     l1661:
   959                           
   960                           ;./uart.h: 30:         SYNC=0;
   961  077C  1218               	bcf	24,4	;volatile
   962  077D                     l1663:
   963                           
   964                           ;./uart.h: 31:         SPEN=1;
   965  077D  1283               	bcf	3,5	;RP0=0, select bank0
   966  077E  1303               	bcf	3,6	;RP1=0, select bank0
   967  077F  1798               	bsf	24,7	;volatile
   968  0780                     l1665:
   969                           
   970                           ;./uart.h: 32:         RX9=1;
   971  0780  1718               	bsf	24,6	;volatile
   972  0781                     l1667:
   973                           
   974                           ;./uart.h: 33:         TRISC7=1;
   975  0781  1683               	bsf	3,5	;RP0=1, select bank1
   976  0782  1303               	bcf	3,6	;RP1=0, select bank1
   977  0783  1787               	bsf	7,7	;volatile
   978  0784                     l1669:
   979                           
   980                           ;./uart.h: 34:         TRISC6=1;
   981  0784  1707               	bsf	7,6	;volatile
   982  0785                     l1671:
   983                           
   984                           ;./uart.h: 35:         CREN=1;
   985  0785  1283               	bcf	3,5	;RP0=0, select bank0
   986  0786  1303               	bcf	3,6	;RP1=0, select bank0
   987  0787  1618               	bsf	24,4	;volatile
   988  0788                     l1673:
   989                           
   990                           ;./uart.h: 36:         TXEN=1;
   991  0788  1683               	bsf	3,5	;RP0=1, select bank1
   992  0789  1303               	bcf	3,6	;RP1=0, select bank1
   993  078A  1698               	bsf	24,5	;volatile
   994  078B                     l43:
   995  078B  0008               	return
   996  078C                     __end_of_uart_init:
   997                           
   998                           	psect	text2
   999  0F63                     __ptext2:	
  1000 ;; *************** function ___aldiv *****************
  1001 ;; Defined at:
  1002 ;;		line 5 in file "/opt/microchip/xc8/v2.20/pic/sources/c90/common/aldiv.c"
  1003 ;; Parameters:    Size  Location     Type
  1004 ;;  divisor         4    0[BANK1 ] long 
  1005 ;;  dividend        4    4[BANK1 ] long 
  1006 ;; Auto vars:     Size  Location     Type
  1007 ;;  quotient        4   11[BANK1 ] long 
  1008 ;;  sign            1   10[BANK1 ] unsigned char 
  1009 ;;  counter         1    9[BANK1 ] unsigned char 
  1010 ;; Return value:  Size  Location     Type
  1011 ;;                  4    0[BANK1 ] long 
  1012 ;; Registers used:
  1013 ;;		wreg, status,2, status,0, btemp+1
  1014 ;; Tracked objects:
  1015 ;;		On entry : 0/0
  1016 ;;		On exit  : 0/0
  1017 ;;		Unchanged: 0/0
  1018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1019 ;;      Params:         0       0       8       0       0
  1020 ;;      Locals:         0       0       6       0       0
  1021 ;;      Temps:          0       0       1       0       0
  1022 ;;      Totals:         0       0      15       0       0
  1023 ;;Total ram usage:       15 bytes
  1024 ;; Hardware stack levels used:    1
  1025 ;; Hardware stack levels required when called:    5
  1026 ;; This function calls:
  1027 ;;		Nothing
  1028 ;; This function is called by:
  1029 ;;		_uart_init
  1030 ;; This function uses a non-reentrant model
  1031 ;;
  1032                           
  1033                           
  1034                           ;psect for function ___aldiv
  1035  0F63                     ___aldiv:
  1036  0F63                     l1607:	
  1037                           ;incstack = 0
  1038                           ; Regs used in ___aldiv: [wreg+status,2+status,0+btemp+1]
  1039                           
  1040  0F63  1683               	bsf	3,5	;RP0=1, select bank1
  1041  0F64  1303               	bcf	3,6	;RP1=0, select bank1
  1042  0F65  01D4               	clrf	___aldiv@sign^(0+128)
  1043  0F66                     l1609:
  1044  0F66  1FCD               	btfss	(___aldiv@divisor+3)^(0+128),7
  1045  0F67  2F69               	goto	u911
  1046  0F68  2F6A               	goto	u910
  1047  0F69                     u911:
  1048  0F69  2F77               	goto	l380
  1049  0F6A                     u910:
  1050  0F6A                     l1611:
  1051  0F6A  09CA               	comf	___aldiv@divisor^(0+128),f
  1052  0F6B  09CB               	comf	(___aldiv@divisor+1)^(0+128),f
  1053  0F6C  09CC               	comf	(___aldiv@divisor+2)^(0+128),f
  1054  0F6D  09CD               	comf	(___aldiv@divisor+3)^(0+128),f
  1055  0F6E  0ACA               	incf	___aldiv@divisor^(0+128),f
  1056  0F6F  1903               	skipnz
  1057  0F70  0ACB               	incf	(___aldiv@divisor+1)^(0+128),f
  1058  0F71  1903               	skipnz
  1059  0F72  0ACC               	incf	(___aldiv@divisor+2)^(0+128),f
  1060  0F73  1903               	skipnz
  1061  0F74  0ACD               	incf	(___aldiv@divisor+3)^(0+128),f
  1062  0F75  01D4               	clrf	___aldiv@sign^(0+128)
  1063  0F76  0AD4               	incf	___aldiv@sign^(0+128),f
  1064  0F77                     l380:
  1065  0F77  1FD1               	btfss	(___aldiv@dividend+3)^(0+128),7
  1066  0F78  2F7A               	goto	u921
  1067  0F79  2F7B               	goto	u920
  1068  0F7A                     u921:
  1069  0F7A  2F8A               	goto	l1617
  1070  0F7B                     u920:
  1071  0F7B                     l1613:
  1072  0F7B  09CE               	comf	___aldiv@dividend^(0+128),f
  1073  0F7C  09CF               	comf	(___aldiv@dividend+1)^(0+128),f
  1074  0F7D  09D0               	comf	(___aldiv@dividend+2)^(0+128),f
  1075  0F7E  09D1               	comf	(___aldiv@dividend+3)^(0+128),f
  1076  0F7F  0ACE               	incf	___aldiv@dividend^(0+128),f
  1077  0F80  1903               	skipnz
  1078  0F81  0ACF               	incf	(___aldiv@dividend+1)^(0+128),f
  1079  0F82  1903               	skipnz
  1080  0F83  0AD0               	incf	(___aldiv@dividend+2)^(0+128),f
  1081  0F84  1903               	skipnz
  1082  0F85  0AD1               	incf	(___aldiv@dividend+3)^(0+128),f
  1083  0F86                     l1615:
  1084  0F86  3001               	movlw	1
  1085  0F87  00FF               	movwf	btemp+1
  1086  0F88  087F               	movf	btemp+1,w
  1087  0F89  06D4               	xorwf	___aldiv@sign^(0+128),f
  1088  0F8A                     l1617:
  1089  0F8A  3000               	movlw	0
  1090  0F8B  00D8               	movwf	(___aldiv@quotient+3)^(0+128)
  1091  0F8C  3000               	movlw	0
  1092  0F8D  00D7               	movwf	(___aldiv@quotient+2)^(0+128)
  1093  0F8E  3000               	movlw	0
  1094  0F8F  00D6               	movwf	(___aldiv@quotient+1)^(0+128)
  1095  0F90  3000               	movlw	0
  1096  0F91  00D5               	movwf	___aldiv@quotient^(0+128)
  1097  0F92                     l1619:
  1098  0F92  084D               	movf	(___aldiv@divisor+3)^(0+128),w
  1099  0F93  044C               	iorwf	(___aldiv@divisor+2)^(0+128),w
  1100  0F94  044B               	iorwf	(___aldiv@divisor+1)^(0+128),w
  1101  0F95  044A               	iorwf	___aldiv@divisor^(0+128),w
  1102  0F96  1903               	skipnz
  1103  0F97  2F99               	goto	u931
  1104  0F98  2F9A               	goto	u930
  1105  0F99                     u931:
  1106  0F99  2FE7               	goto	l1641
  1107  0F9A                     u930:
  1108  0F9A                     l1621:
  1109  0F9A  01D3               	clrf	___aldiv@counter^(0+128)
  1110  0F9B  0AD3               	incf	___aldiv@counter^(0+128),f
  1111  0F9C  2FAA               	goto	l1627
  1112  0F9D                     l1623:
  1113  0F9D  3001               	movlw	1
  1114  0F9E  00D2               	movwf	??___aldiv^(0+128)
  1115  0F9F                     u945:
  1116  0F9F  1003               	clrc
  1117  0FA0  0DCA               	rlf	___aldiv@divisor^(0+128),f
  1118  0FA1  0DCB               	rlf	(___aldiv@divisor+1)^(0+128),f
  1119  0FA2  0DCC               	rlf	(___aldiv@divisor+2)^(0+128),f
  1120  0FA3  0DCD               	rlf	(___aldiv@divisor+3)^(0+128),f
  1121  0FA4  0BD2               	decfsz	??___aldiv^(0+128),f
  1122  0FA5  2F9F               	goto	u945
  1123  0FA6                     l1625:
  1124  0FA6  3001               	movlw	1
  1125  0FA7  00FF               	movwf	btemp+1
  1126  0FA8  087F               	movf	btemp+1,w
  1127  0FA9  07D3               	addwf	___aldiv@counter^(0+128),f
  1128  0FAA                     l1627:
  1129  0FAA  1FCD               	btfss	(___aldiv@divisor+3)^(0+128),7
  1130  0FAB  2FAD               	goto	u951
  1131  0FAC  2FAE               	goto	u950
  1132  0FAD                     u951:
  1133  0FAD  2F9D               	goto	l1623
  1134  0FAE                     u950:
  1135  0FAE                     l1629:
  1136  0FAE  3001               	movlw	1
  1137  0FAF  00D2               	movwf	??___aldiv^(0+128)
  1138  0FB0                     u965:
  1139  0FB0  1003               	clrc
  1140  0FB1  0DD5               	rlf	___aldiv@quotient^(0+128),f
  1141  0FB2  0DD6               	rlf	(___aldiv@quotient+1)^(0+128),f
  1142  0FB3  0DD7               	rlf	(___aldiv@quotient+2)^(0+128),f
  1143  0FB4  0DD8               	rlf	(___aldiv@quotient+3)^(0+128),f
  1144  0FB5  0BD2               	decfsz	??___aldiv^(0+128),f
  1145  0FB6  2FB0               	goto	u965
  1146  0FB7                     l1631:
  1147  0FB7  084D               	movf	(___aldiv@divisor+3)^(0+128),w
  1148  0FB8  0251               	subwf	(___aldiv@dividend+3)^(0+128),w
  1149  0FB9  1D03               	skipz
  1150  0FBA  2FC5               	goto	u975
  1151  0FBB  084C               	movf	(___aldiv@divisor+2)^(0+128),w
  1152  0FBC  0250               	subwf	(___aldiv@dividend+2)^(0+128),w
  1153  0FBD  1D03               	skipz
  1154  0FBE  2FC5               	goto	u975
  1155  0FBF  084B               	movf	(___aldiv@divisor+1)^(0+128),w
  1156  0FC0  024F               	subwf	(___aldiv@dividend+1)^(0+128),w
  1157  0FC1  1D03               	skipz
  1158  0FC2  2FC5               	goto	u975
  1159  0FC3  084A               	movf	___aldiv@divisor^(0+128),w
  1160  0FC4  024E               	subwf	___aldiv@dividend^(0+128),w
  1161  0FC5                     u975:
  1162  0FC5  1C03               	skipc
  1163  0FC6  2FC8               	goto	u971
  1164  0FC7  2FC9               	goto	u970
  1165  0FC8                     u971:
  1166  0FC8  2FD8               	goto	l1637
  1167  0FC9                     u970:
  1168  0FC9                     l1633:
  1169  0FC9  084A               	movf	___aldiv@divisor^(0+128),w
  1170  0FCA  02CE               	subwf	___aldiv@dividend^(0+128),f
  1171  0FCB  084B               	movf	(___aldiv@divisor+1)^(0+128),w
  1172  0FCC  1C03               	skipc
  1173  0FCD  0F4B               	incfsz	(___aldiv@divisor+1)^(0+128),w
  1174  0FCE  02CF               	subwf	(___aldiv@dividend+1)^(0+128),f
  1175  0FCF  084C               	movf	(___aldiv@divisor+2)^(0+128),w
  1176  0FD0  1C03               	skipc
  1177  0FD1  0F4C               	incfsz	(___aldiv@divisor+2)^(0+128),w
  1178  0FD2  02D0               	subwf	(___aldiv@dividend+2)^(0+128),f
  1179  0FD3  084D               	movf	(___aldiv@divisor+3)^(0+128),w
  1180  0FD4  1C03               	skipc
  1181  0FD5  0F4D               	incfsz	(___aldiv@divisor+3)^(0+128),w
  1182  0FD6  02D1               	subwf	(___aldiv@dividend+3)^(0+128),f
  1183  0FD7                     l1635:
  1184  0FD7  1455               	bsf	___aldiv@quotient^(0+128),0
  1185  0FD8                     l1637:
  1186  0FD8  3001               	movlw	1
  1187  0FD9                     u985:
  1188  0FD9  1003               	clrc
  1189  0FDA  0CCD               	rrf	(___aldiv@divisor+3)^(0+128),f
  1190  0FDB  0CCC               	rrf	(___aldiv@divisor+2)^(0+128),f
  1191  0FDC  0CCB               	rrf	(___aldiv@divisor+1)^(0+128),f
  1192  0FDD  0CCA               	rrf	___aldiv@divisor^(0+128),f
  1193  0FDE  3EFF               	addlw	-1
  1194  0FDF  1D03               	skipz
  1195  0FE0  2FD9               	goto	u985
  1196  0FE1                     l1639:
  1197  0FE1  3001               	movlw	1
  1198  0FE2  02D3               	subwf	___aldiv@counter^(0+128),f
  1199  0FE3  1D03               	btfss	3,2
  1200  0FE4  2FE6               	goto	u991
  1201  0FE5  2FE7               	goto	u990
  1202  0FE6                     u991:
  1203  0FE6  2FAE               	goto	l1629
  1204  0FE7                     u990:
  1205  0FE7                     l1641:
  1206  0FE7  0854               	movf	___aldiv@sign^(0+128),w
  1207  0FE8  1903               	btfsc	3,2
  1208  0FE9  2FEB               	goto	u1001
  1209  0FEA  2FEC               	goto	u1000
  1210  0FEB                     u1001:
  1211  0FEB  2FF7               	goto	l1645
  1212  0FEC                     u1000:
  1213  0FEC                     l1643:
  1214  0FEC  09D5               	comf	___aldiv@quotient^(0+128),f
  1215  0FED  09D6               	comf	(___aldiv@quotient+1)^(0+128),f
  1216  0FEE  09D7               	comf	(___aldiv@quotient+2)^(0+128),f
  1217  0FEF  09D8               	comf	(___aldiv@quotient+3)^(0+128),f
  1218  0FF0  0AD5               	incf	___aldiv@quotient^(0+128),f
  1219  0FF1  1903               	skipnz
  1220  0FF2  0AD6               	incf	(___aldiv@quotient+1)^(0+128),f
  1221  0FF3  1903               	skipnz
  1222  0FF4  0AD7               	incf	(___aldiv@quotient+2)^(0+128),f
  1223  0FF5  1903               	skipnz
  1224  0FF6  0AD8               	incf	(___aldiv@quotient+3)^(0+128),f
  1225  0FF7                     l1645:
  1226  0FF7  0858               	movf	(___aldiv@quotient+3)^(0+128),w
  1227  0FF8  00CD               	movwf	(?___aldiv+3)^(0+128)
  1228  0FF9  0857               	movf	(___aldiv@quotient+2)^(0+128),w
  1229  0FFA  00CC               	movwf	(?___aldiv+2)^(0+128)
  1230  0FFB  0856               	movf	(___aldiv@quotient+1)^(0+128),w
  1231  0FFC  00CB               	movwf	(?___aldiv+1)^(0+128)
  1232  0FFD  0855               	movf	___aldiv@quotient^(0+128),w
  1233  0FFE  00CA               	movwf	?___aldiv^(0+128)
  1234  0FFF                     l390:
  1235  0FFF  0008               	return
  1236  1000                     __end_of___aldiv:
  1237                           
  1238                           	psect	text3
  1239  0EB3                     __ptext3:	
  1240 ;; *************** function _myISR *****************
  1241 ;; Defined at:
  1242 ;;		line 403 in file "newmain.c"
  1243 ;; Parameters:    Size  Location     Type
  1244 ;;		None
  1245 ;; Auto vars:     Size  Location     Type
  1246 ;;		None
  1247 ;; Return value:  Size  Location     Type
  1248 ;;                  1    wreg      void 
  1249 ;; Registers used:
  1250 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1251 ;; Tracked objects:
  1252 ;;		On entry : 0/0
  1253 ;;		On exit  : 0/0
  1254 ;;		Unchanged: 0/0
  1255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1256 ;;      Params:         0       0       0       0       0
  1257 ;;      Locals:         0       0       0       0       0
  1258 ;;      Temps:          0       4       0       0       0
  1259 ;;      Totals:         0       4       0       0       0
  1260 ;;Total ram usage:        4 bytes
  1261 ;; Hardware stack levels used:    1
  1262 ;; Hardware stack levels required when called:    4
  1263 ;; This function calls:
  1264 ;;		_getPDU
  1265 ;;		_processPDU
  1266 ;; This function is called by:
  1267 ;;		Interrupt level 1
  1268 ;; This function uses a non-reentrant model
  1269 ;;
  1270                           
  1271                           
  1272                           ;psect for function _myISR
  1273  0EB3                     _myISR:
  1274  0EB3                     i1l2165:
  1275                           
  1276                           ;newmain.c: 407:     if (RCIF==1)
  1277  0EB3  1E8C               	btfss	12,5	;volatile
  1278  0EB4  2EB6               	goto	u157_21
  1279  0EB5  2EB7               	goto	u157_20
  1280  0EB6                     u157_21:
  1281  0EB6  2ED5               	goto	i1l221
  1282  0EB7                     u157_20:
  1283  0EB7                     i1l2167:
  1284                           
  1285                           ;newmain.c: 408:     {;newmain.c: 410:         count = getPDU();
  1286  0EB7  120A  158A  2715  120A  158A  	fcall	_getPDU
  1287  0EBC  00FF               	movwf	btemp+1
  1288  0EBD  087F               	movf	btemp+1,w
  1289  0EBE  1283               	bcf	3,5	;RP0=0, select bank0
  1290  0EBF  1303               	bcf	3,6	;RP1=0, select bank0
  1291  0EC0  00E5               	movwf	_count
  1292  0EC1                     i1l2169:
  1293                           
  1294                           ;newmain.c: 411:         if (count >= 6)
  1295  0EC1  3006               	movlw	6
  1296  0EC2  0265               	subwf	_count,w
  1297  0EC3  1C03               	skipc
  1298  0EC4  2EC6               	goto	u158_21
  1299  0EC5  2EC7               	goto	u158_20
  1300  0EC6                     u158_21:
  1301  0EC6  2ED3               	goto	i1l219
  1302  0EC7                     u158_20:
  1303  0EC7                     i1l2171:
  1304                           
  1305                           ;newmain.c: 412:             status= processPDU(count);
  1306  0EC7  0865               	movf	_count,w
  1307  0EC8  120A  118A  202A  120A  158A  	fcall	_processPDU
  1308  0ECD  00FF               	movwf	btemp+1
  1309  0ECE  087F               	movf	btemp+1,w
  1310  0ECF  1283               	bcf	3,5	;RP0=0, select bank0
  1311  0ED0  1303               	bcf	3,6	;RP1=0, select bank0
  1312  0ED1  00E4               	movwf	_status
  1313  0ED2  2ED5               	goto	i1l221
  1314  0ED3                     i1l219:	
  1315                           ;newmain.c: 413:         else
  1316                           
  1317                           
  1318                           ;newmain.c: 414:             status=1;
  1319  0ED3  01E4               	clrf	_status
  1320  0ED4  0AE4               	incf	_status,f
  1321  0ED5                     i1l221:
  1322  0ED5  085F               	movf	??_myISR+3,w
  1323  0ED6  00FF               	movwf	btemp+1
  1324  0ED7  085E               	movf	??_myISR+2,w
  1325  0ED8  008A               	movwf	10
  1326  0ED9  085D               	movf	??_myISR+1,w
  1327  0EDA  0084               	movwf	4
  1328  0EDB  0E5C               	swapf	??_myISR^0,w
  1329  0EDC  0083               	movwf	3
  1330  0EDD  0EFE               	swapf	btemp,f
  1331  0EDE  0E7E               	swapf	btemp,w
  1332  0EDF  0009               	retfie
  1333  0EE0                     __end_of_myISR:
  1334                           
  1335                           	psect	intentry
  1336  0004                     __pintentry:	
  1337                           ;incstack = 0
  1338                           ; Regs used in _myISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1339                           
  1340  0004                     interrupt_function:
  1341  007E                     saved_w	set	btemp
  1342  0004  00FE               	movwf	btemp
  1343  0005  0E03               	swapf	3,w
  1344  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1345  0007  1303               	bcf	3,6	;RP1=0, select bank0
  1346  0008  00DC               	movwf	??_myISR
  1347  0009  0804               	movf	4,w
  1348  000A  00DD               	movwf	??_myISR+1
  1349  000B  080A               	movf	10,w
  1350  000C  00DE               	movwf	??_myISR+2
  1351  000D  087F               	movf	btemp+1,w
  1352  000E  00DF               	movwf	??_myISR+3
  1353  000F  120A  158A  2EB3   	ljmp	_myISR
  1354                           
  1355                           	psect	text4
  1356  002A                     __ptext4:	
  1357 ;; *************** function _processPDU *****************
  1358 ;; Defined at:
  1359 ;;		line 104 in file "newmain.c"
  1360 ;; Parameters:    Size  Location     Type
  1361 ;;  count           1    wreg     unsigned char 
  1362 ;; Auto vars:     Size  Location     Type
  1363 ;;  count           1   18[BANK0 ] unsigned char 
  1364 ;;  j               2   29[BANK0 ] int 
  1365 ;;  j               2   23[BANK0 ] int 
  1366 ;;  i               2   12[BANK0 ] int 
  1367 ;;  i               2    8[BANK0 ] int 
  1368 ;;  i               2   41[BANK0 ] int 
  1369 ;;  i               2   39[BANK0 ] int 
  1370 ;;  i               2   35[BANK0 ] int 
  1371 ;;  i               2   33[BANK0 ] int 
  1372 ;;  i               2   10[BANK0 ] int 
  1373 ;;  i               2   27[BANK0 ] int 
  1374 ;;  i               2    6[BANK0 ] int 
  1375 ;;  i               2   21[BANK0 ] int 
  1376 ;;  regadd          2   14[BANK0 ] unsigned int 
  1377 ;;  valueint        2    4[BANK0 ] unsigned int 
  1378 ;;  valueint        2   49[BANK0 ] unsigned int 
  1379 ;;  regadd          2   43[BANK0 ] unsigned int 
  1380 ;;  regcount        2   47[BANK0 ] unsigned int 
  1381 ;;  regadd          2   37[BANK0 ] unsigned int 
  1382 ;;  regcount        2   45[BANK0 ] unsigned int 
  1383 ;;  regadd          2   31[BANK0 ] unsigned int 
  1384 ;;  coilcount       2   57[BANK0 ] unsigned int 
  1385 ;;  reg             2   25[BANK0 ] unsigned int 
  1386 ;;  buff            1   54[BANK0 ] unsigned char 
  1387 ;;  coilbytescou    1   52[BANK0 ] unsigned char 
  1388 ;;  coilsleft       1   17[BANK0 ] unsigned char 
  1389 ;;  coilcount       2   55[BANK0 ] unsigned int 
  1390 ;;  reg             2   19[BANK0 ] unsigned int 
  1391 ;;  buff            1   53[BANK0 ] unsigned char 
  1392 ;;  coilbytescou    1   51[BANK0 ] unsigned char 
  1393 ;;  coilsleft       1   16[BANK0 ] unsigned char 
  1394 ;;  index           1   59[BANK0 ] unsigned char 
  1395 ;; Return value:  Size  Location     Type
  1396 ;;                  1    wreg      unsigned char 
  1397 ;; Registers used:
  1398 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1399 ;; Tracked objects:
  1400 ;;		On entry : 0/0
  1401 ;;		On exit  : 0/0
  1402 ;;		Unchanged: 0/0
  1403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1404 ;;      Params:         0       0       0       0       0
  1405 ;;      Locals:         0      56       0       0       0
  1406 ;;      Temps:          0       4       0       0       0
  1407 ;;      Totals:         0      60       0       0       0
  1408 ;;Total ram usage:       60 bytes
  1409 ;; Hardware stack levels used:    1
  1410 ;; Hardware stack levels required when called:    3
  1411 ;; This function calls:
  1412 ;;		_CRC16
  1413 ;;		_sendexception
  1414 ;;		_writePDU
  1415 ;; This function is called by:
  1416 ;;		_myISR
  1417 ;; This function uses a non-reentrant model
  1418 ;;
  1419                           
  1420                           
  1421                           ;psect for function _processPDU
  1422  002A                     _processPDU:
  1423                           
  1424                           ;incstack = 0
  1425                           ; Regs used in _processPDU: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1426                           ;processPDU@count stored from wreg
  1427  002A  1283               	bcf	3,5	;RP0=0, select bank0
  1428  002B  1303               	bcf	3,6	;RP1=0, select bank0
  1429  002C  00B2               	movwf	processPDU@count
  1430  002D                     i1l1711:
  1431                           
  1432                           ;newmain.c: 104: unsigned char processPDU (unsigned char count);newmain.c: 105: {;newmai
      +                          n.c: 106:     if (PDU[0] != address)
  1433  002D  0366               	decf	_PDU,w
  1434  002E  1903               	btfsc	3,2
  1435  002F  2831               	goto	u113_21
  1436  0030  2832               	goto	u113_20
  1437  0031                     u113_21:
  1438  0031  2834               	goto	i1l1717
  1439  0032                     u113_20:
  1440  0032                     i1l1713:
  1441                           
  1442                           ;newmain.c: 107:         return 2;
  1443  0032  3002               	movlw	2
  1444  0033  2EB2               	goto	i1l138
  1445  0034                     i1l1717:
  1446                           
  1447                           ;newmain.c: 109:     unsigned char index=2;
  1448  0034  3002               	movlw	2
  1449  0035  00FF               	movwf	btemp+1
  1450  0036  087F               	movf	btemp+1,w
  1451  0037  00DB               	movwf	processPDU@index
  1452  0038                     i1l1719:
  1453                           
  1454                           ;newmain.c: 111:     CRC = CRC16(PDU,count);
  1455  0038  0832               	movf	processPDU@count,w
  1456  0039  00FF               	movwf	btemp+1
  1457  003A  087F               	movf	btemp+1,w
  1458  003B  00F0               	movwf	CRC16@count
  1459  003C  3066               	movlw	(low (_PDU| 0))& (0+255)
  1460  003D  120A  118A  278C  120A  118A  	fcall	_CRC16
  1461  0042  0871               	movf	?_CRC16+1,w
  1462  0043  1283               	bcf	3,5	;RP0=0, select bank0
  1463  0044  1303               	bcf	3,6	;RP1=0, select bank0
  1464  0045  00E1               	movwf	_CRC+1
  1465  0046  0870               	movf	?_CRC16,w
  1466  0047  00E0               	movwf	_CRC
  1467  0048                     i1l1721:
  1468                           
  1469                           ;newmain.c: 112:     checksum [1] = (unsigned char) ((CRC>>8)&0xFF);
  1470  0048  0861               	movf	_CRC+1,w
  1471  0049  00FF               	movwf	btemp+1
  1472  004A  087F               	movf	btemp+1,w
  1473  004B  00E3               	movwf	_checksum+1
  1474  004C                     i1l1723:
  1475                           
  1476                           ;newmain.c: 113:     checksum [0] = (unsigned char) (CRC & 0xFF);
  1477  004C  0860               	movf	_CRC,w
  1478  004D  00FF               	movwf	btemp+1
  1479  004E  087F               	movf	btemp+1,w
  1480  004F  00E2               	movwf	_checksum
  1481  0050                     i1l1725:
  1482                           
  1483                           ;newmain.c: 114:     if (!(PDU[count]==checksum[1] && PDU[count-1]==checksum[0]))
  1484  0050  0832               	movf	processPDU@count,w
  1485  0051  3E66               	addlw	(low (_PDU| 0))& (0+255)
  1486  0052  0084               	movwf	4
  1487  0053  1383               	bcf	3,7	;select IRP bank0
  1488  0054  0800               	movf	0,w
  1489  0055  0663               	xorwf	_checksum+1,w
  1490  0056  1D03               	skipz
  1491  0057  2859               	goto	u114_21
  1492  0058  285A               	goto	u114_20
  1493  0059                     u114_21:
  1494  0059  2863               	goto	i1l1729
  1495  005A                     u114_20:
  1496  005A                     i1l1727:
  1497  005A  0832               	movf	processPDU@count,w
  1498  005B  3E65               	addlw	(low ((_PDU| 0+255)))& (0+255)
  1499  005C  0084               	movwf	4
  1500  005D  0800               	movf	0,w
  1501  005E  0662               	xorwf	_checksum,w
  1502  005F  1903               	skipnz
  1503  0060  2862               	goto	u115_21
  1504  0061  2863               	goto	u115_20
  1505  0062                     u115_21:
  1506  0062  2E95               	goto	i1l2145
  1507  0063                     u115_20:
  1508  0063                     i1l1729:
  1509                           
  1510                           ;newmain.c: 115:         return 3;
  1511  0063  3003               	movlw	3
  1512  0064  2EB2               	goto	i1l138
  1513  0065                     i1l1733:
  1514                           
  1515                           ;newmain.c: 121:         {;newmain.c: 122:             unsigned int reg = PDU[2]<<8 | PD
      +                          U[3];
  1516  0065  0869               	movf	_PDU+3,w
  1517  0066  00A0               	movwf	??_processPDU
  1518  0067  01A1               	clrf	??_processPDU+1
  1519  0068  0868               	movf	_PDU+2,w
  1520  0069  00A2               	movwf	??_processPDU+2
  1521  006A  01A3               	clrf	??_processPDU+3
  1522  006B  0822               	movf	??_processPDU+2,w
  1523  006C  00A3               	movwf	??_processPDU+3
  1524  006D  01A2               	clrf	??_processPDU+2
  1525  006E  0820               	movf	??_processPDU,w
  1526  006F  0422               	iorwf	??_processPDU+2,w
  1527  0070  00B3               	movwf	processPDU@reg
  1528  0071  0821               	movf	??_processPDU+1,w
  1529  0072  0423               	iorwf	??_processPDU+3,w
  1530  0073  00B4               	movwf	processPDU@reg+1
  1531  0074                     i1l1735:
  1532                           
  1533                           ;newmain.c: 123:             reg--;
  1534  0074  3001               	movlw	1
  1535  0075  02B3               	subwf	processPDU@reg,f
  1536  0076  3000               	movlw	0
  1537  0077  1C03               	skipc
  1538  0078  03B4               	decf	processPDU@reg+1,f
  1539  0079  02B4               	subwf	processPDU@reg+1,f
  1540  007A                     i1l1737:
  1541                           
  1542                           ;newmain.c: 125:             unsigned int coilcount = PDU[4]<<8 | PDU[5];
  1543  007A  086B               	movf	_PDU+5,w
  1544  007B  00A0               	movwf	??_processPDU
  1545  007C  01A1               	clrf	??_processPDU+1
  1546  007D  086A               	movf	_PDU+4,w
  1547  007E  00A2               	movwf	??_processPDU+2
  1548  007F  01A3               	clrf	??_processPDU+3
  1549  0080  0822               	movf	??_processPDU+2,w
  1550  0081  00A3               	movwf	??_processPDU+3
  1551  0082  01A2               	clrf	??_processPDU+2
  1552  0083  0820               	movf	??_processPDU,w
  1553  0084  0422               	iorwf	??_processPDU+2,w
  1554  0085  00D7               	movwf	processPDU@coilcount
  1555  0086  0821               	movf	??_processPDU+1,w
  1556  0087  0423               	iorwf	??_processPDU+3,w
  1557  0088  00D8               	movwf	processPDU@coilcount+1
  1558                           
  1559                           ;newmain.c: 128:             if (reg < 0 || reg > ((16 -1)-coilcount) )
  1560  0089  300F               	movlw	15
  1561  008A  00A0               	movwf	??_processPDU
  1562  008B  0857               	movf	processPDU@coilcount,w
  1563  008C  0220               	subwf	??_processPDU,w
  1564  008D  00A1               	movwf	??_processPDU+1
  1565  008E  0958               	comf	processPDU@coilcount+1,w
  1566  008F  1803               	skipnc
  1567  0090  3E01               	addlw	1
  1568  0091  00A2               	movwf	??_processPDU+2
  1569  0092  0834               	movf	processPDU@reg+1,w
  1570  0093  0222               	subwf	??_processPDU+2,w
  1571  0094  1D03               	skipz
  1572  0095  2898               	goto	u116_25
  1573  0096  0833               	movf	processPDU@reg,w
  1574  0097  0221               	subwf	??_processPDU+1,w
  1575  0098                     u116_25:
  1576  0098  1803               	skipnc
  1577  0099  289B               	goto	u116_21
  1578  009A  289C               	goto	u116_20
  1579  009B                     u116_21:
  1580  009B  28A8               	goto	i1l1745
  1581  009C                     u116_20:
  1582  009C                     i1l1739:
  1583                           
  1584                           ;newmain.c: 129:             {;newmain.c: 130:                 sendexception(PDU[1],0x02
      +                          );
  1585  009C  3002               	movlw	2
  1586  009D  00FF               	movwf	btemp+1
  1587  009E  087F               	movf	btemp+1,w
  1588  009F  00FC               	movwf	sendexception@errorcode
  1589  00A0  0867               	movf	_PDU+1,w
  1590  00A1  120A  158A  2686  120A  118A  	fcall	_sendexception
  1591  00A6                     i1l1741:
  1592                           
  1593                           ;newmain.c: 131:                 return -2;
  1594  00A6  30FE               	movlw	254
  1595  00A7  2EB2               	goto	i1l138
  1596  00A8                     i1l1745:
  1597                           
  1598                           ;newmain.c: 133:             if (coilcount > 16 || coilcount < 1)
  1599  00A8  3000               	movlw	0
  1600  00A9  0258               	subwf	processPDU@coilcount+1,w
  1601  00AA  3011               	movlw	17
  1602  00AB  1903               	skipnz
  1603  00AC  0257               	subwf	processPDU@coilcount,w
  1604  00AD  1803               	skipnc
  1605  00AE  28B0               	goto	u117_21
  1606  00AF  28B1               	goto	u117_20
  1607  00B0                     u117_21:
  1608  00B0  28B7               	goto	i1l1749
  1609  00B1                     u117_20:
  1610  00B1                     i1l1747:
  1611  00B1  0857               	movf	processPDU@coilcount,w
  1612  00B2  0458               	iorwf	processPDU@coilcount+1,w
  1613  00B3  1D03               	btfss	3,2
  1614  00B4  28B6               	goto	u118_21
  1615  00B5  28B7               	goto	u118_20
  1616  00B6                     u118_21:
  1617  00B6  28C3               	goto	i1l1755
  1618  00B7                     u118_20:
  1619  00B7                     i1l1749:
  1620                           
  1621                           ;newmain.c: 134:             {;newmain.c: 135:                 sendexception(PDU[1],0x03
      +                          );
  1622  00B7  3003               	movlw	3
  1623  00B8  00FF               	movwf	btemp+1
  1624  00B9  087F               	movf	btemp+1,w
  1625  00BA  00FC               	movwf	sendexception@errorcode
  1626  00BB  0867               	movf	_PDU+1,w
  1627  00BC  120A  158A  2686  120A  118A  	fcall	_sendexception
  1628  00C1                     i1l1751:
  1629                           
  1630                           ;newmain.c: 136:                 return -3;
  1631  00C1  30FD               	movlw	253
  1632  00C2  2EB2               	goto	i1l138
  1633  00C3                     i1l1755:
  1634                           
  1635                           ;newmain.c: 139:             for (int i=2; i<10; i++)
  1636  00C3  3002               	movlw	2
  1637  00C4  00B5               	movwf	processPDU@i
  1638  00C5  3000               	movlw	0
  1639  00C6  00B6               	movwf	processPDU@i+1
  1640  00C7                     i1l1757:
  1641  00C7  0836               	movf	processPDU@i+1,w
  1642  00C8  3A80               	xorlw	128
  1643  00C9  00FF               	movwf	btemp+1
  1644  00CA  3080               	movlw	128
  1645  00CB  027F               	subwf	btemp+1,w
  1646  00CC  1D03               	skipz
  1647  00CD  28D0               	goto	u119_25
  1648  00CE  300A               	movlw	10
  1649  00CF  0235               	subwf	processPDU@i,w
  1650  00D0                     u119_25:
  1651  00D0  1C03               	skipc
  1652  00D1  28D3               	goto	u119_21
  1653  00D2  28D4               	goto	u119_20
  1654  00D3                     u119_21:
  1655  00D3  28D5               	goto	i1l1761
  1656  00D4                     u119_20:
  1657  00D4  28E3               	goto	i1l1767
  1658  00D5                     i1l1761:
  1659                           
  1660                           ;newmain.c: 140:             {;newmain.c: 141:                 PDU[i]=0x00;
  1661  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  1662  00D6  1303               	bcf	3,6	;RP1=0, select bank0
  1663  00D7  0835               	movf	processPDU@i,w
  1664  00D8  3E66               	addlw	(low (_PDU| 0))& (0+255)
  1665  00D9  0084               	movwf	4
  1666  00DA  1383               	bcf	3,7	;select IRP bank0
  1667  00DB  0180               	clrf	0
  1668  00DC                     i1l1763:
  1669                           
  1670                           ;newmain.c: 142:             }
  1671  00DC  3001               	movlw	1
  1672  00DD  07B5               	addwf	processPDU@i,f
  1673  00DE  1803               	skipnc
  1674  00DF  0AB6               	incf	processPDU@i+1,f
  1675  00E0  3000               	movlw	0
  1676  00E1  07B6               	addwf	processPDU@i+1,f
  1677  00E2  28C7               	goto	i1l1757
  1678  00E3                     i1l1767:
  1679                           
  1680                           ;newmain.c: 144:             unsigned char coilbytescount = coilcount / 8;
  1681  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  1682  00E4  1303               	bcf	3,6	;RP1=0, select bank0
  1683  00E5  0858               	movf	processPDU@coilcount+1,w
  1684  00E6  00A1               	movwf	??_processPDU+1
  1685  00E7  0857               	movf	processPDU@coilcount,w
  1686  00E8  00A0               	movwf	??_processPDU
  1687  00E9  1003               	clrc
  1688  00EA  0CA1               	rrf	??_processPDU+1,f
  1689  00EB  0CA0               	rrf	??_processPDU,f
  1690  00EC  1003               	clrc
  1691  00ED  0CA1               	rrf	??_processPDU+1,f
  1692  00EE  0CA0               	rrf	??_processPDU,f
  1693  00EF  1003               	clrc
  1694  00F0  0CA1               	rrf	??_processPDU+1,f
  1695  00F1  0CA0               	rrf	??_processPDU,f
  1696  00F2  0820               	movf	??_processPDU,w
  1697  00F3  00FF               	movwf	btemp+1
  1698  00F4  087F               	movf	btemp+1,w
  1699  00F5  00D3               	movwf	processPDU@coilbytescount
  1700  00F6                     i1l1769:
  1701                           
  1702                           ;newmain.c: 145:             unsigned char coilsleft = coilcount % 8;
  1703  00F6  0857               	movf	processPDU@coilcount,w
  1704  00F7  3907               	andlw	7
  1705  00F8  00FF               	movwf	btemp+1
  1706  00F9  087F               	movf	btemp+1,w
  1707  00FA  00B0               	movwf	processPDU@coilsleft
  1708  00FB                     i1l1771:
  1709                           
  1710                           ;newmain.c: 147:             if (coilcount%8)
  1711  00FB  3007               	movlw	7
  1712  00FC  0557               	andwf	processPDU@coilcount,w
  1713  00FD  00A0               	movwf	??_processPDU
  1714  00FE  3000               	movlw	0
  1715  00FF  0558               	andwf	processPDU@coilcount+1,w
  1716  0100  00A1               	movwf	??_processPDU+1
  1717  0101  0820               	movf	??_processPDU,w
  1718  0102  0421               	iorwf	??_processPDU+1,w
  1719  0103  1903               	btfsc	3,2
  1720  0104  2906               	goto	u120_21
  1721  0105  2907               	goto	u120_20
  1722  0106                     u120_21:
  1723  0106  2911               	goto	i1l1775
  1724  0107                     u120_20:
  1725  0107                     i1l1773:
  1726                           
  1727                           ;newmain.c: 148:                 PDU[index]=coilbytescount+1;
  1728  0107  0853               	movf	processPDU@coilbytescount,w
  1729  0108  3E01               	addlw	1
  1730  0109  00FF               	movwf	btemp+1
  1731  010A  085B               	movf	processPDU@index,w
  1732  010B  3E66               	addlw	(low (_PDU| 0))& (0+255)
  1733  010C  0084               	movwf	4
  1734  010D  087F               	movf	btemp+1,w
  1735  010E  1383               	bcf	3,7	;select IRP bank0
  1736  010F  0080               	movwf	0
  1737  0110  2919               	goto	i1l1777
  1738  0111                     i1l1775:
  1739                           
  1740                           ;newmain.c: 150:                 PDU[index]=coilbytescount;
  1741  0111  0853               	movf	processPDU@coilbytescount,w
  1742  0112  00FF               	movwf	btemp+1
  1743  0113  085B               	movf	processPDU@index,w
  1744  0114  3E66               	addlw	(low (_PDU| 0))& (0+255)
  1745  0115  0084               	movwf	4
  1746  0116  087F               	movf	btemp+1,w
  1747  0117  1383               	bcf	3,7	;select IRP bank0
  1748  0118  0080               	movwf	0
  1749  0119                     i1l1777:
  1750                           
  1751                           ;newmain.c: 151:             index++;
  1752  0119  3001               	movlw	1
  1753  011A  00FF               	movwf	btemp+1
  1754  011B  087F               	movf	btemp+1,w
  1755  011C  07DB               	addwf	processPDU@index,f
  1756  011D                     i1l1779:
  1757                           
  1758                           ;newmain.c: 154:             unsigned char buff ;;newmain.c: 156:             for (int i
      +                          =0 ; i < coilbytescount ; i++)
  1759  011D  01A6               	clrf	processPDU@i_239
  1760  011E  01A7               	clrf	processPDU@i_239+1
  1761  011F  2974               	goto	i1l1803
  1762  0120                     i1l1781:
  1763                           
  1764                           ;newmain.c: 157:             {;newmain.c: 158:                 buff = 0x00;
  1765  0120  1283               	bcf	3,5	;RP0=0, select bank0
  1766  0121  1303               	bcf	3,6	;RP1=0, select bank0
  1767  0122  01D5               	clrf	processPDU@buff
  1768                           
  1769                           ;newmain.c: 159:                 for (int j=0 ; j<8 ; j++ )
  1770  0123  01B7               	clrf	processPDU@j
  1771  0124  01B8               	clrf	processPDU@j+1
  1772  0125                     i1l1783:
  1773  0125  0838               	movf	processPDU@j+1,w
  1774  0126  3A80               	xorlw	128
  1775  0127  00FF               	movwf	btemp+1
  1776  0128  3080               	movlw	128
  1777  0129  027F               	subwf	btemp+1,w
  1778  012A  1D03               	skipz
  1779  012B  292E               	goto	u121_25
  1780  012C  3008               	movlw	8
  1781  012D  0237               	subwf	processPDU@j,w
  1782  012E                     u121_25:
  1783  012E  1C03               	skipc
  1784  012F  2931               	goto	u121_21
  1785  0130  2932               	goto	u121_20
  1786  0131                     u121_21:
  1787  0131  2933               	goto	i1l1787
  1788  0132                     u121_20:
  1789  0132  2960               	goto	i1l1797
  1790  0133                     i1l1787:
  1791                           
  1792                           ;newmain.c: 160:                 {;newmain.c: 161:                     buff = buff>>1;
  1793  0133  1283               	bcf	3,5	;RP0=0, select bank0
  1794  0134  1303               	bcf	3,6	;RP1=0, select bank0
  1795  0135  0855               	movf	processPDU@buff,w
  1796  0136  00A0               	movwf	??_processPDU
  1797  0137  1003               	clrc
  1798  0138  0C20               	rrf	??_processPDU,w
  1799  0139  00FF               	movwf	btemp+1
  1800  013A  087F               	movf	btemp+1,w
  1801  013B  00D5               	movwf	processPDU@buff
  1802  013C                     i1l1789:
  1803                           
  1804                           ;newmain.c: 162:                   if (Coils[reg+(i*8)+j])
  1805  013C  0826               	movf	processPDU@i_239,w
  1806  013D  00A0               	movwf	??_processPDU
  1807  013E  3003               	movlw	3
  1808  013F                     u122_25:
  1809  013F  1003               	clrc
  1810  0140  0DA0               	rlf	??_processPDU,f
  1811  0141  3EFF               	addlw	-1
  1812  0142  1D03               	skipz
  1813  0143  293F               	goto	u122_25
  1814  0144  30A0               	movlw	(low (_Coils| 0))& (0+255)
  1815  0145  0720               	addwf	??_processPDU,w
  1816  0146  00A1               	movwf	??_processPDU+1
  1817  0147  0837               	movf	processPDU@j,w
  1818  0148  0721               	addwf	??_processPDU+1,w
  1819  0149  00A2               	movwf	??_processPDU+2
  1820  014A  0833               	movf	processPDU@reg,w
  1821  014B  0722               	addwf	??_processPDU+2,w
  1822  014C  00A3               	movwf	??_processPDU+3
  1823  014D  0823               	movf	??_processPDU+3,w
  1824  014E  0084               	movwf	4
  1825  014F  1383               	bcf	3,7	;select IRP bank1
  1826  0150  0800               	movf	0,w
  1827  0151  1903               	btfsc	3,2
  1828  0152  2954               	goto	u123_21
  1829  0153  2955               	goto	u123_20
  1830  0154                     u123_21:
  1831  0154  2959               	goto	i1l1793
  1832  0155                     u123_20:
  1833  0155                     i1l1791:
  1834                           
  1835                           ;newmain.c: 163:                       buff |= 0xA0;
  1836  0155  30A0               	movlw	160
  1837  0156  00FF               	movwf	btemp+1
  1838  0157  087F               	movf	btemp+1,w
  1839  0158  04D5               	iorwf	processPDU@buff,f
  1840  0159                     i1l1793:
  1841                           
  1842                           ;newmain.c: 164:                 }
  1843  0159  3001               	movlw	1
  1844  015A  07B7               	addwf	processPDU@j,f
  1845  015B  1803               	skipnc
  1846  015C  0AB8               	incf	processPDU@j+1,f
  1847  015D  3000               	movlw	0
  1848  015E  07B8               	addwf	processPDU@j+1,f
  1849  015F  2925               	goto	i1l1783
  1850  0160                     i1l1797:
  1851                           
  1852                           ;newmain.c: 165:                 PDU[index++]=buff;
  1853  0160  1283               	bcf	3,5	;RP0=0, select bank0
  1854  0161  1303               	bcf	3,6	;RP1=0, select bank0
  1855  0162  0855               	movf	processPDU@buff,w
  1856  0163  00FF               	movwf	btemp+1
  1857  0164  085B               	movf	processPDU@index,w
  1858  0165  3E66               	addlw	(low (_PDU| 0))& (0+255)
  1859  0166  0084               	movwf	4
  1860  0167  087F               	movf	btemp+1,w
  1861  0168  1383               	bcf	3,7	;select IRP bank0
  1862  0169  0080               	movwf	0
  1863  016A                     i1l1799:
  1864  016A  3001               	movlw	1
  1865  016B  00FF               	movwf	btemp+1
  1866  016C  087F               	movf	btemp+1,w
  1867  016D  07DB               	addwf	processPDU@index,f
  1868  016E                     i1l1801:
  1869                           
  1870                           ;newmain.c: 166:             }
  1871  016E  3001               	movlw	1
  1872  016F  07A6               	addwf	processPDU@i_239,f
  1873  0170  1803               	skipnc
  1874  0171  0AA7               	incf	processPDU@i_239+1,f
  1875  0172  3000               	movlw	0
  1876  0173  07A7               	addwf	processPDU@i_239+1,f
  1877  0174                     i1l1803:
  1878  0174  0827               	movf	processPDU@i_239+1,w
  1879  0175  3A80               	xorlw	128
  1880  0176  00A0               	movwf	??_processPDU
  1881  0177  3080               	movlw	128
  1882  0178  0220               	subwf	??_processPDU,w
  1883  0179  1D03               	skipz
  1884  017A  297D               	goto	u124_25
  1885  017B  0853               	movf	processPDU@coilbytescount,w
  1886  017C  0226               	subwf	processPDU@i_239,w
  1887  017D                     u124_25:
  1888  017D  1C03               	skipc
  1889  017E  2980               	goto	u124_21
  1890  017F  2981               	goto	u124_20
  1891  0180                     u124_21:
  1892  0180  2920               	goto	i1l1781
  1893  0181                     u124_20:
  1894  0181                     i1l1805:
  1895                           
  1896                           ;newmain.c: 168:             if(coilsleft)
  1897  0181  1283               	bcf	3,5	;RP0=0, select bank0
  1898  0182  1303               	bcf	3,6	;RP1=0, select bank0
  1899  0183  0830               	movf	processPDU@coilsleft,w
  1900  0184  1903               	btfsc	3,2
  1901  0185  2987               	goto	u125_21
  1902  0186  2988               	goto	u125_20
  1903  0187                     u125_21:
  1904  0187  29D3               	goto	i1l1825
  1905  0188                     u125_20:
  1906  0188                     i1l1807:
  1907                           
  1908                           ;newmain.c: 169:             {;newmain.c: 170:                 for(int i=0;i<coilsleft;i
      +                          ++)
  1909  0188  01A8               	clrf	processPDU@i_241
  1910  0189  01A9               	clrf	processPDU@i_241+1
  1911  018A  29B8               	goto	i1l1819
  1912  018B                     i1l1809:
  1913                           
  1914                           ;newmain.c: 171:                 {;newmain.c: 172:                     buff = 0x00;
  1915  018B  1283               	bcf	3,5	;RP0=0, select bank0
  1916  018C  1303               	bcf	3,6	;RP1=0, select bank0
  1917  018D  01D5               	clrf	processPDU@buff
  1918  018E                     i1l1811:
  1919                           
  1920                           ;newmain.c: 173:                     buff=buff>>1;
  1921  018E  0855               	movf	processPDU@buff,w
  1922  018F  00A0               	movwf	??_processPDU
  1923  0190  1003               	clrc
  1924  0191  0C20               	rrf	??_processPDU,w
  1925  0192  00FF               	movwf	btemp+1
  1926  0193  087F               	movf	btemp+1,w
  1927  0194  00D5               	movwf	processPDU@buff
  1928  0195                     i1l1813:
  1929                           
  1930                           ;newmain.c: 174:                     if(Coils[reg+(coilbytescount*8)+i])
  1931  0195  0853               	movf	processPDU@coilbytescount,w
  1932  0196  00A0               	movwf	??_processPDU
  1933  0197  3003               	movlw	3
  1934  0198                     u126_25:
  1935  0198  1003               	clrc
  1936  0199  0DA0               	rlf	??_processPDU,f
  1937  019A  3EFF               	addlw	-1
  1938  019B  1D03               	skipz
  1939  019C  2998               	goto	u126_25
  1940  019D  30A0               	movlw	(low (_Coils| 0))& (0+255)
  1941  019E  0720               	addwf	??_processPDU,w
  1942  019F  00A1               	movwf	??_processPDU+1
  1943  01A0  0828               	movf	processPDU@i_241,w
  1944  01A1  0721               	addwf	??_processPDU+1,w
  1945  01A2  00A2               	movwf	??_processPDU+2
  1946  01A3  0833               	movf	processPDU@reg,w
  1947  01A4  0722               	addwf	??_processPDU+2,w
  1948  01A5  00A3               	movwf	??_processPDU+3
  1949  01A6  0823               	movf	??_processPDU+3,w
  1950  01A7  0084               	movwf	4
  1951  01A8  1383               	bcf	3,7	;select IRP bank1
  1952  01A9  0800               	movf	0,w
  1953  01AA  1903               	btfsc	3,2
  1954  01AB  29AD               	goto	u127_21
  1955  01AC  29AE               	goto	u127_20
  1956  01AD                     u127_21:
  1957  01AD  29B2               	goto	i1l1817
  1958  01AE                     u127_20:
  1959  01AE                     i1l1815:
  1960                           
  1961                           ;newmain.c: 175:                         buff|=0xA0;
  1962  01AE  30A0               	movlw	160
  1963  01AF  00FF               	movwf	btemp+1
  1964  01B0  087F               	movf	btemp+1,w
  1965  01B1  04D5               	iorwf	processPDU@buff,f
  1966  01B2                     i1l1817:
  1967                           
  1968                           ;newmain.c: 176:                 }
  1969  01B2  3001               	movlw	1
  1970  01B3  07A8               	addwf	processPDU@i_241,f
  1971  01B4  1803               	skipnc
  1972  01B5  0AA9               	incf	processPDU@i_241+1,f
  1973  01B6  3000               	movlw	0
  1974  01B7  07A9               	addwf	processPDU@i_241+1,f
  1975  01B8                     i1l1819:
  1976  01B8  0829               	movf	processPDU@i_241+1,w
  1977  01B9  3A80               	xorlw	128
  1978  01BA  00A0               	movwf	??_processPDU
  1979  01BB  3080               	movlw	128
  1980  01BC  0220               	subwf	??_processPDU,w
  1981  01BD  1D03               	skipz
  1982  01BE  29C1               	goto	u128_25
  1983  01BF  0830               	movf	processPDU@coilsleft,w
  1984  01C0  0228               	subwf	processPDU@i_241,w
  1985  01C1                     u128_25:
  1986  01C1  1C03               	skipc
  1987  01C2  29C4               	goto	u128_21
  1988  01C3  29C5               	goto	u128_20
  1989  01C4                     u128_21:
  1990  01C4  298B               	goto	i1l1809
  1991  01C5                     u128_20:
  1992  01C5                     i1l1821:
  1993                           
  1994                           ;newmain.c: 177:             PDU[index++]=buff;
  1995  01C5  1283               	bcf	3,5	;RP0=0, select bank0
  1996  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  1997  01C7  0855               	movf	processPDU@buff,w
  1998  01C8  00FF               	movwf	btemp+1
  1999  01C9  085B               	movf	processPDU@index,w
  2000  01CA  3E66               	addlw	(low (_PDU| 0))& (0+255)
  2001  01CB  0084               	movwf	4
  2002  01CC  087F               	movf	btemp+1,w
  2003  01CD  1383               	bcf	3,7	;select IRP bank0
  2004  01CE  0080               	movwf	0
  2005  01CF                     i1l1823:
  2006  01CF  3001               	movlw	1
  2007  01D0  00FF               	movwf	btemp+1
  2008  01D1  087F               	movf	btemp+1,w
  2009  01D2  07DB               	addwf	processPDU@index,f
  2010  01D3                     i1l1825:
  2011                           
  2012                           ;newmain.c: 180:             CRC=CRC16 (PDU,index);
  2013  01D3  085B               	movf	processPDU@index,w
  2014  01D4  00FF               	movwf	btemp+1
  2015  01D5  087F               	movf	btemp+1,w
  2016  01D6  00F0               	movwf	CRC16@count
  2017  01D7  3066               	movlw	(low (_PDU| 0))& (0+255)
  2018  01D8  120A  118A  278C  120A  118A  	fcall	_CRC16
  2019  01DD  0871               	movf	?_CRC16+1,w
  2020  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  2021  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  2022  01E0  00E1               	movwf	_CRC+1
  2023  01E1  0870               	movf	?_CRC16,w
  2024  01E2  00E0               	movwf	_CRC
  2025  01E3                     i1l1827:
  2026                           
  2027                           ;newmain.c: 181:             PDU[index++] = (unsigned char) (CRC & 0xFF);
  2028  01E3  0860               	movf	_CRC,w
  2029  01E4  00FF               	movwf	btemp+1
  2030  01E5  085B               	movf	processPDU@index,w
  2031  01E6  3E66               	addlw	(low (_PDU| 0))& (0+255)
  2032  01E7  0084               	movwf	4
  2033  01E8  087F               	movf	btemp+1,w
  2034  01E9  1383               	bcf	3,7	;select IRP bank0
  2035  01EA  0080               	movwf	0
  2036  01EB                     i1l1829:
  2037  01EB  3001               	movlw	1
  2038  01EC  00FF               	movwf	btemp+1
  2039  01ED  087F               	movf	btemp+1,w
  2040  01EE  07DB               	addwf	processPDU@index,f
  2041  01EF                     i1l1831:
  2042                           
  2043                           ;newmain.c: 182:             PDU[index++] = (unsigned char) ((CRC>>8)&0xFF);
  2044  01EF  0861               	movf	_CRC+1,w
  2045  01F0  00FF               	movwf	btemp+1
  2046  01F1  085B               	movf	processPDU@index,w
  2047  01F2  3E66               	addlw	(low (_PDU| 0))& (0+255)
  2048  01F3  0084               	movwf	4
  2049  01F4  087F               	movf	btemp+1,w
  2050  01F5  0080               	movwf	0
  2051  01F6                     i1l1833:
  2052  01F6  3001               	movlw	1
  2053  01F7  00FF               	movwf	btemp+1
  2054  01F8  087F               	movf	btemp+1,w
  2055  01F9  07DB               	addwf	processPDU@index,f
  2056  01FA                     i1l1835:
  2057                           
  2058                           ;newmain.c: 184:             writePDU(index);
  2059  01FA  085B               	movf	processPDU@index,w
  2060  01FB  120A  158A  2664  120A  118A  	fcall	_writePDU
  2061                           
  2062                           ;newmain.c: 185:         };newmain.c: 186:         break;
  2063  0200  2EB1               	goto	i1l2147
  2064  0201                     i1l1837:
  2065                           
  2066                           ;newmain.c: 189:         {;newmain.c: 190:             unsigned int reg = PDU[2]<<8 | PD
      +                          U[3];
  2067  0201  0869               	movf	_PDU+3,w
  2068  0202  00A0               	movwf	??_processPDU
  2069  0203  01A1               	clrf	??_processPDU+1
  2070  0204  0868               	movf	_PDU+2,w
  2071  0205  00A2               	movwf	??_processPDU+2
  2072  0206  01A3               	clrf	??_processPDU+3
  2073  0207  0822               	movf	??_processPDU+2,w
  2074  0208  00A3               	movwf	??_processPDU+3
  2075  0209  01A2               	clrf	??_processPDU+2
  2076  020A  0820               	movf	??_processPDU,w
  2077  020B  0422               	iorwf	??_processPDU+2,w
  2078  020C  00B9               	movwf	processPDU@reg_242
  2079  020D  0821               	movf	??_processPDU+1,w
  2080  020E  0423               	iorwf	??_processPDU+3,w
  2081  020F  00BA               	movwf	processPDU@reg_242+1
  2082  0210                     i1l1839:
  2083                           
  2084                           ;newmain.c: 191:             reg--;
  2085  0210  3001               	movlw	1
  2086  0211  02B9               	subwf	processPDU@reg_242,f
  2087  0212  3000               	movlw	0
  2088  0213  1C03               	skipc
  2089  0214  03BA               	decf	processPDU@reg_242+1,f
  2090  0215  02BA               	subwf	processPDU@reg_242+1,f
  2091  0216                     i1l1841:
  2092                           
  2093                           ;newmain.c: 193:             unsigned int coilcount = PDU[4]<<8 | PDU[5];
  2094  0216  086B               	movf	_PDU+5,w
  2095  0217  00A0               	movwf	??_processPDU
  2096  0218  01A1               	clrf	??_processPDU+1
  2097  0219  086A               	movf	_PDU+4,w
  2098  021A  00A2               	movwf	??_processPDU+2
  2099  021B  01A3               	clrf	??_processPDU+3
  2100  021C  0822               	movf	??_processPDU+2,w
  2101  021D  00A3               	movwf	??_processPDU+3
  2102  021E  01A2               	clrf	??_processPDU+2
  2103  021F  0820               	movf	??_processPDU,w
  2104  0220  0422               	iorwf	??_processPDU+2,w
  2105  0221  00D9               	movwf	processPDU@coilcount_243
  2106  0222  0821               	movf	??_processPDU+1,w
  2107  0223  0423               	iorwf	??_processPDU+3,w
  2108  0224  00DA               	movwf	processPDU@coilcount_243+1
  2109                           
  2110                           ;newmain.c: 196:             if (reg < 0 || reg > ((16 -1)-coilcount) )
  2111  0225  300F               	movlw	15
  2112  0226  00A0               	movwf	??_processPDU
  2113  0227  0859               	movf	processPDU@coilcount_243,w
  2114  0228  0220               	subwf	??_processPDU,w
  2115  0229  00A1               	movwf	??_processPDU+1
  2116  022A  095A               	comf	processPDU@coilcount_243+1,w
  2117  022B  1803               	skipnc
  2118  022C  3E01               	addlw	1
  2119  022D  00A2               	movwf	??_processPDU+2
  2120  022E  083A               	movf	processPDU@reg_242+1,w
  2121  022F  0222               	subwf	??_processPDU+2,w
  2122  0230  1D03               	skipz
  2123  0231  2A34               	goto	u129_25
  2124  0232  0839               	movf	processPDU@reg_242,w
  2125  0233  0221               	subwf	??_processPDU+1,w
  2126  0234                     u129_25:
  2127  0234  1803               	skipnc
  2128  0235  2A37               	goto	u129_21
  2129  0236  2A38               	goto	u129_20
  2130  0237                     u129_21:
  2131  0237  2A43               	goto	i1l1849
  2132  0238                     u129_20:
  2133  0238                     i1l1843:
  2134                           
  2135                           ;newmain.c: 197:             {;newmain.c: 198:                 sendexception(PDU[1],0x02
      +                          );
  2136  0238  3002               	movlw	2
  2137  0239  00FF               	movwf	btemp+1
  2138  023A  087F               	movf	btemp+1,w
  2139  023B  00FC               	movwf	sendexception@errorcode
  2140  023C  0867               	movf	_PDU+1,w
  2141  023D  120A  158A  2686  120A  118A  	fcall	_sendexception
  2142  0242  28A6               	goto	i1l1741
  2143  0243                     i1l1849:
  2144                           
  2145                           ;newmain.c: 201:             if (coilcount > 16 || coilcount < 1)
  2146  0243  3000               	movlw	0
  2147  0244  025A               	subwf	processPDU@coilcount_243+1,w
  2148  0245  3011               	movlw	17
  2149  0246  1903               	skipnz
  2150  0247  0259               	subwf	processPDU@coilcount_243,w
  2151  0248  1803               	skipnc
  2152  0249  2A4B               	goto	u130_21
  2153  024A  2A4C               	goto	u130_20
  2154  024B                     u130_21:
  2155  024B  2A52               	goto	i1l1853
  2156  024C                     u130_20:
  2157  024C                     i1l1851:
  2158  024C  0859               	movf	processPDU@coilcount_243,w
  2159  024D  045A               	iorwf	processPDU@coilcount_243+1,w
  2160  024E  1D03               	btfss	3,2
  2161  024F  2A51               	goto	u131_21
  2162  0250  2A52               	goto	u131_20
  2163  0251                     u131_21:
  2164  0251  2A5D               	goto	i1l1859
  2165  0252                     u131_20:
  2166  0252                     i1l1853:
  2167                           
  2168                           ;newmain.c: 202:             {;newmain.c: 203:                 sendexception(PDU[1],0x03
      +                          );
  2169  0252  3003               	movlw	3
  2170  0253  00FF               	movwf	btemp+1
  2171  0254  087F               	movf	btemp+1,w
  2172  0255  00FC               	movwf	sendexception@errorcode
  2173  0256  0867               	movf	_PDU+1,w
  2174  0257  120A  158A  2686  120A  118A  	fcall	_sendexception
  2175  025C  28C1               	goto	i1l1751
  2176  025D                     i1l1859:
  2177                           
  2178                           ;newmain.c: 206:             for (int i=2; i<10; i++)
  2179  025D  3002               	movlw	2
  2180  025E  00BB               	movwf	processPDU@i_244
  2181  025F  3000               	movlw	0
  2182  0260  00BC               	movwf	processPDU@i_244+1
  2183  0261                     i1l1861:
  2184  0261  083C               	movf	processPDU@i_244+1,w
  2185  0262  3A80               	xorlw	128
  2186  0263  00FF               	movwf	btemp+1
  2187  0264  3080               	movlw	128
  2188  0265  027F               	subwf	btemp+1,w
  2189  0266  1D03               	skipz
  2190  0267  2A6A               	goto	u132_25
  2191  0268  300A               	movlw	10
  2192  0269  023B               	subwf	processPDU@i_244,w
  2193  026A                     u132_25:
  2194  026A  1C03               	skipc
  2195  026B  2A6D               	goto	u132_21
  2196  026C  2A6E               	goto	u132_20
  2197  026D                     u132_21:
  2198  026D  2A6F               	goto	i1l1865
  2199  026E                     u132_20:
  2200  026E  2A7D               	goto	i1l1871
  2201  026F                     i1l1865:
  2202                           
  2203                           ;newmain.c: 207:             {;newmain.c: 208:                 PDU[i]=0x00;
  2204  026F  1283               	bcf	3,5	;RP0=0, select bank0
  2205  0270  1303               	bcf	3,6	;RP1=0, select bank0
  2206  0271  083B               	movf	processPDU@i_244,w
  2207  0272  3E66               	addlw	(low (_PDU| 0))& (0+255)
  2208  0273  0084               	movwf	4
  2209  0274  1383               	bcf	3,7	;select IRP bank0
  2210  0275  0180               	clrf	0
  2211  0276                     i1l1867:
  2212                           
  2213                           ;newmain.c: 209:             }
  2214  0276  3001               	movlw	1
  2215  0277  07BB               	addwf	processPDU@i_244,f
  2216  0278  1803               	skipnc
  2217  0279  0ABC               	incf	processPDU@i_244+1,f
  2218  027A  3000               	movlw	0
  2219  027B  07BC               	addwf	processPDU@i_244+1,f
  2220  027C  2A61               	goto	i1l1861
  2221  027D                     i1l1871:
  2222                           
  2223                           ;newmain.c: 211:             unsigned char coilbytescount = coilcount / 8;
  2224  027D  1283               	bcf	3,5	;RP0=0, select bank0
  2225  027E  1303               	bcf	3,6	;RP1=0, select bank0
  2226  027F  085A               	movf	processPDU@coilcount_243+1,w
  2227  0280  00A1               	movwf	??_processPDU+1
  2228  0281  0859               	movf	processPDU@coilcount_243,w
  2229  0282  00A0               	movwf	??_processPDU
  2230  0283  1003               	clrc
  2231  0284  0CA1               	rrf	??_processPDU+1,f
  2232  0285  0CA0               	rrf	??_processPDU,f
  2233  0286  1003               	clrc
  2234  0287  0CA1               	rrf	??_processPDU+1,f
  2235  0288  0CA0               	rrf	??_processPDU,f
  2236  0289  1003               	clrc
  2237  028A  0CA1               	rrf	??_processPDU+1,f
  2238  028B  0CA0               	rrf	??_processPDU,f
  2239  028C  0820               	movf	??_processPDU,w
  2240  028D  00FF               	movwf	btemp+1
  2241  028E  087F               	movf	btemp+1,w
  2242  028F  00D4               	movwf	processPDU@coilbytescount_245
  2243  0290                     i1l1873:
  2244                           
  2245                           ;newmain.c: 212:             unsigned char coilsleft = coilcount % 8;
  2246  0290  0859               	movf	processPDU@coilcount_243,w
  2247  0291  3907               	andlw	7
  2248  0292  00FF               	movwf	btemp+1
  2249  0293  087F               	movf	btemp+1,w
  2250  0294  00B1               	movwf	processPDU@coilsleft_246
  2251  0295                     i1l1875:
  2252                           
  2253                           ;newmain.c: 214:             if (coilcount%8)
  2254  0295  3007               	movlw	7
  2255  0296  0559               	andwf	processPDU@coilcount_243,w
  2256  0297  00A0               	movwf	??_processPDU
  2257  0298  3000               	movlw	0
  2258  0299  055A               	andwf	processPDU@coilcount_243+1,w
  2259  029A  00A1               	movwf	??_processPDU+1
  2260  029B  0820               	movf	??_processPDU,w
  2261  029C  0421               	iorwf	??_processPDU+1,w
  2262  029D  1903               	btfsc	3,2
  2263  029E  2AA0               	goto	u133_21
  2264  029F  2AA1               	goto	u133_20
  2265  02A0                     u133_21:
  2266  02A0  2AAB               	goto	i1l1879
  2267  02A1                     u133_20:
  2268  02A1                     i1l1877:
  2269                           
  2270                           ;newmain.c: 215:                 PDU[index]=coilbytescount+1;
  2271  02A1  0854               	movf	processPDU@coilbytescount_245,w
  2272  02A2  3E01               	addlw	1
  2273  02A3  00FF               	movwf	btemp+1
  2274  02A4  085B               	movf	processPDU@index,w
  2275  02A5  3E66               	addlw	(low (_PDU| 0))& (0+255)
  2276  02A6  0084               	movwf	4
  2277  02A7  087F               	movf	btemp+1,w
  2278  02A8  1383               	bcf	3,7	;select IRP bank0
  2279  02A9  0080               	movwf	0
  2280  02AA  2AB3               	goto	i1l1881
  2281  02AB                     i1l1879:
  2282                           
  2283                           ;newmain.c: 217:                 PDU[index]=coilbytescount;
  2284  02AB  0854               	movf	processPDU@coilbytescount_245,w
  2285  02AC  00FF               	movwf	btemp+1
  2286  02AD  085B               	movf	processPDU@index,w
  2287  02AE  3E66               	addlw	(low (_PDU| 0))& (0+255)
  2288  02AF  0084               	movwf	4
  2289  02B0  087F               	movf	btemp+1,w
  2290  02B1  1383               	bcf	3,7	;select IRP bank0
  2291  02B2  0080               	movwf	0
  2292  02B3                     i1l1881:
  2293                           
  2294                           ;newmain.c: 218:             index++;
  2295  02B3  3001               	movlw	1
  2296  02B4  00FF               	movwf	btemp+1
  2297  02B5  087F               	movf	btemp+1,w
  2298  02B6  07DB               	addwf	processPDU@index,f
  2299  02B7                     i1l1883:
  2300                           
  2301                           ;newmain.c: 221:             unsigned char buff ;;newmain.c: 223:             for (int i
      +                          =0 ; i < coilbytescount ; i++)
  2302  02B7  01AA               	clrf	processPDU@i_248
  2303  02B8  01AB               	clrf	processPDU@i_248+1
  2304  02B9  2B0E               	goto	i1l1907
  2305  02BA                     i1l1885:
  2306                           
  2307                           ;newmain.c: 224:             {;newmain.c: 225:                 buff = 0x00;
  2308  02BA  1283               	bcf	3,5	;RP0=0, select bank0
  2309  02BB  1303               	bcf	3,6	;RP1=0, select bank0
  2310  02BC  01D6               	clrf	processPDU@buff_247
  2311                           
  2312                           ;newmain.c: 226:                 for (int j=0 ; j<8 ; j++ )
  2313  02BD  01BD               	clrf	processPDU@j_249
  2314  02BE  01BE               	clrf	processPDU@j_249+1
  2315  02BF                     i1l1887:
  2316  02BF  083E               	movf	processPDU@j_249+1,w
  2317  02C0  3A80               	xorlw	128
  2318  02C1  00FF               	movwf	btemp+1
  2319  02C2  3080               	movlw	128
  2320  02C3  027F               	subwf	btemp+1,w
  2321  02C4  1D03               	skipz
  2322  02C5  2AC8               	goto	u134_25
  2323  02C6  3008               	movlw	8
  2324  02C7  023D               	subwf	processPDU@j_249,w
  2325  02C8                     u134_25:
  2326  02C8  1C03               	skipc
  2327  02C9  2ACB               	goto	u134_21
  2328  02CA  2ACC               	goto	u134_20
  2329  02CB                     u134_21:
  2330  02CB  2ACD               	goto	i1l1891
  2331  02CC                     u134_20:
  2332  02CC  2AFA               	goto	i1l1901
  2333  02CD                     i1l1891:
  2334                           
  2335                           ;newmain.c: 227:                 {;newmain.c: 228:                     buff = buff>>1;
  2336  02CD  1283               	bcf	3,5	;RP0=0, select bank0
  2337  02CE  1303               	bcf	3,6	;RP1=0, select bank0
  2338  02CF  0856               	movf	processPDU@buff_247,w
  2339  02D0  00A0               	movwf	??_processPDU
  2340  02D1  1003               	clrc
  2341  02D2  0C20               	rrf	??_processPDU,w
  2342  02D3  00FF               	movwf	btemp+1
  2343  02D4  087F               	movf	btemp+1,w
  2344  02D5  00D6               	movwf	processPDU@buff_247
  2345  02D6                     i1l1893:
  2346                           
  2347                           ;newmain.c: 229:                   if (DiscreteInputs[reg+(i*8)+j])
  2348  02D6  082A               	movf	processPDU@i_248,w
  2349  02D7  00A0               	movwf	??_processPDU
  2350  02D8  3003               	movlw	3
  2351  02D9                     u135_25:
  2352  02D9  1003               	clrc
  2353  02DA  0DA0               	rlf	??_processPDU,f
  2354  02DB  3EFF               	addlw	-1
  2355  02DC  1D03               	skipz
  2356  02DD  2AD9               	goto	u135_25
  2357  02DE  30B0               	movlw	(low (_DiscreteInputs| 0))& (0+255)
  2358  02DF  0720               	addwf	??_processPDU,w
  2359  02E0  00A1               	movwf	??_processPDU+1
  2360  02E1  083D               	movf	processPDU@j_249,w
  2361  02E2  0721               	addwf	??_processPDU+1,w
  2362  02E3  00A2               	movwf	??_processPDU+2
  2363  02E4  0839               	movf	processPDU@reg_242,w
  2364  02E5  0722               	addwf	??_processPDU+2,w
  2365  02E6  00A3               	movwf	??_processPDU+3
  2366  02E7  0823               	movf	??_processPDU+3,w
  2367  02E8  0084               	movwf	4
  2368  02E9  1383               	bcf	3,7	;select IRP bank1
  2369  02EA  0800               	movf	0,w
  2370  02EB  1903               	btfsc	3,2
  2371  02EC  2AEE               	goto	u136_21
  2372  02ED  2AEF               	goto	u136_20
  2373  02EE                     u136_21:
  2374  02EE  2AF3               	goto	i1l1897
  2375  02EF                     u136_20:
  2376  02EF                     i1l1895:
  2377                           
  2378                           ;newmain.c: 230:                       buff |= 0xA0;
  2379  02EF  30A0               	movlw	160
  2380  02F0  00FF               	movwf	btemp+1
  2381  02F1  087F               	movf	btemp+1,w
  2382  02F2  04D6               	iorwf	processPDU@buff_247,f
  2383  02F3                     i1l1897:
  2384                           
  2385                           ;newmain.c: 231:                 }
  2386  02F3  3001               	movlw	1
  2387  02F4  07BD               	addwf	processPDU@j_249,f
  2388  02F5  1803               	skipnc
  2389  02F6  0ABE               	incf	processPDU@j_249+1,f
  2390  02F7  3000               	movlw	0
  2391  02F8  07BE               	addwf	processPDU@j_249+1,f
  2392  02F9  2ABF               	goto	i1l1887
  2393  02FA                     i1l1901:
  2394                           
  2395                           ;newmain.c: 232:                 PDU[index++]=buff;
  2396  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  2397  02FB  1303               	bcf	3,6	;RP1=0, select bank0
  2398  02FC  0856               	movf	processPDU@buff_247,w
  2399  02FD  00FF               	movwf	btemp+1
  2400  02FE  085B               	movf	processPDU@index,w
  2401  02FF  3E66               	addlw	(low (_PDU| 0))& (0+255)
  2402  0300  0084               	movwf	4
  2403  0301  087F               	movf	btemp+1,w
  2404  0302  1383               	bcf	3,7	;select IRP bank0
  2405  0303  0080               	movwf	0
  2406  0304                     i1l1903:
  2407  0304  3001               	movlw	1
  2408  0305  00FF               	movwf	btemp+1
  2409  0306  087F               	movf	btemp+1,w
  2410  0307  07DB               	addwf	processPDU@index,f
  2411  0308                     i1l1905:
  2412                           
  2413                           ;newmain.c: 233:             }
  2414  0308  3001               	movlw	1
  2415  0309  07AA               	addwf	processPDU@i_248,f
  2416  030A  1803               	skipnc
  2417  030B  0AAB               	incf	processPDU@i_248+1,f
  2418  030C  3000               	movlw	0
  2419  030D  07AB               	addwf	processPDU@i_248+1,f
  2420  030E                     i1l1907:
  2421  030E  082B               	movf	processPDU@i_248+1,w
  2422  030F  3A80               	xorlw	128
  2423  0310  00A0               	movwf	??_processPDU
  2424  0311  3080               	movlw	128
  2425  0312  0220               	subwf	??_processPDU,w
  2426  0313  1D03               	skipz
  2427  0314  2B17               	goto	u137_25
  2428  0315  0854               	movf	processPDU@coilbytescount_245,w
  2429  0316  022A               	subwf	processPDU@i_248,w
  2430  0317                     u137_25:
  2431  0317  1C03               	skipc
  2432  0318  2B1A               	goto	u137_21
  2433  0319  2B1B               	goto	u137_20
  2434  031A                     u137_21:
  2435  031A  2ABA               	goto	i1l1885
  2436  031B                     u137_20:
  2437  031B                     i1l1909:
  2438                           
  2439                           ;newmain.c: 235:             if(coilsleft)
  2440  031B  1283               	bcf	3,5	;RP0=0, select bank0
  2441  031C  1303               	bcf	3,6	;RP1=0, select bank0
  2442  031D  0831               	movf	processPDU@coilsleft_246,w
  2443  031E  1903               	btfsc	3,2
  2444  031F  2B21               	goto	u138_21
  2445  0320  2B22               	goto	u138_20
  2446  0321                     u138_21:
  2447  0321  2B6D               	goto	i1l1929
  2448  0322                     u138_20:
  2449  0322                     i1l1911:
  2450                           
  2451                           ;newmain.c: 236:             {;newmain.c: 237:                 for(int i=0;i<coilsleft;i
      +                          ++)
  2452  0322  01AC               	clrf	processPDU@i_250
  2453  0323  01AD               	clrf	processPDU@i_250+1
  2454  0324  2B52               	goto	i1l1923
  2455  0325                     i1l1913:
  2456                           
  2457                           ;newmain.c: 238:                 {;newmain.c: 239:                     buff = 0x00;
  2458  0325  1283               	bcf	3,5	;RP0=0, select bank0
  2459  0326  1303               	bcf	3,6	;RP1=0, select bank0
  2460  0327  01D6               	clrf	processPDU@buff_247
  2461  0328                     i1l1915:
  2462                           
  2463                           ;newmain.c: 240:                     buff=buff>>1;
  2464  0328  0856               	movf	processPDU@buff_247,w
  2465  0329  00A0               	movwf	??_processPDU
  2466  032A  1003               	clrc
  2467  032B  0C20               	rrf	??_processPDU,w
  2468  032C  00FF               	movwf	btemp+1
  2469  032D  087F               	movf	btemp+1,w
  2470  032E  00D6               	movwf	processPDU@buff_247
  2471  032F                     i1l1917:
  2472                           
  2473                           ;newmain.c: 241:                     if(DiscreteInputs[reg+(coilbytescount*8)+i])
  2474  032F  0854               	movf	processPDU@coilbytescount_245,w
  2475  0330  00A0               	movwf	??_processPDU
  2476  0331  3003               	movlw	3
  2477  0332                     u139_25:
  2478  0332  1003               	clrc
  2479  0333  0DA0               	rlf	??_processPDU,f
  2480  0334  3EFF               	addlw	-1
  2481  0335  1D03               	skipz
  2482  0336  2B32               	goto	u139_25
  2483  0337  30B0               	movlw	(low (_DiscreteInputs| 0))& (0+255)
  2484  0338  0720               	addwf	??_processPDU,w
  2485  0339  00A1               	movwf	??_processPDU+1
  2486  033A  082C               	movf	processPDU@i_250,w
  2487  033B  0721               	addwf	??_processPDU+1,w
  2488  033C  00A2               	movwf	??_processPDU+2
  2489  033D  0839               	movf	processPDU@reg_242,w
  2490  033E  0722               	addwf	??_processPDU+2,w
  2491  033F  00A3               	movwf	??_processPDU+3
  2492  0340  0823               	movf	??_processPDU+3,w
  2493  0341  0084               	movwf	4
  2494  0342  1383               	bcf	3,7	;select IRP bank1
  2495  0343  0800               	movf	0,w
  2496  0344  1903               	btfsc	3,2
  2497  0345  2B47               	goto	u140_21
  2498  0346  2B48               	goto	u140_20
  2499  0347                     u140_21:
  2500  0347  2B4C               	goto	i1l1921
  2501  0348                     u140_20:
  2502  0348                     i1l1919:
  2503                           
  2504                           ;newmain.c: 242:                         buff|=0xA0;
  2505  0348  30A0               	movlw	160
  2506  0349  00FF               	movwf	btemp+1
  2507  034A  087F               	movf	btemp+1,w
  2508  034B  04D6               	iorwf	processPDU@buff_247,f
  2509  034C                     i1l1921:
  2510                           
  2511                           ;newmain.c: 243:                 }
  2512  034C  3001               	movlw	1
  2513  034D  07AC               	addwf	processPDU@i_250,f
  2514  034E  1803               	skipnc
  2515  034F  0AAD               	incf	processPDU@i_250+1,f
  2516  0350  3000               	movlw	0
  2517  0351  07AD               	addwf	processPDU@i_250+1,f
  2518  0352                     i1l1923:
  2519  0352  082D               	movf	processPDU@i_250+1,w
  2520  0353  3A80               	xorlw	128
  2521  0354  00A0               	movwf	??_processPDU
  2522  0355  3080               	movlw	128
  2523  0356  0220               	subwf	??_processPDU,w
  2524  0357  1D03               	skipz
  2525  0358  2B5B               	goto	u141_25
  2526  0359  0831               	movf	processPDU@coilsleft_246,w
  2527  035A  022C               	subwf	processPDU@i_250,w
  2528  035B                     u141_25:
  2529  035B  1C03               	skipc
  2530  035C  2B5E               	goto	u141_21
  2531  035D  2B5F               	goto	u141_20
  2532  035E                     u141_21:
  2533  035E  2B25               	goto	i1l1913
  2534  035F                     u141_20:
  2535  035F                     i1l1925:
  2536                           
  2537                           ;newmain.c: 244:             PDU[index++]=buff;
  2538  035F  1283               	bcf	3,5	;RP0=0, select bank0
  2539  0360  1303               	bcf	3,6	;RP1=0, select bank0
  2540  0361  0856               	movf	processPDU@buff_247,w
  2541  0362  00FF               	movwf	btemp+1
  2542  0363  085B               	movf	processPDU@index,w
  2543  0364  3E66               	addlw	(low (_PDU| 0))& (0+255)
  2544  0365  0084               	movwf	4
  2545  0366  087F               	movf	btemp+1,w
  2546  0367  1383               	bcf	3,7	;select IRP bank0
  2547  0368  0080               	movwf	0
  2548  0369                     i1l1927:
  2549  0369  3001               	movlw	1
  2550  036A  00FF               	movwf	btemp+1
  2551  036B  087F               	movf	btemp+1,w
  2552  036C  07DB               	addwf	processPDU@index,f
  2553  036D                     i1l1929:
  2554                           
  2555                           ;newmain.c: 247:             CRC=CRC16 (PDU,index);
  2556  036D  085B               	movf	processPDU@index,w
  2557  036E  00FF               	movwf	btemp+1
  2558  036F  087F               	movf	btemp+1,w
  2559  0370  00F0               	movwf	CRC16@count
  2560  0371  3066               	movlw	(low (_PDU| 0))& (0+255)
  2561  0372  120A  118A  278C  120A  118A  	fcall	_CRC16
  2562  0377  0871               	movf	?_CRC16+1,w
  2563  0378  1283               	bcf	3,5	;RP0=0, select bank0
  2564  0379  1303               	bcf	3,6	;RP1=0, select bank0
  2565  037A  00E1               	movwf	_CRC+1
  2566  037B  0870               	movf	?_CRC16,w
  2567  037C  00E0               	movwf	_CRC
  2568  037D                     i1l1931:
  2569                           
  2570                           ;newmain.c: 248:             PDU[index++] = (unsigned char) (CRC & 0xFF);
  2571  037D  0860               	movf	_CRC,w
  2572  037E  00FF               	movwf	btemp+1
  2573  037F  085B               	movf	processPDU@index,w
  2574  0380  3E66               	addlw	(low (_PDU| 0))& (0+255)
  2575  0381  0084               	movwf	4
  2576  0382  087F               	movf	btemp+1,w
  2577  0383  1383               	bcf	3,7	;select IRP bank0
  2578  0384  0080               	movwf	0
  2579  0385                     i1l1933:
  2580  0385  3001               	movlw	1
  2581  0386  00FF               	movwf	btemp+1
  2582  0387  087F               	movf	btemp+1,w
  2583  0388  07DB               	addwf	processPDU@index,f
  2584  0389                     i1l1935:
  2585                           
  2586                           ;newmain.c: 249:             PDU[index++] = (unsigned char) ((CRC>>8)&0xFF);
  2587  0389  0861               	movf	_CRC+1,w
  2588  038A  00FF               	movwf	btemp+1
  2589  038B  085B               	movf	processPDU@index,w
  2590  038C  3E66               	addlw	(low (_PDU| 0))& (0+255)
  2591  038D  0084               	movwf	4
  2592  038E  087F               	movf	btemp+1,w
  2593  038F  0080               	movwf	0
  2594  0390                     i1l1937:
  2595  0390  3001               	movlw	1
  2596  0391  00FF               	movwf	btemp+1
  2597  0392  087F               	movf	btemp+1,w
  2598  0393  07DB               	addwf	processPDU@index,f
  2599  0394                     i1l1939:
  2600                           
  2601                           ;newmain.c: 251:             writePDU(index);
  2602  0394  085B               	movf	processPDU@index,w
  2603  0395  120A  158A  2664  120A  118A  	fcall	_writePDU
  2604                           
  2605                           ;newmain.c: 252:         };newmain.c: 253:         break;
  2606  039A  2EB1               	goto	i1l2147
  2607  039B                     i1l1941:
  2608                           
  2609                           ;newmain.c: 257:         {;newmain.c: 258:             unsigned int regadd = PDU[2]<<8 |
      +                           PDU[3];
  2610  039B  0869               	movf	_PDU+3,w
  2611  039C  00A0               	movwf	??_processPDU
  2612  039D  01A1               	clrf	??_processPDU+1
  2613  039E  0868               	movf	_PDU+2,w
  2614  039F  00A2               	movwf	??_processPDU+2
  2615  03A0  01A3               	clrf	??_processPDU+3
  2616  03A1  0822               	movf	??_processPDU+2,w
  2617  03A2  00A3               	movwf	??_processPDU+3
  2618  03A3  01A2               	clrf	??_processPDU+2
  2619  03A4  0820               	movf	??_processPDU,w
  2620  03A5  0422               	iorwf	??_processPDU+2,w
  2621  03A6  00BF               	movwf	processPDU@regadd
  2622  03A7  0821               	movf	??_processPDU+1,w
  2623  03A8  0423               	iorwf	??_processPDU+3,w
  2624  03A9  00C0               	movwf	processPDU@regadd+1
  2625  03AA                     i1l1943:
  2626                           
  2627                           ;newmain.c: 259:             regadd--;
  2628  03AA  3001               	movlw	1
  2629  03AB  02BF               	subwf	processPDU@regadd,f
  2630  03AC  3000               	movlw	0
  2631  03AD  1C03               	skipc
  2632  03AE  03C0               	decf	processPDU@regadd+1,f
  2633  03AF  02C0               	subwf	processPDU@regadd+1,f
  2634  03B0                     i1l1945:
  2635                           
  2636                           ;newmain.c: 261:             unsigned int regcount = PDU[4]<<8 | PDU[5];
  2637  03B0  086B               	movf	_PDU+5,w
  2638  03B1  00A0               	movwf	??_processPDU
  2639  03B2  01A1               	clrf	??_processPDU+1
  2640  03B3  086A               	movf	_PDU+4,w
  2641  03B4  00A2               	movwf	??_processPDU+2
  2642  03B5  01A3               	clrf	??_processPDU+3
  2643  03B6  0822               	movf	??_processPDU+2,w
  2644  03B7  00A3               	movwf	??_processPDU+3
  2645  03B8  01A2               	clrf	??_processPDU+2
  2646  03B9  0820               	movf	??_processPDU,w
  2647  03BA  0422               	iorwf	??_processPDU+2,w
  2648  03BB  00CD               	movwf	processPDU@regcount
  2649  03BC  0821               	movf	??_processPDU+1,w
  2650  03BD  0423               	iorwf	??_processPDU+3,w
  2651  03BE  00CE               	movwf	processPDU@regcount+1
  2652                           
  2653                           ;newmain.c: 264:             if (regadd < 0 || regadd > ((3 -1)-regcount) )
  2654  03BF  3002               	movlw	2
  2655  03C0  00A0               	movwf	??_processPDU
  2656  03C1  084D               	movf	processPDU@regcount,w
  2657  03C2  0220               	subwf	??_processPDU,w
  2658  03C3  00A1               	movwf	??_processPDU+1
  2659  03C4  094E               	comf	processPDU@regcount+1,w
  2660  03C5  1803               	skipnc
  2661  03C6  3E01               	addlw	1
  2662  03C7  00A2               	movwf	??_processPDU+2
  2663  03C8  0840               	movf	processPDU@regadd+1,w
  2664  03C9  0222               	subwf	??_processPDU+2,w
  2665  03CA  1D03               	skipz
  2666  03CB  2BCE               	goto	u142_25
  2667  03CC  083F               	movf	processPDU@regadd,w
  2668  03CD  0221               	subwf	??_processPDU+1,w
  2669  03CE                     u142_25:
  2670  03CE  1803               	skipnc
  2671  03CF  2BD1               	goto	u142_21
  2672  03D0  2BD2               	goto	u142_20
  2673  03D1                     u142_21:
  2674  03D1  2BDD               	goto	i1l1953
  2675  03D2                     u142_20:
  2676  03D2                     i1l1947:
  2677                           
  2678                           ;newmain.c: 265:             {;newmain.c: 266:                 sendexception(PDU[1],0x02
      +                          );
  2679  03D2  3002               	movlw	2
  2680  03D3  00FF               	movwf	btemp+1
  2681  03D4  087F               	movf	btemp+1,w
  2682  03D5  00FC               	movwf	sendexception@errorcode
  2683  03D6  0867               	movf	_PDU+1,w
  2684  03D7  120A  158A  2686  120A  118A  	fcall	_sendexception
  2685  03DC  28A6               	goto	i1l1741
  2686  03DD                     i1l1953:
  2687  03DD  084D               	movf	processPDU@regcount,w
  2688  03DE  044E               	iorwf	processPDU@regcount+1,w
  2689  03DF  1D03               	btfss	3,2
  2690  03E0  2BE2               	goto	u143_21
  2691  03E1  2BE3               	goto	u143_20
  2692  03E2                     u143_21:
  2693  03E2  2BEE               	goto	i1l1961
  2694  03E3                     u143_20:
  2695  03E3                     i1l1955:
  2696                           
  2697                           ;newmain.c: 270:             {;newmain.c: 271:                 sendexception(PDU[1],0x03
      +                          );
  2698  03E3  3003               	movlw	3
  2699  03E4  00FF               	movwf	btemp+1
  2700  03E5  087F               	movf	btemp+1,w
  2701  03E6  00FC               	movwf	sendexception@errorcode
  2702  03E7  0867               	movf	_PDU+1,w
  2703  03E8  120A  158A  2686  120A  118A  	fcall	_sendexception
  2704  03ED  28C1               	goto	i1l1751
  2705  03EE                     i1l1961:
  2706                           
  2707                           ;newmain.c: 274:             for (int i=2; i<10; i++)
  2708  03EE  3002               	movlw	2
  2709  03EF  00C1               	movwf	processPDU@i_253
  2710  03F0  3000               	movlw	0
  2711  03F1  00C2               	movwf	processPDU@i_253+1
  2712  03F2                     i1l1963:
  2713  03F2  0842               	movf	processPDU@i_253+1,w
  2714  03F3  3A80               	xorlw	128
  2715  03F4  00FF               	movwf	btemp+1
  2716  03F5  3080               	movlw	128
  2717  03F6  027F               	subwf	btemp+1,w
  2718  03F7  1D03               	skipz
  2719  03F8  2BFB               	goto	u144_25
  2720  03F9  300A               	movlw	10
  2721  03FA  0241               	subwf	processPDU@i_253,w
  2722  03FB                     u144_25:
  2723  03FB  1C03               	skipc
  2724  03FC  2BFE               	goto	u144_21
  2725  03FD  2BFF               	goto	u144_20
  2726  03FE                     u144_21:
  2727  03FE  2C00               	goto	i1l1967
  2728  03FF                     u144_20:
  2729  03FF  2C0E               	goto	i1l1973
  2730  0400                     i1l1967:
  2731                           
  2732                           ;newmain.c: 275:             {;newmain.c: 276:                 PDU[i]=0x00;
  2733  0400  1283               	bcf	3,5	;RP0=0, select bank0
  2734  0401  1303               	bcf	3,6	;RP1=0, select bank0
  2735  0402  0841               	movf	processPDU@i_253,w
  2736  0403  3E66               	addlw	(low (_PDU| 0))& (0+255)
  2737  0404  0084               	movwf	4
  2738  0405  1383               	bcf	3,7	;select IRP bank0
  2739  0406  0180               	clrf	0
  2740  0407                     i1l1969:
  2741                           
  2742                           ;newmain.c: 277:             }
  2743  0407  3001               	movlw	1
  2744  0408  07C1               	addwf	processPDU@i_253,f
  2745  0409  1803               	skipnc
  2746  040A  0AC2               	incf	processPDU@i_253+1,f
  2747  040B  3000               	movlw	0
  2748  040C  07C2               	addwf	processPDU@i_253+1,f
  2749  040D  2BF2               	goto	i1l1963
  2750  040E                     i1l1973:
  2751                           
  2752                           ;newmain.c: 279:             PDU[index++] = 2*regcount;
  2753  040E  1283               	bcf	3,5	;RP0=0, select bank0
  2754  040F  1303               	bcf	3,6	;RP1=0, select bank0
  2755  0410  084D               	movf	processPDU@regcount,w
  2756  0411  00A0               	movwf	??_processPDU
  2757  0412  0720               	addwf	??_processPDU,w
  2758  0413  00FF               	movwf	btemp+1
  2759  0414  085B               	movf	processPDU@index,w
  2760  0415  3E66               	addlw	(low (_PDU| 0))& (0+255)
  2761  0416  0084               	movwf	4
  2762  0417  087F               	movf	btemp+1,w
  2763  0418  1383               	bcf	3,7	;select IRP bank0
  2764  0419  0080               	movwf	0
  2765  041A                     i1l1975:
  2766  041A  3001               	movlw	1
  2767  041B  00FF               	movwf	btemp+1
  2768  041C  087F               	movf	btemp+1,w
  2769  041D  07DB               	addwf	processPDU@index,f
  2770  041E                     i1l1977:
  2771                           
  2772                           ;newmain.c: 281:             for (int i=regadd; i<(regadd+regcount);i++)
  2773  041E  0840               	movf	processPDU@regadd+1,w
  2774  041F  00C4               	movwf	processPDU@i_254+1
  2775  0420  083F               	movf	processPDU@regadd,w
  2776  0421  00C3               	movwf	processPDU@i_254
  2777  0422  2C4E               	goto	i1l1987
  2778  0423                     i1l1979:
  2779                           
  2780                           ;newmain.c: 282:             {;newmain.c: 283:                 PDU[index++]=HoldingRegis
      +                          ters[i]>>8;
  2781  0423  0843               	movf	processPDU@i_254,w
  2782  0424  00A0               	movwf	??_processPDU
  2783  0425  0720               	addwf	??_processPDU,w
  2784  0426  3EC0               	addlw	(low (_HoldingRegisters| 0))& (0+255)
  2785  0427  0084               	movwf	4
  2786  0428  0800               	movf	0,w
  2787  0429  00A1               	movwf	??_processPDU+1
  2788  042A  0A84               	incf	4,f
  2789  042B  0800               	movf	0,w
  2790  042C  00A2               	movwf	??_processPDU+2
  2791  042D  0822               	movf	??_processPDU+2,w
  2792  042E  00FF               	movwf	btemp+1
  2793  042F  085B               	movf	processPDU@index,w
  2794  0430  3E66               	addlw	(low (_PDU| 0))& (0+255)
  2795  0431  0084               	movwf	4
  2796  0432  087F               	movf	btemp+1,w
  2797  0433  0080               	movwf	0
  2798  0434                     i1l1981:
  2799  0434  3001               	movlw	1
  2800  0435  00FF               	movwf	btemp+1
  2801  0436  087F               	movf	btemp+1,w
  2802  0437  07DB               	addwf	processPDU@index,f
  2803  0438                     i1l1983:
  2804                           
  2805                           ;newmain.c: 284:                 PDU[index++]=HoldingRegisters[i];
  2806  0438  0843               	movf	processPDU@i_254,w
  2807  0439  00A0               	movwf	??_processPDU
  2808  043A  0720               	addwf	??_processPDU,w
  2809  043B  3EC0               	addlw	(low (_HoldingRegisters| 0))& (0+255)
  2810  043C  0084               	movwf	4
  2811  043D  0800               	movf	0,w
  2812  043E  00FF               	movwf	btemp+1
  2813  043F  085B               	movf	processPDU@index,w
  2814  0440  3E66               	addlw	(low (_PDU| 0))& (0+255)
  2815  0441  0084               	movwf	4
  2816  0442  087F               	movf	btemp+1,w
  2817  0443  0080               	movwf	0
  2818  0444  3001               	movlw	1
  2819  0445  00FF               	movwf	btemp+1
  2820  0446  087F               	movf	btemp+1,w
  2821  0447  07DB               	addwf	processPDU@index,f
  2822  0448                     i1l1985:
  2823                           
  2824                           ;newmain.c: 286:             }
  2825  0448  3001               	movlw	1
  2826  0449  07C3               	addwf	processPDU@i_254,f
  2827  044A  1803               	skipnc
  2828  044B  0AC4               	incf	processPDU@i_254+1,f
  2829  044C  3000               	movlw	0
  2830  044D  07C4               	addwf	processPDU@i_254+1,f
  2831  044E                     i1l1987:
  2832  044E  084D               	movf	processPDU@regcount,w
  2833  044F  073F               	addwf	processPDU@regadd,w
  2834  0450  00A0               	movwf	??_processPDU
  2835  0451  084E               	movf	processPDU@regcount+1,w
  2836  0452  1803               	skipnc
  2837  0453  0A4E               	incf	processPDU@regcount+1,w
  2838  0454  0740               	addwf	processPDU@regadd+1,w
  2839  0455  00A1               	movwf	??_processPDU+1
  2840  0456  0821               	movf	??_processPDU+1,w
  2841  0457  0244               	subwf	processPDU@i_254+1,w
  2842  0458  1D03               	skipz
  2843  0459  2C5C               	goto	u145_25
  2844  045A  0820               	movf	??_processPDU,w
  2845  045B  0243               	subwf	processPDU@i_254,w
  2846  045C                     u145_25:
  2847  045C  1C03               	skipc
  2848  045D  2C5F               	goto	u145_21
  2849  045E  2C60               	goto	u145_20
  2850  045F                     u145_21:
  2851  045F  2C23               	goto	i1l1979
  2852  0460                     u145_20:
  2853  0460                     i1l1989:
  2854                           
  2855                           ;newmain.c: 288:             CRC=CRC16 (PDU,index);
  2856  0460  085B               	movf	processPDU@index,w
  2857  0461  00FF               	movwf	btemp+1
  2858  0462  087F               	movf	btemp+1,w
  2859  0463  00F0               	movwf	CRC16@count
  2860  0464  3066               	movlw	(low (_PDU| 0))& (0+255)
  2861  0465  120A  118A  278C  120A  118A  	fcall	_CRC16
  2862  046A  0871               	movf	?_CRC16+1,w
  2863  046B  1283               	bcf	3,5	;RP0=0, select bank0
  2864  046C  1303               	bcf	3,6	;RP1=0, select bank0
  2865  046D  00E1               	movwf	_CRC+1
  2866  046E  0870               	movf	?_CRC16,w
  2867  046F  00E0               	movwf	_CRC
  2868  0470                     i1l1991:
  2869                           
  2870                           ;newmain.c: 289:             PDU[index++] = (unsigned char) (CRC & 0xFF);
  2871  0470  0860               	movf	_CRC,w
  2872  0471  00FF               	movwf	btemp+1
  2873  0472  085B               	movf	processPDU@index,w
  2874  0473  3E66               	addlw	(low (_PDU| 0))& (0+255)
  2875  0474  0084               	movwf	4
  2876  0475  087F               	movf	btemp+1,w
  2877  0476  1383               	bcf	3,7	;select IRP bank0
  2878  0477  0080               	movwf	0
  2879  0478                     i1l1993:
  2880  0478  3001               	movlw	1
  2881  0479  00FF               	movwf	btemp+1
  2882  047A  087F               	movf	btemp+1,w
  2883  047B  07DB               	addwf	processPDU@index,f
  2884  047C                     i1l1995:
  2885                           
  2886                           ;newmain.c: 290:             PDU[index++] = (unsigned char) ((CRC>>8)&0xFF);
  2887  047C  0861               	movf	_CRC+1,w
  2888  047D  00FF               	movwf	btemp+1
  2889  047E  085B               	movf	processPDU@index,w
  2890  047F  3E66               	addlw	(low (_PDU| 0))& (0+255)
  2891  0480  0084               	movwf	4
  2892  0481  087F               	movf	btemp+1,w
  2893  0482  0080               	movwf	0
  2894  0483                     i1l1997:
  2895  0483  3001               	movlw	1
  2896  0484  00FF               	movwf	btemp+1
  2897  0485  087F               	movf	btemp+1,w
  2898  0486  07DB               	addwf	processPDU@index,f
  2899  0487                     i1l1999:
  2900                           
  2901                           ;newmain.c: 292:             writePDU(index);
  2902  0487  085B               	movf	processPDU@index,w
  2903  0488  120A  158A  2664  120A  118A  	fcall	_writePDU
  2904                           
  2905                           ;newmain.c: 293:         };newmain.c: 294:         break;
  2906  048D  2EB1               	goto	i1l2147
  2907  048E                     i1l2001:
  2908                           
  2909                           ;newmain.c: 297:         {;newmain.c: 298:             unsigned int regadd = PDU[2]<<8 |
      +                           PDU[3];
  2910  048E  0869               	movf	_PDU+3,w
  2911  048F  00A0               	movwf	??_processPDU
  2912  0490  01A1               	clrf	??_processPDU+1
  2913  0491  0868               	movf	_PDU+2,w
  2914  0492  00A2               	movwf	??_processPDU+2
  2915  0493  01A3               	clrf	??_processPDU+3
  2916  0494  0822               	movf	??_processPDU+2,w
  2917  0495  00A3               	movwf	??_processPDU+3
  2918  0496  01A2               	clrf	??_processPDU+2
  2919  0497  0820               	movf	??_processPDU,w
  2920  0498  0422               	iorwf	??_processPDU+2,w
  2921  0499  00C5               	movwf	processPDU@regadd_255
  2922  049A  0821               	movf	??_processPDU+1,w
  2923  049B  0423               	iorwf	??_processPDU+3,w
  2924  049C  00C6               	movwf	processPDU@regadd_255+1
  2925  049D                     i1l2003:
  2926                           
  2927                           ;newmain.c: 299:             regadd--;
  2928  049D  3001               	movlw	1
  2929  049E  02C5               	subwf	processPDU@regadd_255,f
  2930  049F  3000               	movlw	0
  2931  04A0  1C03               	skipc
  2932  04A1  03C6               	decf	processPDU@regadd_255+1,f
  2933  04A2  02C6               	subwf	processPDU@regadd_255+1,f
  2934  04A3                     i1l2005:
  2935                           
  2936                           ;newmain.c: 301:             unsigned int regcount = PDU[4]<<8 | PDU[5];
  2937  04A3  086B               	movf	_PDU+5,w
  2938  04A4  00A0               	movwf	??_processPDU
  2939  04A5  01A1               	clrf	??_processPDU+1
  2940  04A6  086A               	movf	_PDU+4,w
  2941  04A7  00A2               	movwf	??_processPDU+2
  2942  04A8  01A3               	clrf	??_processPDU+3
  2943  04A9  0822               	movf	??_processPDU+2,w
  2944  04AA  00A3               	movwf	??_processPDU+3
  2945  04AB  01A2               	clrf	??_processPDU+2
  2946  04AC  0820               	movf	??_processPDU,w
  2947  04AD  0422               	iorwf	??_processPDU+2,w
  2948  04AE  00CF               	movwf	processPDU@regcount_256
  2949  04AF  0821               	movf	??_processPDU+1,w
  2950  04B0  0423               	iorwf	??_processPDU+3,w
  2951  04B1  00D0               	movwf	processPDU@regcount_256+1
  2952                           
  2953                           ;newmain.c: 304:             if (regadd < 0 || regadd > ((2 -1)-regcount) )
  2954  04B2  3001               	movlw	1
  2955  04B3  00A0               	movwf	??_processPDU
  2956  04B4  084F               	movf	processPDU@regcount_256,w
  2957  04B5  0220               	subwf	??_processPDU,w
  2958  04B6  00A1               	movwf	??_processPDU+1
  2959  04B7  0950               	comf	processPDU@regcount_256+1,w
  2960  04B8  1803               	skipnc
  2961  04B9  3E01               	addlw	1
  2962  04BA  00A2               	movwf	??_processPDU+2
  2963  04BB  0846               	movf	processPDU@regadd_255+1,w
  2964  04BC  0222               	subwf	??_processPDU+2,w
  2965  04BD  1D03               	skipz
  2966  04BE  2CC1               	goto	u146_25
  2967  04BF  0845               	movf	processPDU@regadd_255,w
  2968  04C0  0221               	subwf	??_processPDU+1,w
  2969  04C1                     u146_25:
  2970  04C1  1803               	skipnc
  2971  04C2  2CC4               	goto	u146_21
  2972  04C3  2CC5               	goto	u146_20
  2973  04C4                     u146_21:
  2974  04C4  2CD0               	goto	i1l2013
  2975  04C5                     u146_20:
  2976  04C5                     i1l2007:
  2977                           
  2978                           ;newmain.c: 305:             {;newmain.c: 306:                 sendexception(PDU[1],0x02
      +                          );
  2979  04C5  3002               	movlw	2
  2980  04C6  00FF               	movwf	btemp+1
  2981  04C7  087F               	movf	btemp+1,w
  2982  04C8  00FC               	movwf	sendexception@errorcode
  2983  04C9  0867               	movf	_PDU+1,w
  2984  04CA  120A  158A  2686  120A  118A  	fcall	_sendexception
  2985  04CF  28A6               	goto	i1l1741
  2986  04D0                     i1l2013:
  2987  04D0  084F               	movf	processPDU@regcount_256,w
  2988  04D1  0450               	iorwf	processPDU@regcount_256+1,w
  2989  04D2  1D03               	btfss	3,2
  2990  04D3  2CD5               	goto	u147_21
  2991  04D4  2CD6               	goto	u147_20
  2992  04D5                     u147_21:
  2993  04D5  2CE1               	goto	i1l2021
  2994  04D6                     u147_20:
  2995  04D6                     i1l2015:
  2996                           
  2997                           ;newmain.c: 310:             {;newmain.c: 311:                 sendexception(PDU[1],0x03
      +                          );
  2998  04D6  3003               	movlw	3
  2999  04D7  00FF               	movwf	btemp+1
  3000  04D8  087F               	movf	btemp+1,w
  3001  04D9  00FC               	movwf	sendexception@errorcode
  3002  04DA  0867               	movf	_PDU+1,w
  3003  04DB  120A  158A  2686  120A  118A  	fcall	_sendexception
  3004  04E0  28C1               	goto	i1l1751
  3005  04E1                     i1l2021:
  3006                           
  3007                           ;newmain.c: 314:             for (int i=2; i<10; i++)
  3008  04E1  3002               	movlw	2
  3009  04E2  00C7               	movwf	processPDU@i_257
  3010  04E3  3000               	movlw	0
  3011  04E4  00C8               	movwf	processPDU@i_257+1
  3012  04E5                     i1l2023:
  3013  04E5  0848               	movf	processPDU@i_257+1,w
  3014  04E6  3A80               	xorlw	128
  3015  04E7  00FF               	movwf	btemp+1
  3016  04E8  3080               	movlw	128
  3017  04E9  027F               	subwf	btemp+1,w
  3018  04EA  1D03               	skipz
  3019  04EB  2CEE               	goto	u148_25
  3020  04EC  300A               	movlw	10
  3021  04ED  0247               	subwf	processPDU@i_257,w
  3022  04EE                     u148_25:
  3023  04EE  1C03               	skipc
  3024  04EF  2CF1               	goto	u148_21
  3025  04F0  2CF2               	goto	u148_20
  3026  04F1                     u148_21:
  3027  04F1  2CF3               	goto	i1l2027
  3028  04F2                     u148_20:
  3029  04F2  2D01               	goto	i1l2033
  3030  04F3                     i1l2027:
  3031                           
  3032                           ;newmain.c: 315:             {;newmain.c: 316:                 PDU[i]=0x00;
  3033  04F3  1283               	bcf	3,5	;RP0=0, select bank0
  3034  04F4  1303               	bcf	3,6	;RP1=0, select bank0
  3035  04F5  0847               	movf	processPDU@i_257,w
  3036  04F6  3E66               	addlw	(low (_PDU| 0))& (0+255)
  3037  04F7  0084               	movwf	4
  3038  04F8  1383               	bcf	3,7	;select IRP bank0
  3039  04F9  0180               	clrf	0
  3040  04FA                     i1l2029:
  3041                           
  3042                           ;newmain.c: 317:             }
  3043  04FA  3001               	movlw	1
  3044  04FB  07C7               	addwf	processPDU@i_257,f
  3045  04FC  1803               	skipnc
  3046  04FD  0AC8               	incf	processPDU@i_257+1,f
  3047  04FE  3000               	movlw	0
  3048  04FF  07C8               	addwf	processPDU@i_257+1,f
  3049  0500  2CE5               	goto	i1l2023
  3050  0501                     i1l2033:
  3051                           
  3052                           ;newmain.c: 319:             PDU[index++] = 2*regcount;
  3053  0501  1283               	bcf	3,5	;RP0=0, select bank0
  3054  0502  1303               	bcf	3,6	;RP1=0, select bank0
  3055  0503  084F               	movf	processPDU@regcount_256,w
  3056  0504  00A0               	movwf	??_processPDU
  3057  0505  0720               	addwf	??_processPDU,w
  3058  0506  00FF               	movwf	btemp+1
  3059  0507  085B               	movf	processPDU@index,w
  3060  0508  3E66               	addlw	(low (_PDU| 0))& (0+255)
  3061  0509  0084               	movwf	4
  3062  050A  087F               	movf	btemp+1,w
  3063  050B  1383               	bcf	3,7	;select IRP bank0
  3064  050C  0080               	movwf	0
  3065  050D                     i1l2035:
  3066  050D  3001               	movlw	1
  3067  050E  00FF               	movwf	btemp+1
  3068  050F  087F               	movf	btemp+1,w
  3069  0510  07DB               	addwf	processPDU@index,f
  3070  0511                     i1l2037:
  3071                           
  3072                           ;newmain.c: 321:             for (int i=regadd; i<(regadd+regcount);i++)
  3073  0511  0846               	movf	processPDU@regadd_255+1,w
  3074  0512  00CA               	movwf	processPDU@i_258+1
  3075  0513  0845               	movf	processPDU@regadd_255,w
  3076  0514  00C9               	movwf	processPDU@i_258
  3077  0515  2D41               	goto	i1l2047
  3078  0516                     i1l2039:
  3079                           
  3080                           ;newmain.c: 322:             {;newmain.c: 323:                 PDU[index++]=InputRegiste
      +                          rs[i]>>8;
  3081  0516  0849               	movf	processPDU@i_258,w
  3082  0517  00A0               	movwf	??_processPDU
  3083  0518  0720               	addwf	??_processPDU,w
  3084  0519  3EC6               	addlw	(low (_InputRegisters| 0))& (0+255)
  3085  051A  0084               	movwf	4
  3086  051B  0800               	movf	0,w
  3087  051C  00A1               	movwf	??_processPDU+1
  3088  051D  0A84               	incf	4,f
  3089  051E  0800               	movf	0,w
  3090  051F  00A2               	movwf	??_processPDU+2
  3091  0520  0822               	movf	??_processPDU+2,w
  3092  0521  00FF               	movwf	btemp+1
  3093  0522  085B               	movf	processPDU@index,w
  3094  0523  3E66               	addlw	(low (_PDU| 0))& (0+255)
  3095  0524  0084               	movwf	4
  3096  0525  087F               	movf	btemp+1,w
  3097  0526  0080               	movwf	0
  3098  0527                     i1l2041:
  3099  0527  3001               	movlw	1
  3100  0528  00FF               	movwf	btemp+1
  3101  0529  087F               	movf	btemp+1,w
  3102  052A  07DB               	addwf	processPDU@index,f
  3103  052B                     i1l2043:
  3104                           
  3105                           ;newmain.c: 324:                 PDU[index++]=InputRegisters[i];
  3106  052B  0849               	movf	processPDU@i_258,w
  3107  052C  00A0               	movwf	??_processPDU
  3108  052D  0720               	addwf	??_processPDU,w
  3109  052E  3EC6               	addlw	(low (_InputRegisters| 0))& (0+255)
  3110  052F  0084               	movwf	4
  3111  0530  0800               	movf	0,w
  3112  0531  00FF               	movwf	btemp+1
  3113  0532  085B               	movf	processPDU@index,w
  3114  0533  3E66               	addlw	(low (_PDU| 0))& (0+255)
  3115  0534  0084               	movwf	4
  3116  0535  087F               	movf	btemp+1,w
  3117  0536  0080               	movwf	0
  3118  0537  3001               	movlw	1
  3119  0538  00FF               	movwf	btemp+1
  3120  0539  087F               	movf	btemp+1,w
  3121  053A  07DB               	addwf	processPDU@index,f
  3122  053B                     i1l2045:
  3123                           
  3124                           ;newmain.c: 325:             }
  3125  053B  3001               	movlw	1
  3126  053C  07C9               	addwf	processPDU@i_258,f
  3127  053D  1803               	skipnc
  3128  053E  0ACA               	incf	processPDU@i_258+1,f
  3129  053F  3000               	movlw	0
  3130  0540  07CA               	addwf	processPDU@i_258+1,f
  3131  0541                     i1l2047:
  3132  0541  084F               	movf	processPDU@regcount_256,w
  3133  0542  0745               	addwf	processPDU@regadd_255,w
  3134  0543  00A0               	movwf	??_processPDU
  3135  0544  0850               	movf	processPDU@regcount_256+1,w
  3136  0545  1803               	skipnc
  3137  0546  0A50               	incf	processPDU@regcount_256+1,w
  3138  0547  0746               	addwf	processPDU@regadd_255+1,w
  3139  0548  00A1               	movwf	??_processPDU+1
  3140  0549  0821               	movf	??_processPDU+1,w
  3141  054A  024A               	subwf	processPDU@i_258+1,w
  3142  054B  1D03               	skipz
  3143  054C  2D4F               	goto	u149_25
  3144  054D  0820               	movf	??_processPDU,w
  3145  054E  0249               	subwf	processPDU@i_258,w
  3146  054F                     u149_25:
  3147  054F  1C03               	skipc
  3148  0550  2D52               	goto	u149_21
  3149  0551  2D53               	goto	u149_20
  3150  0552                     u149_21:
  3151  0552  2D16               	goto	i1l2039
  3152  0553                     u149_20:
  3153  0553                     i1l2049:
  3154                           
  3155                           ;newmain.c: 327:             CRC=CRC16 (PDU,index);
  3156  0553  085B               	movf	processPDU@index,w
  3157  0554  00FF               	movwf	btemp+1
  3158  0555  087F               	movf	btemp+1,w
  3159  0556  00F0               	movwf	CRC16@count
  3160  0557  3066               	movlw	(low (_PDU| 0))& (0+255)
  3161  0558  120A  118A  278C  120A  118A  	fcall	_CRC16
  3162  055D  0871               	movf	?_CRC16+1,w
  3163  055E  1283               	bcf	3,5	;RP0=0, select bank0
  3164  055F  1303               	bcf	3,6	;RP1=0, select bank0
  3165  0560  00E1               	movwf	_CRC+1
  3166  0561  0870               	movf	?_CRC16,w
  3167  0562  00E0               	movwf	_CRC
  3168  0563                     i1l2051:
  3169                           
  3170                           ;newmain.c: 328:             PDU[index++] = (unsigned char) (CRC & 0xFF);
  3171  0563  0860               	movf	_CRC,w
  3172  0564  00FF               	movwf	btemp+1
  3173  0565  085B               	movf	processPDU@index,w
  3174  0566  3E66               	addlw	(low (_PDU| 0))& (0+255)
  3175  0567  0084               	movwf	4
  3176  0568  087F               	movf	btemp+1,w
  3177  0569  1383               	bcf	3,7	;select IRP bank0
  3178  056A  0080               	movwf	0
  3179  056B                     i1l2053:
  3180  056B  3001               	movlw	1
  3181  056C  00FF               	movwf	btemp+1
  3182  056D  087F               	movf	btemp+1,w
  3183  056E  07DB               	addwf	processPDU@index,f
  3184  056F                     i1l2055:
  3185                           
  3186                           ;newmain.c: 329:             PDU[index++] = (unsigned char) ((CRC>>8)&0xFF);
  3187  056F  0861               	movf	_CRC+1,w
  3188  0570  00FF               	movwf	btemp+1
  3189  0571  085B               	movf	processPDU@index,w
  3190  0572  3E66               	addlw	(low (_PDU| 0))& (0+255)
  3191  0573  0084               	movwf	4
  3192  0574  087F               	movf	btemp+1,w
  3193  0575  0080               	movwf	0
  3194  0576                     i1l2057:
  3195  0576  3001               	movlw	1
  3196  0577  00FF               	movwf	btemp+1
  3197  0578  087F               	movf	btemp+1,w
  3198  0579  07DB               	addwf	processPDU@index,f
  3199  057A                     i1l2059:
  3200                           
  3201                           ;newmain.c: 330:             writePDU(index);
  3202  057A  085B               	movf	processPDU@index,w
  3203  057B  120A  158A  2664  120A  118A  	fcall	_writePDU
  3204                           
  3205                           ;newmain.c: 332:         };newmain.c: 333:         break;
  3206  0580  2EB1               	goto	i1l2147
  3207  0581                     i1l2061:
  3208                           
  3209                           ;newmain.c: 336:         {;newmain.c: 337:             unsigned int regadd = PDU[2]<<8 |
      +                           PDU[3];
  3210  0581  0869               	movf	_PDU+3,w
  3211  0582  00A0               	movwf	??_processPDU
  3212  0583  01A1               	clrf	??_processPDU+1
  3213  0584  0868               	movf	_PDU+2,w
  3214  0585  00A2               	movwf	??_processPDU+2
  3215  0586  01A3               	clrf	??_processPDU+3
  3216  0587  0822               	movf	??_processPDU+2,w
  3217  0588  00A3               	movwf	??_processPDU+3
  3218  0589  01A2               	clrf	??_processPDU+2
  3219  058A  0820               	movf	??_processPDU,w
  3220  058B  0422               	iorwf	??_processPDU+2,w
  3221  058C  00CB               	movwf	processPDU@regadd_259
  3222  058D  0821               	movf	??_processPDU+1,w
  3223  058E  0423               	iorwf	??_processPDU+3,w
  3224  058F  00CC               	movwf	processPDU@regadd_259+1
  3225  0590                     i1l2063:
  3226                           
  3227                           ;newmain.c: 338:             regadd--;
  3228  0590  3001               	movlw	1
  3229  0591  02CB               	subwf	processPDU@regadd_259,f
  3230  0592  3000               	movlw	0
  3231  0593  1C03               	skipc
  3232  0594  03CC               	decf	processPDU@regadd_259+1,f
  3233  0595  02CC               	subwf	processPDU@regadd_259+1,f
  3234  0596                     i1l2065:
  3235                           
  3236                           ;newmain.c: 339:             unsigned int valueint = PDU[4]<<8 | PDU[5];
  3237  0596  086B               	movf	_PDU+5,w
  3238  0597  00A0               	movwf	??_processPDU
  3239  0598  01A1               	clrf	??_processPDU+1
  3240  0599  086A               	movf	_PDU+4,w
  3241  059A  00A2               	movwf	??_processPDU+2
  3242  059B  01A3               	clrf	??_processPDU+3
  3243  059C  0822               	movf	??_processPDU+2,w
  3244  059D  00A3               	movwf	??_processPDU+3
  3245  059E  01A2               	clrf	??_processPDU+2
  3246  059F  0820               	movf	??_processPDU,w
  3247  05A0  0422               	iorwf	??_processPDU+2,w
  3248  05A1  00D1               	movwf	processPDU@valueint
  3249  05A2  0821               	movf	??_processPDU+1,w
  3250  05A3  0423               	iorwf	??_processPDU+3,w
  3251  05A4  00D2               	movwf	processPDU@valueint+1
  3252  05A5                     i1l2067:
  3253                           
  3254                           ;newmain.c: 341:             if(valueint != (0xFF00) && valueint != (0xFFFF))
  3255  05A5  0A52               	incf	processPDU@valueint+1,w
  3256  05A6  0451               	iorwf	processPDU@valueint,w
  3257  05A7  1903               	btfsc	3,2
  3258  05A8  2DAA               	goto	u150_21
  3259  05A9  2DAB               	goto	u150_20
  3260  05AA                     u150_21:
  3261  05AA  2DBE               	goto	i1l2077
  3262  05AB                     u150_20:
  3263  05AB                     i1l2069:
  3264  05AB  0A51               	incf	processPDU@valueint,w
  3265  05AC  1D03               	skipz
  3266  05AD  2DB3               	goto	u151_20
  3267  05AE  0A52               	incf	processPDU@valueint+1,w
  3268  05AF  1903               	btfsc	3,2
  3269  05B0  2DB2               	goto	u151_21
  3270  05B1  2DB3               	goto	u151_20
  3271  05B2                     u151_21:
  3272  05B2  2DBE               	goto	i1l2077
  3273  05B3                     u151_20:
  3274  05B3                     i1l2071:
  3275                           
  3276                           ;newmain.c: 342:             {;newmain.c: 343:                 sendexception(PDU[1],0x03
      +                          );
  3277  05B3  3003               	movlw	3
  3278  05B4  00FF               	movwf	btemp+1
  3279  05B5  087F               	movf	btemp+1,w
  3280  05B6  00FC               	movwf	sendexception@errorcode
  3281  05B7  0867               	movf	_PDU+1,w
  3282  05B8  120A  158A  2686  120A  118A  	fcall	_sendexception
  3283  05BD  28C1               	goto	i1l1751
  3284  05BE                     i1l2077:
  3285                           
  3286                           ;newmain.c: 346:             if(regadd < 0 || regadd > 16 )
  3287  05BE  3000               	movlw	0
  3288  05BF  024C               	subwf	processPDU@regadd_259+1,w
  3289  05C0  3011               	movlw	17
  3290  05C1  1903               	skipnz
  3291  05C2  024B               	subwf	processPDU@regadd_259,w
  3292  05C3  1C03               	skipc
  3293  05C4  2DC6               	goto	u152_21
  3294  05C5  2DC7               	goto	u152_20
  3295  05C6                     u152_21:
  3296  05C6  2DD2               	goto	i1l2085
  3297  05C7                     u152_20:
  3298  05C7                     i1l2079:
  3299                           
  3300                           ;newmain.c: 347:             {;newmain.c: 348:                 sendexception(PDU[1],0x02
      +                          );
  3301  05C7  3002               	movlw	2
  3302  05C8  00FF               	movwf	btemp+1
  3303  05C9  087F               	movf	btemp+1,w
  3304  05CA  00FC               	movwf	sendexception@errorcode
  3305  05CB  0867               	movf	_PDU+1,w
  3306  05CC  120A  158A  2686  120A  118A  	fcall	_sendexception
  3307  05D1  28A6               	goto	i1l1741
  3308  05D2                     i1l2085:
  3309                           
  3310                           ;newmain.c: 351:             if (valueint==0xFFFF)
  3311  05D2  0A51               	incf	processPDU@valueint,w
  3312  05D3  1D03               	skipz
  3313  05D4  2DD9               	goto	u153_21
  3314  05D5  0A52               	incf	processPDU@valueint+1,w
  3315  05D6  1D03               	btfss	3,2
  3316  05D7  2DD9               	goto	u153_21
  3317  05D8  2DDA               	goto	u153_20
  3318  05D9                     u153_21:
  3319  05D9  2DE2               	goto	i1l2089
  3320  05DA                     u153_20:
  3321  05DA                     i1l2087:
  3322                           
  3323                           ;newmain.c: 352:                 Coils[regadd] = 0xFF ;
  3324  05DA  30FF               	movlw	255
  3325  05DB  00FF               	movwf	btemp+1
  3326  05DC  084B               	movf	processPDU@regadd_259,w
  3327  05DD  3EA0               	addlw	(low (_Coils| 0))& (0+255)
  3328  05DE  0084               	movwf	4
  3329  05DF  087F               	movf	btemp+1,w
  3330  05E0  0080               	movwf	0
  3331  05E1  2DEC               	goto	i1l2093
  3332  05E2                     i1l2089:
  3333  05E2  0A52               	incf	processPDU@valueint+1,w
  3334  05E3  0451               	iorwf	processPDU@valueint,w
  3335  05E4  1D03               	btfss	3,2
  3336  05E5  2DE7               	goto	u154_21
  3337  05E6  2DE8               	goto	u154_20
  3338  05E7                     u154_21:
  3339  05E7  2DEC               	goto	i1l2093
  3340  05E8                     u154_20:
  3341  05E8                     i1l2091:
  3342                           
  3343                           ;newmain.c: 354:                 Coils[regadd] = 0x00 ;
  3344  05E8  084B               	movf	processPDU@regadd_259,w
  3345  05E9  3EA0               	addlw	(low (_Coils| 0))& (0+255)
  3346  05EA  0084               	movwf	4
  3347  05EB  0180               	clrf	0
  3348  05EC                     i1l2093:
  3349                           
  3350                           ;newmain.c: 356:             index=6;
  3351  05EC  3006               	movlw	6
  3352  05ED  00FF               	movwf	btemp+1
  3353  05EE  087F               	movf	btemp+1,w
  3354  05EF  00DB               	movwf	processPDU@index
  3355  05F0                     i1l2095:
  3356                           
  3357                           ;newmain.c: 358:             CRC=CRC16 (PDU,index);
  3358  05F0  3006               	movlw	6
  3359  05F1  00FF               	movwf	btemp+1
  3360  05F2  087F               	movf	btemp+1,w
  3361  05F3  00F0               	movwf	CRC16@count
  3362  05F4  3066               	movlw	(low (_PDU| 0))& (0+255)
  3363  05F5  120A  118A  278C  120A  118A  	fcall	_CRC16
  3364  05FA  0871               	movf	?_CRC16+1,w
  3365  05FB  1283               	bcf	3,5	;RP0=0, select bank0
  3366  05FC  1303               	bcf	3,6	;RP1=0, select bank0
  3367  05FD  00E1               	movwf	_CRC+1
  3368  05FE  0870               	movf	?_CRC16,w
  3369  05FF  00E0               	movwf	_CRC
  3370  0600                     i1l2097:
  3371                           
  3372                           ;newmain.c: 359:             PDU[index++] = (unsigned char) (CRC & 0xFF);
  3373  0600  0860               	movf	_CRC,w
  3374  0601  00FF               	movwf	btemp+1
  3375  0602  087F               	movf	btemp+1,w
  3376  0603  00EC               	movwf	_PDU+6
  3377  0604                     i1l2099:
  3378  0604  3001               	movlw	1
  3379  0605  00FF               	movwf	btemp+1
  3380  0606  087F               	movf	btemp+1,w
  3381  0607  07DB               	addwf	processPDU@index,f
  3382  0608                     i1l2101:
  3383                           
  3384                           ;newmain.c: 360:             PDU[index++] = (unsigned char) ((CRC>>8)&0xFF);
  3385  0608  0861               	movf	_CRC+1,w
  3386  0609  00FF               	movwf	btemp+1
  3387  060A  085B               	movf	processPDU@index,w
  3388  060B  3E66               	addlw	(low (_PDU| 0))& (0+255)
  3389  060C  0084               	movwf	4
  3390  060D  087F               	movf	btemp+1,w
  3391  060E  1383               	bcf	3,7	;select IRP bank0
  3392  060F  0080               	movwf	0
  3393  0610                     i1l2103:
  3394  0610  3001               	movlw	1
  3395  0611  00FF               	movwf	btemp+1
  3396  0612  087F               	movf	btemp+1,w
  3397  0613  07DB               	addwf	processPDU@index,f
  3398  0614                     i1l2105:
  3399                           
  3400                           ;newmain.c: 361:             writePDU(index);
  3401  0614  085B               	movf	processPDU@index,w
  3402  0615  120A  158A  2664  120A  118A  	fcall	_writePDU
  3403                           
  3404                           ;newmain.c: 362:         };newmain.c: 363:         break;
  3405  061A  2EB1               	goto	i1l2147
  3406  061B                     i1l2107:
  3407                           
  3408                           ;newmain.c: 366:         {;newmain.c: 367:             unsigned int regadd = PDU[2]<<8 |
      +                           PDU[3];
  3409  061B  0869               	movf	_PDU+3,w
  3410  061C  00A0               	movwf	??_processPDU
  3411  061D  01A1               	clrf	??_processPDU+1
  3412  061E  0868               	movf	_PDU+2,w
  3413  061F  00A2               	movwf	??_processPDU+2
  3414  0620  01A3               	clrf	??_processPDU+3
  3415  0621  0822               	movf	??_processPDU+2,w
  3416  0622  00A3               	movwf	??_processPDU+3
  3417  0623  01A2               	clrf	??_processPDU+2
  3418  0624  0820               	movf	??_processPDU,w
  3419  0625  0422               	iorwf	??_processPDU+2,w
  3420  0626  00AE               	movwf	processPDU@regadd_261
  3421  0627  0821               	movf	??_processPDU+1,w
  3422  0628  0423               	iorwf	??_processPDU+3,w
  3423  0629  00AF               	movwf	processPDU@regadd_261+1
  3424  062A                     i1l2109:
  3425                           
  3426                           ;newmain.c: 368:             regadd--;
  3427  062A  3001               	movlw	1
  3428  062B  02AE               	subwf	processPDU@regadd_261,f
  3429  062C  3000               	movlw	0
  3430  062D  1C03               	skipc
  3431  062E  03AF               	decf	processPDU@regadd_261+1,f
  3432  062F  02AF               	subwf	processPDU@regadd_261+1,f
  3433  0630                     i1l2111:
  3434                           
  3435                           ;newmain.c: 369:             unsigned int valueint = PDU[4]<<8 | PDU[5];
  3436  0630  086B               	movf	_PDU+5,w
  3437  0631  00A0               	movwf	??_processPDU
  3438  0632  01A1               	clrf	??_processPDU+1
  3439  0633  086A               	movf	_PDU+4,w
  3440  0634  00A2               	movwf	??_processPDU+2
  3441  0635  01A3               	clrf	??_processPDU+3
  3442  0636  0822               	movf	??_processPDU+2,w
  3443  0637  00A3               	movwf	??_processPDU+3
  3444  0638  01A2               	clrf	??_processPDU+2
  3445  0639  0820               	movf	??_processPDU,w
  3446  063A  0422               	iorwf	??_processPDU+2,w
  3447  063B  00A4               	movwf	processPDU@valueint_262
  3448  063C  0821               	movf	??_processPDU+1,w
  3449  063D  0423               	iorwf	??_processPDU+3,w
  3450  063E  00A5               	movwf	processPDU@valueint_262+1
  3451  063F                     i1l2119:	
  3452                           ;newmain.c: 371:             if(valueint < 0x0000 || valueint > 0xFFFF)
  3453                           
  3454                           
  3455                           ;newmain.c: 376:             if (regadd < 0||regadd > 3 )
  3456  063F  3000               	movlw	0
  3457  0640  022F               	subwf	processPDU@regadd_261+1,w
  3458  0641  3004               	movlw	4
  3459  0642  1903               	skipnz
  3460  0643  022E               	subwf	processPDU@regadd_261,w
  3461  0644  1C03               	skipc
  3462  0645  2E47               	goto	u155_21
  3463  0646  2E48               	goto	u155_20
  3464  0647                     u155_21:
  3465  0647  2E53               	goto	i1l2127
  3466  0648                     u155_20:
  3467  0648                     i1l2121:
  3468                           
  3469                           ;newmain.c: 377:             {;newmain.c: 378:                 sendexception(PDU[1],0x02
      +                          );
  3470  0648  3002               	movlw	2
  3471  0649  00FF               	movwf	btemp+1
  3472  064A  087F               	movf	btemp+1,w
  3473  064B  00FC               	movwf	sendexception@errorcode
  3474  064C  0867               	movf	_PDU+1,w
  3475  064D  120A  158A  2686  120A  118A  	fcall	_sendexception
  3476  0652  28A6               	goto	i1l1741
  3477  0653                     i1l2127:
  3478                           
  3479                           ;newmain.c: 381:             HoldingRegisters[regadd]=valueint;
  3480  0653  082E               	movf	processPDU@regadd_261,w
  3481  0654  00A0               	movwf	??_processPDU
  3482  0655  0720               	addwf	??_processPDU,w
  3483  0656  3EC0               	addlw	(low (_HoldingRegisters| 0))& (0+255)
  3484  0657  0084               	movwf	4
  3485  0658  0824               	movf	processPDU@valueint_262,w
  3486  0659  0080               	movwf	0
  3487  065A  0A84               	incf	4,f
  3488  065B  0825               	movf	processPDU@valueint_262+1,w
  3489  065C  0080               	movwf	0
  3490  065D                     i1l2129:
  3491                           
  3492                           ;newmain.c: 382:             index = 6;
  3493  065D  3006               	movlw	6
  3494  065E  00FF               	movwf	btemp+1
  3495  065F  087F               	movf	btemp+1,w
  3496  0660  00DB               	movwf	processPDU@index
  3497  0661                     i1l2131:
  3498                           
  3499                           ;newmain.c: 384:             CRC=CRC16 (PDU,index);
  3500  0661  3006               	movlw	6
  3501  0662  00FF               	movwf	btemp+1
  3502  0663  087F               	movf	btemp+1,w
  3503  0664  00F0               	movwf	CRC16@count
  3504  0665  3066               	movlw	(low (_PDU| 0))& (0+255)
  3505  0666  120A  118A  278C  120A  118A  	fcall	_CRC16
  3506  066B  0871               	movf	?_CRC16+1,w
  3507  066C  1283               	bcf	3,5	;RP0=0, select bank0
  3508  066D  1303               	bcf	3,6	;RP1=0, select bank0
  3509  066E  00E1               	movwf	_CRC+1
  3510  066F  0870               	movf	?_CRC16,w
  3511  0670  00E0               	movwf	_CRC
  3512  0671                     i1l2133:
  3513                           
  3514                           ;newmain.c: 385:             PDU[index++] = (unsigned char) (CRC & 0xFF);
  3515  0671  0860               	movf	_CRC,w
  3516  0672  00FF               	movwf	btemp+1
  3517  0673  087F               	movf	btemp+1,w
  3518  0674  00EC               	movwf	_PDU+6
  3519  0675                     i1l2135:
  3520  0675  3001               	movlw	1
  3521  0676  00FF               	movwf	btemp+1
  3522  0677  087F               	movf	btemp+1,w
  3523  0678  07DB               	addwf	processPDU@index,f
  3524  0679                     i1l2137:
  3525                           
  3526                           ;newmain.c: 386:             PDU[index++] = (unsigned char) ((CRC>>8)&0xFF);
  3527  0679  0861               	movf	_CRC+1,w
  3528  067A  00FF               	movwf	btemp+1
  3529  067B  085B               	movf	processPDU@index,w
  3530  067C  3E66               	addlw	(low (_PDU| 0))& (0+255)
  3531  067D  0084               	movwf	4
  3532  067E  087F               	movf	btemp+1,w
  3533  067F  1383               	bcf	3,7	;select IRP bank0
  3534  0680  0080               	movwf	0
  3535  0681                     i1l2139:
  3536  0681  3001               	movlw	1
  3537  0682  00FF               	movwf	btemp+1
  3538  0683  087F               	movf	btemp+1,w
  3539  0684  07DB               	addwf	processPDU@index,f
  3540  0685                     i1l2141:
  3541                           
  3542                           ;newmain.c: 387:             writePDU(index);
  3543  0685  085B               	movf	processPDU@index,w
  3544  0686  120A  158A  2664  120A  118A  	fcall	_writePDU
  3545                           
  3546                           ;newmain.c: 388:         };newmain.c: 389:         break;
  3547  068B  2EB1               	goto	i1l2147
  3548  068C                     i1l2143:
  3549                           
  3550                           ;newmain.c: 392:         {;newmain.c: 393:         sendexception(PDU[1],0x01);
  3551  068C  01FC               	clrf	sendexception@errorcode
  3552  068D  0AFC               	incf	sendexception@errorcode,f
  3553  068E  0867               	movf	_PDU+1,w
  3554  068F  120A  158A  2686  120A  118A  	fcall	_sendexception
  3555                           
  3556                           ;newmain.c: 395:         };newmain.c: 397:        }
  3557  0694  2EB1               	goto	i1l2147
  3558  0695                     i1l2145:
  3559  0695  0867               	movf	_PDU+1,w
  3560  0696  00A0               	movwf	??_processPDU
  3561  0697  01A1               	clrf	??_processPDU+1
  3562                           
  3563                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3564                           ; Switch size 1, requested type "simple"
  3565                           ; Number of cases is 1, Range of values is 0 to 0
  3566                           ; switch strategies available:
  3567                           ; Name         Instructions Cycles
  3568                           ; simple_byte            4     3 (average)
  3569                           ; direct_byte           11     8 (fixed)
  3570                           ; jumptable            260     6 (fixed)
  3571                           ;	Chosen strategy is simple_byte
  3572  0698  0821               	movf	??_processPDU+1,w
  3573  0699  3A00               	xorlw	0	; case 0
  3574  069A  1903               	skipnz
  3575  069B  2E9D               	goto	i1l2221
  3576  069C  2E8C               	goto	i1l2143
  3577  069D                     i1l2221:
  3578                           
  3579                           ; Switch size 1, requested type "simple"
  3580                           ; Number of cases is 6, Range of values is 1 to 6
  3581                           ; switch strategies available:
  3582                           ; Name         Instructions Cycles
  3583                           ; simple_byte           19    10 (average)
  3584                           ; direct_byte           29    11 (fixed)
  3585                           ; jumptable            263     9 (fixed)
  3586                           ;	Chosen strategy is simple_byte
  3587  069D  0820               	movf	??_processPDU,w
  3588  069E  3A01               	xorlw	1	; case 1
  3589  069F  1903               	skipnz
  3590  06A0  2865               	goto	i1l1733
  3591  06A1  3A03               	xorlw	3	; case 2
  3592  06A2  1903               	skipnz
  3593  06A3  2A01               	goto	i1l1837
  3594  06A4  3A01               	xorlw	1	; case 3
  3595  06A5  1903               	skipnz
  3596  06A6  2B9B               	goto	i1l1941
  3597  06A7  3A07               	xorlw	7	; case 4
  3598  06A8  1903               	skipnz
  3599  06A9  2C8E               	goto	i1l2001
  3600  06AA  3A01               	xorlw	1	; case 5
  3601  06AB  1903               	skipnz
  3602  06AC  2D81               	goto	i1l2061
  3603  06AD  3A03               	xorlw	3	; case 6
  3604  06AE  1903               	skipnz
  3605  06AF  2E1B               	goto	i1l2107
  3606  06B0  2E8C               	goto	i1l2143
  3607  06B1                     i1l2147:
  3608                           
  3609                           ;newmain.c: 398:                return 0;
  3610  06B1  3000               	movlw	0
  3611  06B2                     i1l138:
  3612  06B2  0008               	return
  3613  06B3                     __end_of_processPDU:
  3614                           
  3615                           	psect	text5
  3616  0E86                     __ptext5:	
  3617 ;; *************** function _sendexception *****************
  3618 ;; Defined at:
  3619 ;;		line 56 in file "newmain.c"
  3620 ;; Parameters:    Size  Location     Type
  3621 ;;  functioncode    1    wreg     unsigned char 
  3622 ;;  errorcode       1   12[COMMON] unsigned char 
  3623 ;; Auto vars:     Size  Location     Type
  3624 ;;  functioncode    1   13[COMMON] unsigned char 
  3625 ;; Return value:  Size  Location     Type
  3626 ;;                  1    wreg      void 
  3627 ;; Registers used:
  3628 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3629 ;; Tracked objects:
  3630 ;;		On entry : 0/0
  3631 ;;		On exit  : 0/0
  3632 ;;		Unchanged: 0/0
  3633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3634 ;;      Params:         1       0       0       0       0
  3635 ;;      Locals:         1       0       0       0       0
  3636 ;;      Temps:          0       0       0       0       0
  3637 ;;      Totals:         2       0       0       0       0
  3638 ;;Total ram usage:        2 bytes
  3639 ;; Hardware stack levels used:    1
  3640 ;; Hardware stack levels required when called:    2
  3641 ;; This function calls:
  3642 ;;		_CRC16
  3643 ;;		_writePDU
  3644 ;; This function is called by:
  3645 ;;		_processPDU
  3646 ;; This function uses a non-reentrant model
  3647 ;;
  3648                           
  3649                           
  3650                           ;psect for function _sendexception
  3651  0E86                     _sendexception:
  3652                           
  3653                           ;incstack = 0
  3654                           ; Regs used in _sendexception: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3655                           ;sendexception@functioncode stored from wreg
  3656  0E86  00FD               	movwf	sendexception@functioncode
  3657  0E87                     i1l1593:
  3658                           
  3659                           ;newmain.c: 56: void sendexception(unsigned char functioncode, unsigned char errorcode);
      +                          newmain.c: 57: {;newmain.c: 58:     PDU[0] = address;
  3660  0E87  1283               	bcf	3,5	;RP0=0, select bank0
  3661  0E88  1303               	bcf	3,6	;RP1=0, select bank0
  3662  0E89  01E6               	clrf	_PDU
  3663  0E8A  0AE6               	incf	_PDU,f
  3664  0E8B                     i1l1595:
  3665                           
  3666                           ;newmain.c: 59:     PDU[1] = functioncode | 0x80;
  3667  0E8B  087D               	movf	sendexception@functioncode,w
  3668  0E8C  3880               	iorlw	128
  3669  0E8D  00FF               	movwf	btemp+1
  3670  0E8E  087F               	movf	btemp+1,w
  3671  0E8F  00E7               	movwf	_PDU+1
  3672  0E90                     i1l1597:
  3673                           
  3674                           ;newmain.c: 60:     PDU[2] = errorcode;
  3675  0E90  087C               	movf	sendexception@errorcode,w
  3676  0E91  00FF               	movwf	btemp+1
  3677  0E92  087F               	movf	btemp+1,w
  3678  0E93  00E8               	movwf	_PDU+2
  3679  0E94                     i1l1599:
  3680                           
  3681                           ;newmain.c: 61:     CRC=CRC16 (PDU,3);
  3682  0E94  3003               	movlw	3
  3683  0E95  00FF               	movwf	btemp+1
  3684  0E96  087F               	movf	btemp+1,w
  3685  0E97  00F0               	movwf	CRC16@count
  3686  0E98  3066               	movlw	(low (_PDU| 0))& (0+255)
  3687  0E99  120A  118A  278C  120A  158A  	fcall	_CRC16
  3688  0E9E  0871               	movf	?_CRC16+1,w
  3689  0E9F  1283               	bcf	3,5	;RP0=0, select bank0
  3690  0EA0  1303               	bcf	3,6	;RP1=0, select bank0
  3691  0EA1  00E1               	movwf	_CRC+1
  3692  0EA2  0870               	movf	?_CRC16,w
  3693  0EA3  00E0               	movwf	_CRC
  3694  0EA4                     i1l1601:
  3695                           
  3696                           ;newmain.c: 62:     PDU[3] = (unsigned char) (CRC & 0xFF);
  3697  0EA4  0860               	movf	_CRC,w
  3698  0EA5  00FF               	movwf	btemp+1
  3699  0EA6  087F               	movf	btemp+1,w
  3700  0EA7  00E9               	movwf	_PDU+3
  3701  0EA8                     i1l1603:
  3702                           
  3703                           ;newmain.c: 63:     PDU[4] = (unsigned char) ((CRC>>8)&0xFF);
  3704  0EA8  0861               	movf	_CRC+1,w
  3705  0EA9  00FF               	movwf	btemp+1
  3706  0EAA  087F               	movf	btemp+1,w
  3707  0EAB  00EA               	movwf	_PDU+4
  3708  0EAC                     i1l1605:
  3709                           
  3710                           ;newmain.c: 64:     writePDU(5);
  3711  0EAC  3005               	movlw	5
  3712  0EAD  120A  158A  2664  120A  158A  	fcall	_writePDU
  3713  0EB2                     i1l121:
  3714  0EB2  0008               	return
  3715  0EB3                     __end_of_sendexception:
  3716                           
  3717                           	psect	text6
  3718  0E64                     __ptext6:	
  3719 ;; *************** function _writePDU *****************
  3720 ;; Defined at:
  3721 ;;		line 50 in file "newmain.c"
  3722 ;; Parameters:    Size  Location     Type
  3723 ;;  count           1    wreg     unsigned char 
  3724 ;; Auto vars:     Size  Location     Type
  3725 ;;  count           1    2[COMMON] unsigned char 
  3726 ;;  i               2    3[COMMON] int 
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      void 
  3729 ;; Registers used:
  3730 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3736 ;;      Params:         0       0       0       0       0
  3737 ;;      Locals:         3       0       0       0       0
  3738 ;;      Temps:          1       0       0       0       0
  3739 ;;      Totals:         4       0       0       0       0
  3740 ;;Total ram usage:        4 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; Hardware stack levels required when called:    1
  3743 ;; This function calls:
  3744 ;;		_uart_write
  3745 ;; This function is called by:
  3746 ;;		_sendexception
  3747 ;;		_processPDU
  3748 ;; This function uses a non-reentrant model
  3749 ;;
  3750                           
  3751                           
  3752                           ;psect for function _writePDU
  3753  0E64                     _writePDU:
  3754                           
  3755                           ;incstack = 0
  3756                           ; Regs used in _writePDU: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3757                           ;writePDU@count stored from wreg
  3758  0E64  00F2               	movwf	writePDU@count
  3759  0E65                     i1l1559:
  3760                           
  3761                           ;newmain.c: 50: void writePDU(char count);newmain.c: 51: {;newmain.c: 52:     for (int i
      +                          =0; i<count;i++)
  3762  0E65  01F3               	clrf	writePDU@i
  3763  0E66  01F4               	clrf	writePDU@i+1
  3764  0E67  2E78               	goto	i1l1565
  3765  0E68                     i1l1561:
  3766                           
  3767                           ;newmain.c: 53:     uart_write (PDU[i]);
  3768  0E68  0873               	movf	writePDU@i,w
  3769  0E69  3E66               	addlw	(low (_PDU| 0))& (0+255)
  3770  0E6A  0084               	movwf	4
  3771  0E6B  1383               	bcf	3,7	;select IRP bank0
  3772  0E6C  0800               	movf	0,w
  3773  0E6D  120A  118A  27F3  120A  158A  	fcall	_uart_write
  3774  0E72                     i1l1563:
  3775  0E72  3001               	movlw	1
  3776  0E73  07F3               	addwf	writePDU@i,f
  3777  0E74  1803               	skipnc
  3778  0E75  0AF4               	incf	writePDU@i+1,f
  3779  0E76  3000               	movlw	0
  3780  0E77  07F4               	addwf	writePDU@i+1,f
  3781  0E78                     i1l1565:
  3782  0E78  0874               	movf	writePDU@i+1,w
  3783  0E79  3A80               	xorlw	128
  3784  0E7A  00F1               	movwf	??_writePDU
  3785  0E7B  3080               	movlw	128
  3786  0E7C  0271               	subwf	??_writePDU,w
  3787  0E7D  1D03               	skipz
  3788  0E7E  2E81               	goto	u85_25
  3789  0E7F  0872               	movf	writePDU@count,w
  3790  0E80  0273               	subwf	writePDU@i,w
  3791  0E81                     u85_25:
  3792  0E81  1C03               	skipc
  3793  0E82  2E84               	goto	u85_21
  3794  0E83  2E85               	goto	u85_20
  3795  0E84                     u85_21:
  3796  0E84  2E68               	goto	i1l1561
  3797  0E85                     u85_20:
  3798  0E85                     i1l118:
  3799  0E85  0008               	return
  3800  0E86                     __end_of_writePDU:
  3801                           
  3802                           	psect	text7
  3803  07F3                     __ptext7:	
  3804 ;; *************** function _uart_write *****************
  3805 ;; Defined at:
  3806 ;;		line 46 in file "./uart.h"
  3807 ;; Parameters:    Size  Location     Type
  3808 ;;  data            1    wreg     unsigned char 
  3809 ;; Auto vars:     Size  Location     Type
  3810 ;;  data            1    0[COMMON] unsigned char 
  3811 ;; Return value:  Size  Location     Type
  3812 ;;                  1    wreg      void 
  3813 ;; Registers used:
  3814 ;;		wreg
  3815 ;; Tracked objects:
  3816 ;;		On entry : 0/0
  3817 ;;		On exit  : 0/0
  3818 ;;		Unchanged: 0/0
  3819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3820 ;;      Params:         0       0       0       0       0
  3821 ;;      Locals:         1       0       0       0       0
  3822 ;;      Temps:          0       0       0       0       0
  3823 ;;      Totals:         1       0       0       0       0
  3824 ;;Total ram usage:        1 bytes
  3825 ;; Hardware stack levels used:    1
  3826 ;; This function calls:
  3827 ;;		Nothing
  3828 ;; This function is called by:
  3829 ;;		_writePDU
  3830 ;;		_uart_writetext
  3831 ;; This function uses a non-reentrant model
  3832 ;;
  3833                           
  3834                           
  3835                           ;psect for function _uart_write
  3836  07F3                     _uart_write:
  3837                           
  3838                           ;incstack = 0
  3839                           ; Regs used in _uart_write: [wreg]
  3840                           ;uart_write@data stored from wreg
  3841  07F3  00F0               	movwf	uart_write@data
  3842  07F4                     i1l1529:
  3843  07F4                     i1l49:	
  3844                           ;./uart.h: 47:     while(!TRMT);
  3845                           
  3846  07F4  1683               	bsf	3,5	;RP0=1, select bank1
  3847  07F5  1303               	bcf	3,6	;RP1=0, select bank1
  3848  07F6  1C98               	btfss	24,1	;volatile
  3849  07F7  2FF9               	goto	u81_21
  3850  07F8  2FFA               	goto	u81_20
  3851  07F9                     u81_21:
  3852  07F9  2FF4               	goto	i1l49
  3853  07FA                     u81_20:
  3854  07FA                     i1l1531:
  3855                           
  3856                           ;./uart.h: 49:     TXREG=data;
  3857  07FA  0870               	movf	uart_write@data,w
  3858  07FB  1283               	bcf	3,5	;RP0=0, select bank0
  3859  07FC  1303               	bcf	3,6	;RP1=0, select bank0
  3860  07FD  0099               	movwf	25	;volatile
  3861  07FE                     i1l52:
  3862  07FE  0008               	return
  3863  07FF                     __end_of_uart_write:
  3864                           
  3865                           	psect	text8
  3866  078C                     __ptext8:	
  3867 ;; *************** function _CRC16 *****************
  3868 ;; Defined at:
  3869 ;;		line 14 in file "./CRC16.h"
  3870 ;; Parameters:    Size  Location     Type
  3871 ;;  PDU             1    wreg     PTR unsigned char 
  3872 ;;		 -> PDU(10), 
  3873 ;;  count           1    0[COMMON] unsigned char 
  3874 ;; Auto vars:     Size  Location     Type
  3875 ;;  PDU             1    9[COMMON] PTR unsigned char 
  3876 ;;		 -> PDU(10), 
  3877 ;;  j               2    7[COMMON] int 
  3878 ;;  i               2    5[COMMON] int 
  3879 ;;  reg_crc         2   10[COMMON] unsigned int 
  3880 ;; Return value:  Size  Location     Type
  3881 ;;                  2    0[COMMON] unsigned int 
  3882 ;; Registers used:
  3883 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3884 ;; Tracked objects:
  3885 ;;		On entry : 0/0
  3886 ;;		On exit  : 0/0
  3887 ;;		Unchanged: 0/0
  3888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3889 ;;      Params:         2       0       0       0       0
  3890 ;;      Locals:         7       0       0       0       0
  3891 ;;      Temps:          3       0       0       0       0
  3892 ;;      Totals:        12       0       0       0       0
  3893 ;;Total ram usage:       12 bytes
  3894 ;; Hardware stack levels used:    1
  3895 ;; This function calls:
  3896 ;;		Nothing
  3897 ;; This function is called by:
  3898 ;;		_sendexception
  3899 ;;		_processPDU
  3900 ;; This function uses a non-reentrant model
  3901 ;;
  3902                           
  3903                           
  3904                           ;psect for function _CRC16
  3905  078C                     _CRC16:
  3906                           
  3907                           ;incstack = 0
  3908                           ; Regs used in _CRC16: [wreg-fsr0h+status,2+status,0+btemp+1]
  3909                           ;CRC16@PDU stored from wreg
  3910  078C  00F9               	movwf	CRC16@PDU
  3911  078D                     i1l1533:
  3912                           
  3913                           ;./CRC16.h: 14: unsigned int CRC16 (unsigned char PDU[],char count );./CRC16.h: 15: {;./
      +                          CRC16.h: 17:     unsigned int reg_crc = 0xFFFF;
  3914  078D  30FF               	movlw	255
  3915  078E  00FA               	movwf	CRC16@reg_crc
  3916  078F  30FF               	movlw	255
  3917  0790  00FB               	movwf	CRC16@reg_crc+1
  3918  0791                     i1l1535:
  3919                           
  3920                           ;./CRC16.h: 19:     for (int i=0 ; i < (count-2) ;i++)
  3921  0791  01F5               	clrf	CRC16@i
  3922  0792  01F6               	clrf	CRC16@i+1
  3923  0793  2FD9               	goto	i1l85
  3924  0794                     i1l1537:
  3925                           
  3926                           ;./CRC16.h: 20:     {;./CRC16.h: 21:         reg_crc ^= PDU[i];
  3927  0794  0875               	movf	CRC16@i,w
  3928  0795  0779               	addwf	CRC16@PDU,w
  3929  0796  00F2               	movwf	??_CRC16
  3930  0797  0872               	movf	??_CRC16,w
  3931  0798  0084               	movwf	4
  3932  0799  1383               	bcf	3,7	;select IRP bank0
  3933  079A  0800               	movf	0,w
  3934  079B  00F3               	movwf	??_CRC16+1
  3935  079C  01F4               	clrf	??_CRC16+2
  3936  079D  0873               	movf	??_CRC16+1,w
  3937  079E  06FA               	xorwf	CRC16@reg_crc,f
  3938  079F  0874               	movf	??_CRC16+2,w
  3939  07A0  06FB               	xorwf	CRC16@reg_crc+1,f
  3940  07A1                     i1l1539:
  3941                           
  3942                           ;./CRC16.h: 22:         for (int j=0 ; j<8 ;j++)
  3943  07A1  01F7               	clrf	CRC16@j
  3944  07A2  01F8               	clrf	CRC16@j+1
  3945  07A3                     i1l87:
  3946                           
  3947                           ;./CRC16.h: 23:         {;./CRC16.h: 24:             if((reg_crc&0x01)==1)
  3948  07A3  1C7A               	btfss	CRC16@reg_crc,0
  3949  07A4  2FA6               	goto	u82_21
  3950  07A5  2FA7               	goto	u82_20
  3951  07A6                     u82_21:
  3952  07A6  2FB5               	goto	i1l1547
  3953  07A7                     u82_20:
  3954  07A7                     i1l1545:
  3955                           
  3956                           ;./CRC16.h: 25:             {;./CRC16.h: 26:                 reg_crc= (unsigned int) ((r
      +                          eg_crc>>1)^0xA001);
  3957  07A7  087B               	movf	CRC16@reg_crc+1,w
  3958  07A8  00F3               	movwf	??_CRC16+1
  3959  07A9  087A               	movf	CRC16@reg_crc,w
  3960  07AA  00F2               	movwf	??_CRC16
  3961  07AB  1003               	clrc
  3962  07AC  0CF3               	rrf	??_CRC16+1,f
  3963  07AD  0CF2               	rrf	??_CRC16,f
  3964  07AE  3001               	movlw	1
  3965  07AF  0672               	xorwf	??_CRC16,w
  3966  07B0  00FA               	movwf	CRC16@reg_crc
  3967  07B1  30A0               	movlw	160
  3968  07B2  0673               	xorwf	??_CRC16+1,w
  3969  07B3  00FB               	movwf	CRC16@reg_crc+1
  3970                           
  3971                           ;./CRC16.h: 27:             }
  3972  07B4  2FC0               	goto	i1l1549
  3973  07B5                     i1l1547:
  3974                           
  3975                           ;./CRC16.h: 29:             {;./CRC16.h: 30:                 reg_crc= (unsigned int) (re
      +                          g_crc>>1);
  3976  07B5  087B               	movf	CRC16@reg_crc+1,w
  3977  07B6  00F3               	movwf	??_CRC16+1
  3978  07B7  087A               	movf	CRC16@reg_crc,w
  3979  07B8  00F2               	movwf	??_CRC16
  3980  07B9  1003               	clrc
  3981  07BA  0CF3               	rrf	??_CRC16+1,f
  3982  07BB  0CF2               	rrf	??_CRC16,f
  3983  07BC  0872               	movf	??_CRC16,w
  3984  07BD  00FA               	movwf	CRC16@reg_crc
  3985  07BE  0873               	movf	??_CRC16+1,w
  3986  07BF  00FB               	movwf	CRC16@reg_crc+1
  3987  07C0                     i1l1549:
  3988                           
  3989                           ;./CRC16.h: 34:         }
  3990  07C0  3001               	movlw	1
  3991  07C1  07F7               	addwf	CRC16@j,f
  3992  07C2  1803               	skipnc
  3993  07C3  0AF8               	incf	CRC16@j+1,f
  3994  07C4  3000               	movlw	0
  3995  07C5  07F8               	addwf	CRC16@j+1,f
  3996  07C6                     i1l1551:
  3997  07C6  0878               	movf	CRC16@j+1,w
  3998  07C7  3A80               	xorlw	128
  3999  07C8  00FF               	movwf	btemp+1
  4000  07C9  3080               	movlw	128
  4001  07CA  027F               	subwf	btemp+1,w
  4002  07CB  1D03               	skipz
  4003  07CC  2FCF               	goto	u83_25
  4004  07CD  3008               	movlw	8
  4005  07CE  0277               	subwf	CRC16@j,w
  4006  07CF                     u83_25:
  4007  07CF  1C03               	skipc
  4008  07D0  2FD2               	goto	u83_21
  4009  07D1  2FD3               	goto	u83_20
  4010  07D2                     u83_21:
  4011  07D2  2FA3               	goto	i1l87
  4012  07D3                     u83_20:
  4013  07D3                     i1l1553:
  4014                           
  4015                           ;./CRC16.h: 35:     }
  4016  07D3  3001               	movlw	1
  4017  07D4  07F5               	addwf	CRC16@i,f
  4018  07D5  1803               	skipnc
  4019  07D6  0AF6               	incf	CRC16@i+1,f
  4020  07D7  3000               	movlw	0
  4021  07D8  07F6               	addwf	CRC16@i+1,f
  4022  07D9                     i1l85:
  4023  07D9  0870               	movf	CRC16@count,w
  4024  07DA  3EFE               	addlw	254
  4025  07DB  00F2               	movwf	??_CRC16
  4026  07DC  30FF               	movlw	255
  4027  07DD  1803               	skipnc
  4028  07DE  3000               	movlw	0
  4029  07DF  00F3               	movwf	??_CRC16+1
  4030  07E0  0876               	movf	CRC16@i+1,w
  4031  07E1  3A80               	xorlw	128
  4032  07E2  00F4               	movwf	??_CRC16+2
  4033  07E3  0873               	movf	??_CRC16+1,w
  4034  07E4  3A80               	xorlw	128
  4035  07E5  0274               	subwf	??_CRC16+2,w
  4036  07E6  1D03               	skipz
  4037  07E7  2FEA               	goto	u84_25
  4038  07E8  0872               	movf	??_CRC16,w
  4039  07E9  0275               	subwf	CRC16@i,w
  4040  07EA                     u84_25:
  4041  07EA  1C03               	skipc
  4042  07EB  2FED               	goto	u84_21
  4043  07EC  2FEE               	goto	u84_20
  4044  07ED                     u84_21:
  4045  07ED  2F94               	goto	i1l1537
  4046  07EE                     u84_20:
  4047  07EE                     i1l1555:
  4048                           
  4049                           ;./CRC16.h: 37:     return reg_crc;
  4050  07EE  087B               	movf	CRC16@reg_crc+1,w
  4051  07EF  00F1               	movwf	?_CRC16+1
  4052  07F0  087A               	movf	CRC16@reg_crc,w
  4053  07F1  00F0               	movwf	?_CRC16
  4054  07F2                     i1l92:
  4055  07F2  0008               	return
  4056  07F3                     __end_of_CRC16:
  4057                           
  4058                           	psect	text9
  4059  0F15                     __ptext9:	
  4060 ;; *************** function _getPDU *****************
  4061 ;; Defined at:
  4062 ;;		line 67 in file "newmain.c"
  4063 ;; Parameters:    Size  Location     Type
  4064 ;;		None
  4065 ;; Auto vars:     Size  Location     Type
  4066 ;;  i               1    7[COMMON] unsigned char 
  4067 ;;  nineth          1    6[COMMON] unsigned char 
  4068 ;; Return value:  Size  Location     Type
  4069 ;;                  1    wreg      unsigned char 
  4070 ;; Registers used:
  4071 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4072 ;; Tracked objects:
  4073 ;;		On entry : 0/0
  4074 ;;		On exit  : 0/0
  4075 ;;		Unchanged: 0/0
  4076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4077 ;;      Params:         0       0       0       0       0
  4078 ;;      Locals:         2       0       0       0       0
  4079 ;;      Temps:          0       0       0       0       0
  4080 ;;      Totals:         2       0       0       0       0
  4081 ;;Total ram usage:        2 bytes
  4082 ;; Hardware stack levels used:    1
  4083 ;; Hardware stack levels required when called:    1
  4084 ;; This function calls:
  4085 ;;		_even_parity
  4086 ;;		_uart_dataready
  4087 ;; This function is called by:
  4088 ;;		_myISR
  4089 ;; This function uses a non-reentrant model
  4090 ;;
  4091                           
  4092                           
  4093                           ;psect for function _getPDU
  4094  0F15                     _getPDU:
  4095  0F15                     i1l1677:	
  4096                           ;incstack = 0
  4097                           ; Regs used in _getPDU: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4098                           
  4099                           
  4100                           ;newmain.c: 69:     unsigned char i = 0;
  4101  0F15  01F7               	clrf	getPDU@i
  4102  0F16                     i1l1679:
  4103  0F16  1283               	bcf	3,5	;RP0=0, select bank0
  4104  0F17  1303               	bcf	3,6	;RP1=0, select bank0
  4105  0F18  0818               	movf	24,w	;volatile
  4106  0F19                     i1l1681:
  4107                           
  4108                           ;newmain.c: 72:     PDU[i]=RCREG;
  4109  0F19  081A               	movf	26,w	;volatile
  4110  0F1A  00FF               	movwf	btemp+1
  4111  0F1B  087F               	movf	btemp+1,w
  4112  0F1C  00E6               	movwf	_PDU
  4113                           
  4114                           ;newmain.c: 74:         while(i<=6)
  4115  0F1D  2F5C               	goto	i1l1709
  4116  0F1E                     i1l1683:
  4117                           
  4118                           ;newmain.c: 75:         {;newmain.c: 76:             TMR0 = 134;
  4119  0F1E  3086               	movlw	134
  4120  0F1F  1283               	bcf	3,5	;RP0=0, select bank0
  4121  0F20  1303               	bcf	3,6	;RP1=0, select bank0
  4122  0F21  0081               	movwf	1	;volatile
  4123  0F22                     i1l1685:
  4124                           
  4125                           ;newmain.c: 78:             {;newmain.c: 79:                 if(uart_dataready())
  4126  0F22  120A  158A  2639  120A  158A  	fcall	_uart_dataready
  4127  0F27  3A00               	xorlw	0
  4128  0F28  1903               	skipnz
  4129  0F29  2F2B               	goto	u109_21
  4130  0F2A  2F2C               	goto	u109_20
  4131  0F2B                     u109_21:
  4132  0F2B  2F31               	goto	i1l127
  4133  0F2C                     u109_20:
  4134  0F2C                     i1l1687:
  4135                           
  4136                           ;newmain.c: 80:                 {;newmain.c: 81:                     i++;
  4137  0F2C  3001               	movlw	1
  4138  0F2D  00FF               	movwf	btemp+1
  4139  0F2E  087F               	movf	btemp+1,w
  4140  0F2F  07F7               	addwf	getPDU@i,f
  4141                           
  4142                           ;newmain.c: 82:                     break;
  4143  0F30  2F38               	goto	i1l1697
  4144  0F31                     i1l127:	
  4145                           ;newmain.c: 84:                 else if (INTCONbits.TMR0IF)
  4146                           
  4147  0F31  1D0B               	btfss	11,2	;volatile
  4148  0F32  2F34               	goto	u110_21
  4149  0F33  2F35               	goto	u110_20
  4150  0F34                     u110_21:
  4151  0F34  2F22               	goto	i1l1685
  4152  0F35                     u110_20:
  4153  0F35                     i1l1691:
  4154                           
  4155                           ;newmain.c: 85:                 {;newmain.c: 86:                     INTCONbits.TMR0IF=0
      +                          ;
  4156  0F35  110B               	bcf	11,2	;volatile
  4157  0F36                     i1l1693:
  4158                           
  4159                           ;newmain.c: 87:                     return i;
  4160  0F36  0877               	movf	getPDU@i,w
  4161  0F37  2F62               	goto	i1l131
  4162  0F38                     i1l1697:
  4163                           
  4164                           ;newmain.c: 91:             nineth = RCSTAbits.RX9D;
  4165  0F38  3000               	movlw	0
  4166  0F39  1283               	bcf	3,5	;RP0=0, select bank0
  4167  0F3A  1303               	bcf	3,6	;RP1=0, select bank0
  4168  0F3B  1818               	btfsc	24,0	;volatile
  4169  0F3C  3001               	movlw	1
  4170  0F3D  00F6               	movwf	getPDU@nineth
  4171  0F3E                     i1l1699:
  4172                           
  4173                           ;newmain.c: 92:             PDU [i] =RCREG;
  4174  0F3E  081A               	movf	26,w	;volatile
  4175  0F3F  00FF               	movwf	btemp+1
  4176  0F40  0877               	movf	getPDU@i,w
  4177  0F41  3E66               	addlw	(low (_PDU| 0))& (0+255)
  4178  0F42  0084               	movwf	4
  4179  0F43  087F               	movf	btemp+1,w
  4180  0F44  1383               	bcf	3,7	;select IRP bank0
  4181  0F45  0080               	movwf	0
  4182  0F46                     i1l1701:
  4183                           
  4184                           ;newmain.c: 93:             if (nineth != even_parity(PDU[i]))
  4185  0F46  0877               	movf	getPDU@i,w
  4186  0F47  3E66               	addlw	(low (_PDU| 0))& (0+255)
  4187  0F48  0084               	movwf	4
  4188  0F49  0800               	movf	0,w
  4189  0F4A  120A  158A  26E0  120A  158A  	fcall	_even_parity
  4190  0F4F  0676               	xorwf	getPDU@nineth,w
  4191  0F50  1903               	skipnz
  4192  0F51  2F53               	goto	u111_21
  4193  0F52  2F54               	goto	u111_20
  4194  0F53                     u111_21:
  4195  0F53  2F5C               	goto	i1l1709
  4196  0F54                     u111_20:
  4197  0F54                     i1l1703:
  4198                           
  4199                           ;newmain.c: 94:             {;newmain.c: 95:              status = 5;
  4200  0F54  3005               	movlw	5
  4201  0F55  00FF               	movwf	btemp+1
  4202  0F56  087F               	movf	btemp+1,w
  4203  0F57  1283               	bcf	3,5	;RP0=0, select bank0
  4204  0F58  1303               	bcf	3,6	;RP1=0, select bank0
  4205  0F59  00E4               	movwf	_status
  4206  0F5A                     i1l1705:
  4207                           
  4208                           ;newmain.c: 96:              return 0;
  4209  0F5A  3000               	movlw	0
  4210  0F5B  2F62               	goto	i1l131
  4211  0F5C                     i1l1709:
  4212                           
  4213                           ;newmain.c: 74:         while(i<=6)
  4214  0F5C  3007               	movlw	7
  4215  0F5D  0277               	subwf	getPDU@i,w
  4216  0F5E  1C03               	skipc
  4217  0F5F  2F61               	goto	u112_21
  4218  0F60  2F62               	goto	u112_20
  4219  0F61                     u112_21:
  4220  0F61  2F1E               	goto	i1l1683
  4221  0F62                     u112_20:
  4222  0F62                     i1l131:
  4223  0F62  0008               	return
  4224  0F63                     __end_of_getPDU:
  4225                           
  4226                           	psect	text10
  4227  0E39                     __ptext10:	
  4228 ;; *************** function _uart_dataready *****************
  4229 ;; Defined at:
  4230 ;;		line 64 in file "./uart.h"
  4231 ;; Parameters:    Size  Location     Type
  4232 ;;		None
  4233 ;; Auto vars:     Size  Location     Type
  4234 ;;		None
  4235 ;; Return value:  Size  Location     Type
  4236 ;;                  1    wreg      unsigned char 
  4237 ;; Registers used:
  4238 ;;		wreg
  4239 ;; Tracked objects:
  4240 ;;		On entry : 0/0
  4241 ;;		On exit  : 0/0
  4242 ;;		Unchanged: 0/0
  4243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4244 ;;      Params:         0       0       0       0       0
  4245 ;;      Locals:         0       0       0       0       0
  4246 ;;      Temps:          0       0       0       0       0
  4247 ;;      Totals:         0       0       0       0       0
  4248 ;;Total ram usage:        0 bytes
  4249 ;; Hardware stack levels used:    1
  4250 ;; This function calls:
  4251 ;;		Nothing
  4252 ;; This function is called by:
  4253 ;;		_getPDU
  4254 ;; This function uses a non-reentrant model
  4255 ;;
  4256                           
  4257                           
  4258                           ;psect for function _uart_dataready
  4259  0E39                     _uart_dataready:
  4260  0E39                     i1l1567:	
  4261                           ;incstack = 0
  4262                           ; Regs used in _uart_dataready: [wreg]
  4263                           
  4264                           
  4265                           ;./uart.h: 65:     return RCIF;
  4266  0E39  3000               	movlw	0
  4267  0E3A  1283               	bcf	3,5	;RP0=0, select bank0
  4268  0E3B  1303               	bcf	3,6	;RP1=0, select bank0
  4269  0E3C  1A8C               	btfsc	12,5	;volatile
  4270  0E3D  3001               	movlw	1
  4271  0E3E                     i1l64:
  4272  0E3E  0008               	return
  4273  0E3F                     __end_of_uart_dataready:
  4274                           
  4275                           	psect	text11
  4276  0EE0                     __ptext11:	
  4277 ;; *************** function _even_parity *****************
  4278 ;; Defined at:
  4279 ;;		line 81 in file "./uart.h"
  4280 ;; Parameters:    Size  Location     Type
  4281 ;;  chbyte          1    wreg     unsigned char 
  4282 ;; Auto vars:     Size  Location     Type
  4283 ;;  chbyte          1    1[COMMON] unsigned char 
  4284 ;;  i               2    2[COMMON] int 
  4285 ;;  tool            1    5[COMMON] unsigned char 
  4286 ;;  parity          1    4[COMMON] unsigned char 
  4287 ;; Return value:  Size  Location     Type
  4288 ;;                  1    wreg      unsigned char 
  4289 ;; Registers used:
  4290 ;;		wreg, status,2, status,0, btemp+1
  4291 ;; Tracked objects:
  4292 ;;		On entry : 0/0
  4293 ;;		On exit  : 0/0
  4294 ;;		Unchanged: 0/0
  4295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4296 ;;      Params:         0       0       0       0       0
  4297 ;;      Locals:         5       0       0       0       0
  4298 ;;      Temps:          1       0       0       0       0
  4299 ;;      Totals:         6       0       0       0       0
  4300 ;;Total ram usage:        6 bytes
  4301 ;; Hardware stack levels used:    1
  4302 ;; This function calls:
  4303 ;;		Nothing
  4304 ;; This function is called by:
  4305 ;;		_getPDU
  4306 ;; This function uses a non-reentrant model
  4307 ;;
  4308                           
  4309                           
  4310                           ;psect for function _even_parity
  4311  0EE0                     _even_parity:
  4312                           
  4313                           ;incstack = 0
  4314                           ; Regs used in _even_parity: [wreg+status,2+status,0+btemp+1]
  4315                           ;even_parity@chbyte stored from wreg
  4316  0EE0  00F1               	movwf	even_parity@chbyte
  4317  0EE1                     i1l1571:
  4318                           
  4319                           ;./uart.h: 81: unsigned char even_parity(unsigned char chbyte );./uart.h: 82: {;./uart.h
      +                          : 83:     unsigned char parity = 0;
  4320  0EE1  01F4               	clrf	even_parity@parity
  4321  0EE2                     i1l1573:
  4322                           
  4323                           ;./uart.h: 84:     unsigned char tool = 0b00000001;
  4324  0EE2  01F5               	clrf	even_parity@tool
  4325  0EE3  0AF5               	incf	even_parity@tool,f
  4326                           
  4327                           ;./uart.h: 85:     for (int i=0 ; i<=7 ; i++){
  4328  0EE4  01F2               	clrf	even_parity@i
  4329  0EE5  01F3               	clrf	even_parity@i+1
  4330  0EE6                     i1l1579:
  4331                           
  4332                           ;./uart.h: 86:         if (tool&&chbyte){
  4333  0EE6  0875               	movf	even_parity@tool,w
  4334  0EE7  1903               	btfsc	3,2
  4335  0EE8  2EEA               	goto	u86_21
  4336  0EE9  2EEB               	goto	u86_20
  4337  0EEA                     u86_21:
  4338  0EEA  2EFA               	goto	i1l81
  4339  0EEB                     u86_20:
  4340  0EEB                     i1l1581:
  4341  0EEB  0871               	movf	even_parity@chbyte,w
  4342  0EEC  1903               	btfsc	3,2
  4343  0EED  2EEF               	goto	u87_21
  4344  0EEE  2EF0               	goto	u87_20
  4345  0EEF                     u87_21:
  4346  0EEF  2EFA               	goto	i1l81
  4347  0EF0                     u87_20:
  4348  0EF0                     i1l1583:
  4349                           
  4350                           ;./uart.h: 87:             parity=!parity;
  4351  0EF0  0874               	movf	even_parity@parity,w
  4352  0EF1  1903               	btfsc	3,2
  4353  0EF2  2EF4               	goto	u88_21
  4354  0EF3  2EF6               	goto	u88_20
  4355  0EF4                     u88_21:
  4356  0EF4  3001               	movlw	1
  4357  0EF5  2EF7               	goto	u89_20
  4358  0EF6                     u88_20:
  4359  0EF6  3000               	movlw	0
  4360  0EF7                     u89_20:
  4361  0EF7  00FF               	movwf	btemp+1
  4362  0EF8  087F               	movf	btemp+1,w
  4363  0EF9  00F4               	movwf	even_parity@parity
  4364  0EFA                     i1l81:	
  4365                           ;./uart.h: 88:         }
  4366                           
  4367                           
  4368                           ;./uart.h: 89:         tool = tool << 1;
  4369  0EFA  0875               	movf	even_parity@tool,w
  4370  0EFB  00F0               	movwf	??_even_parity
  4371  0EFC  0770               	addwf	??_even_parity,w
  4372  0EFD  00FF               	movwf	btemp+1
  4373  0EFE  087F               	movf	btemp+1,w
  4374  0EFF  00F5               	movwf	even_parity@tool
  4375  0F00                     i1l1585:
  4376                           
  4377                           ;./uart.h: 91:     }
  4378  0F00  3001               	movlw	1
  4379  0F01  07F2               	addwf	even_parity@i,f
  4380  0F02  1803               	skipnc
  4381  0F03  0AF3               	incf	even_parity@i+1,f
  4382  0F04  3000               	movlw	0
  4383  0F05  07F3               	addwf	even_parity@i+1,f
  4384  0F06                     i1l1587:
  4385  0F06  0873               	movf	even_parity@i+1,w
  4386  0F07  3A80               	xorlw	128
  4387  0F08  00FF               	movwf	btemp+1
  4388  0F09  3080               	movlw	128
  4389  0F0A  027F               	subwf	btemp+1,w
  4390  0F0B  1D03               	skipz
  4391  0F0C  2F0F               	goto	u90_25
  4392  0F0D  3008               	movlw	8
  4393  0F0E  0272               	subwf	even_parity@i,w
  4394  0F0F                     u90_25:
  4395  0F0F  1C03               	skipc
  4396  0F10  2F12               	goto	u90_21
  4397  0F11  2F13               	goto	u90_20
  4398  0F12                     u90_21:
  4399  0F12  2EE6               	goto	i1l1579
  4400  0F13                     u90_20:
  4401  0F13                     i1l1589:
  4402                           
  4403                           ;./uart.h: 92:     return parity;
  4404  0F13  0874               	movf	even_parity@parity,w
  4405  0F14                     i1l82:
  4406  0F14  0008               	return
  4407  0F15                     __end_of_even_parity:
  4408  007E                     btemp	set	126	;btemp
  4409  007E                     wtemp0	set	126
  4410                           
  4411                           	psect	config
  4412                           
  4413                           ;Config register CONFIG @ 0x2007
  4414                           ;	Oscillator Selection bits
  4415                           ;	FOSC = HS, HS oscillator
  4416                           ;	Watchdog Timer Enable bit
  4417                           ;	WDTE = OFF, WDT disabled
  4418                           ;	Power-up Timer Enable bit
  4419                           ;	PWRTE = OFF, PWRT disabled
  4420                           ;	Brown-out Reset Enable bit
  4421                           ;	BOREN = ON, BOR enabled
  4422                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  4423                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  4424                           ;	Data EEPROM Memory Code Protection bit
  4425                           ;	CPD = OFF, Data EEPROM code protection off
  4426                           ;	Flash Program Memory Write Enable bits
  4427                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  4428                           ;	In-Circuit Debugger Mode bit
  4429                           ;	DEBUG = 0x1, unprogrammed default
  4430                           ;	Flash Program Memory Code Protection bit
  4431                           ;	CP = OFF, Code protection off
  4432  2007                     	org	8199
  4433  2007  3F7A               	dw	16250

Data Sizes:
    Strings     0
    Constant    1
    Data        0
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     64      80
    BANK1            80     33      75
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    CRC16@PDU	PTR unsigned char  size(1) Largest target is 10
		 -> PDU(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _myISR in COMMON

    _processPDU->_sendexception
    _sendexception->_CRC16
    _writePDU->_uart_write
    _getPDU->_even_parity

Critical Paths under _main in BANK0

    None.

Critical Paths under _myISR in BANK0

    _myISR->_processPDU

Critical Paths under _main in BANK1

    _main->_uart_init
    _uart_init->___aldiv

Critical Paths under _myISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _myISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _myISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     836
                          _uart_init
 ---------------------------------------------------------------------------------
 (1) _uart_init                                           18    14      4     836
                                             15 BANK1     18    14      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     604
                                              0 BANK1     15     7      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _myISR                                                4     4      0    6763
                                             60 BANK0      4     4      0
                             _getPDU
                         _processPDU
 ---------------------------------------------------------------------------------
 (4) _processPDU                                          60    60      0    6467
                                              0 BANK0     60    60      0
                              _CRC16
                      _sendexception
                           _writePDU
 ---------------------------------------------------------------------------------
 (5) _sendexception                                        2     1      1    2222
                                             12 COMMON     2     1      1
                              _CRC16
                           _writePDU
 ---------------------------------------------------------------------------------
 (5) _writePDU                                             4     4      0      90
                                              1 COMMON     4     4      0
                         _uart_write
 ---------------------------------------------------------------------------------
 (6) _uart_write                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (6) _CRC16                                               12    10      2    1100
                                              0 COMMON    12    10      2
 ---------------------------------------------------------------------------------
 (4) _getPDU                                               2     2      0     296
                                              6 COMMON     2     2      0
                        _even_parity
                     _uart_dataready
 ---------------------------------------------------------------------------------
 (5) _uart_dataready                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _even_parity                                          6     6      0     160
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _uart_init
     ___aldiv

 _myISR (ROOT)
   _getPDU
     _even_parity
     _uart_dataready
   _processPDU
     _CRC16
     _sendexception
       _CRC16
       _writePDU
         _uart_write
     _writePDU
       _uart_write

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      A9       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     40      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50     21      4B       7       93.8%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      A9      12        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Mon Aug 23 12:44:32 2021

            ??_uart_dataready 0070                             pc 0002                uart_write@data 0070  
        processPDU@regadd_261 002E          processPDU@regadd_255 0045          processPDU@regadd_259 004B  
                          l43 078B                            fsr 0004                           l226 0E60  
                         l227 0E60                           l380 0F77                           l390 0FFF  
                         _CRC 0060                           _PDU 0066                           u910 0F6A  
                         u911 0F69                           u920 0F7B                           u921 0F7A  
                         u930 0F9A                           u931 0F99                           u950 0FAE  
                         u951 0FAD                           u945 0F9F                           _RX9 00C6  
                         u970 0FC9                           u971 0FC8                           u965 0FB0  
                         u990 0FE7                           u991 0FE6                           u975 0FC5  
                         u985 0FD9                           fsr0 0004                           indf 0000  
                        l1611 0F6A                          l1621 0F9A                          l1613 0F7B  
                        l2181 0E5B                          l2173 0E47                          l1631 0FB7  
                        l1623 0F9D                          l1615 0F86                          l1607 0F63  
                        l2183 0E5C                          l2175 0E4A                          l1633 0FC9  
                        l1625 0FA6                          l1641 0FE7                          l1617 0F8A  
                        l1609 0F66                          l2185 0E5D                          l2177 0E57  
                        l1643 0FEC                          l1635 0FD7                          l1627 0FAA  
                        l1619 0F92                          l1651 070E                          l2187 0E5E  
                        l2179 0E5A                          l1645 0FF7                          l1637 0FD8  
                        l1629 0FAE                          l1661 077C                          l1653 0717  
                        l2189 0E5F                          l1639 0FE1                          l1671 0785  
                        l1663 077D                          l1655 0770                          l1673 0788  
                        l1665 0780                          l1657 0771                          l1649 06B3  
                        l1667 0781                          l1659 077A                          l1669 0784  
                        _BRGH 04C2                          u1000 0FEC                          _CREN 00C4  
                        u1001 0FEB                          u1010 06C3                          u1020 06DC  
                        u1031 06EE                          u1015 06BE                          u1040 0717  
                        u1032 06EF                          u1041 0716                          u1033 06F4  
                        u1025 06D7                          u1050 0725                          u1034 06F5  
                        u1035 06FA                          u1060 073E                          u1036 06FB  
                        u1071 0750                          u1055 0720                          u1080 077A  
                        u1072 0751                          u1081 0779                          u1073 0756  
                        u1065 0739                          u1074 0757                          u1075 075C  
                        u1076 075D                          i1l52 07FE                          _RCIF 0065  
                        i1l64 0E3E                          i1l81 0EFA                          i1l49 07F4  
                        i1l82 0F14                          i1l92 07F2                          i1l85 07D9  
                        i1l87 07A3                          _TMR0 0001                          _SPEN 00C7  
                        _TRMT 04C1                          _TXEN 04C5                          _SYNC 04C4  
                        _main 0E47                          btemp 007E                          start 0012  
                ?_even_parity 0070                 processPDU@reg 0033               __end_of___aldiv 1000  
                       ?_main 0070                         _CRC16 078C                         i1l121 0EB2  
                       i1l131 0F62                         i1l221 0ED5                         i1l118 0E85  
                       i1l127 0F31                         i1l138 06B2                         i1l219 0ED3  
                       _RCREG 001A               __end_of_address 0807                         _SPBRG 0099  
                       u81_20 07FA                         u81_21 07F9                         _TRISD 0088  
                       u90_20 0F13                         u82_20 07A7                         u90_21 0F12  
                       u82_21 07A6                         u90_25 0F0F                         u83_20 07D3  
                       u83_21 07D2                         u83_25 07CF                         u84_20 07EE  
                       u84_21 07ED                         u84_25 07EA                         u85_20 0E85  
                       u85_21 0E84                         u85_25 0E81                         u86_20 0EEB  
                       u86_21 0EEA                         u87_20 0EF0                         u87_21 0EEF  
                       u88_20 0EF6                         u88_21 0EF4                         u89_20 0EF7  
                       _TXREG 0019                         _Coils 00A0                         _myISR 0EB3  
                       _count 0065                         pclath 000A                         status 0003  
                       wtemp0 007E             processPDU@reg_242 0039        processPDU@regcount_256 004F  
             __initialization 0015                  __end_of_main 0E64                processPDU@buff 0055  
                      CRC16@i 0075                        CRC16@j 0077                        ??_main 00EB  
                      ?_CRC16 0070                        ?_myISR 0070                        u110_20 0F35  
                      u110_21 0F34                        i1l2001 048E                        i1l2003 049D  
                      i1l2101 0608                        i1l2021 04E1                        i1l2013 04D0  
                      i1l2005 04A3                        i1l2111 0630                        i1l2103 0610  
                      i1l2023 04E5                        i1l2015 04D6                        i1l2007 04C5  
                      u111_20 0F54                        u111_21 0F53                        i1l2121 0648  
                      i1l2105 0614                        i1l2041 0527                        i1l2033 0501  
                      i1l2131 0661                        i1l2107 061B                        i1l2051 0563  
                      i1l2043 052B                        i1l2035 050D                        i1l2027 04F3  
                      i1l2221 069D                        i1l2141 0685                        i1l2133 0671  
                      i1l2109 062A                        i1l2061 0581                        i1l2053 056B  
                      i1l2045 053B                        i1l2037 0511                        i1l2029 04FA  
                      i1l2143 068C                        i1l2135 0675                        i1l2127 0653  
                      i1l2119 063F                        i1l2071 05B3                        i1l2063 0590  
                      i1l2055 056F                        i1l2039 0516                        i1l2047 0541  
                      u112_20 0F62                        u120_20 0107                        u112_21 0F61  
                      i1l1601 0EA4                        i1l2137 0679                        i1l2129 065D  
                      i1l2065 0596                        i1l2057 0576                        i1l2049 0553  
                      u120_21 0106                        i1l2145 0695                        i1l1531 07FA  
                      i1l1603 0EA8                        i1l2139 0681                        i1l2091 05E8  
                      i1l2067 05A5                        i1l2059 057A                        i1l2147 06B1  
                      i1l2171 0EC7                        i1l1701 0F46                        i1l1533 078D  
                      i1l1605 0EAC                        i1l2093 05EC                        i1l2085 05D2  
                      i1l2069 05AB                        i1l2077 05BE                        i1l2165 0EB3  
                      i1l1703 0F54                        i1l1551 07C6                        i1l1535 0791  
                      i1l2095 05F0                        i1l2087 05DA                        i1l2079 05C7  
                      i1l1711 002D                        i1l2167 0EB7                        u121_20 0132  
                      u113_20 0032                        i1l1705 0F5A                        i1l1553 07D3  
                      i1l1545 07A7                        i1l1537 0794                        i1l1529 07F4  
                      i1l1561 0E68                        i1l2097 0600                        i1l2089 05E2  
                      i1l1801 016E                        u121_21 0131                        i1l1721 0048  
                      i1l1713 0032                        u113_21 0031                        i1l2169 0EC1  
                      i1l1571 0EE1                        i1l1555 07EE                        i1l1547 07B5  
                      i1l1539 07A1                        i1l1563 0E72                        i1l2099 0604  
                      i1l1811 018E                        i1l1803 0174                        i1l1723 004C  
                      i1l1581 0EEB                        i1l1573 0EE2                        i1l1709 0F5C  
                      i1l1549 07C0                        i1l1565 0E78                        i1l1901 02FA  
                      i1l1821 01C5                        i1l1813 0195                        i1l1805 0181  
                      u121_25 012E                        i1l1741 00A6                        i1l1733 0065  
                      i1l1725 0050                        i1l1717 0034                        i1l1583 0EF0  
                      i1l1567 0E39                        i1l1559 0E65                        i1l1911 0322  
                      i1l1903 0304                        i1l1831 01EF                        i1l1823 01CF  
                      i1l1815 01AE                        i1l1807 0188                        i1l1751 00C1  
                      i1l1735 0074                        i1l1727 005A                        i1l1719 0038  
                      u130_20 024C                        u114_20 005A                        i1l1585 0F00  
                      i1l1681 0F19                        i1l1593 0E87                        i1l1921 034C  
                      i1l1913 0325                        i1l1905 0308                        u130_21 024B  
                      i1l1841 0216                        i1l1833 01F6                        i1l1817 01B2  
                      i1l1809 018B                        i1l1825 01D3                        i1l1761 00D5  
                      i1l1745 00A8                        i1l1737 007A                        i1l1729 0063  
                      u114_21 0059                        i1l1587 0F06                        i1l1579 0EE6  
                      i1l1691 0F35                        i1l1683 0F1E                        i1l1595 0E8B  
                      i1l1931 037D                        i1l1915 0328                        i1l1923 0352  
                      i1l1907 030E                        i1l1851 024C                        i1l1843 0238  
                      i1l1835 01FA                        i1l1827 01E3                        i1l1819 01B8  
                      i1l1771 00FB                        i1l1763 00DC                        i1l1755 00C3  
                      i1l1747 00B1                        i1l1739 009C                        i1l1589 0F13  
                      i1l1693 0F36                        i1l1685 0F22                        i1l1677 0F15  
                      i1l1597 0E90                        i1l1941 039B                        i1l1933 0385  
                      i1l1925 035F                        i1l1917 032F                        i1l1909 031B  
                      i1l1861 0261                        i1l1853 0252                        i1l1837 0201  
                      i1l1829 01EB                        u122_25 013F                        i1l1781 0120  
                      i1l1773 0107                        i1l1757 00C7                        i1l1749 00B7  
                      i1l1687 0F2C                        i1l1679 0F16                        i1l1599 0E94  
                      i1l1943 03AA                        i1l1935 0389                        i1l1927 0369  
                      i1l1919 0348                        i1l1871 027D                        i1l1839 0210  
                      i1l1791 0155                        i1l1783 0125                        i1l1775 0111  
                      i1l1767 00E3                        u131_20 0252                        u123_20 0155  
                      u115_20 0063                        i1l1697 0F38                        i1l1961 03EE  
                      i1l1953 03DD                        i1l1945 03B0                        i1l1937 0390  
                      i1l1929 036D                        i1l1881 02B3                        i1l1873 0290  
                      i1l1865 026F                        u131_21 0251                        i1l1849 0243  
                      i1l1793 0159                        u123_21 0154                        i1l1777 0119  
                      i1l1769 00F6                        u115_21 0062                        i1l1699 0F3E  
                      i1l1963 03F2                        i1l1955 03E3                        i1l1947 03D2  
                      i1l1939 0394                        i1l1891 02CD                        i1l1883 02B7  
                      i1l1875 0295                        i1l1867 0276                        i1l1859 025D  
                      i1l1787 0133                        i1l1779 011D                        i1l1981 0434  
                      i1l1973 040E                        i1l1893 02D6                        i1l1885 02BA  
                      i1l1877 02A1                        i1l1789 013C                        i1l1797 0160  
                      i1l1991 0470                        i1l1983 0438                        i1l1975 041A  
                      i1l1967 0400                        i1l1895 02EF                        i1l1887 02BF  
                      i1l1879 02AB                        i1l1799 016A                        u140_20 0348  
                      u132_20 026E                        u124_20 0181                        u116_20 009C  
                      i1l1993 0478                        i1l1985 0448                        i1l1977 041E  
                      i1l1969 0407                        u140_21 0347                        i1l1897 02F3  
                      u132_21 026D                        u124_21 0180                        u116_21 009B  
                      i1l1995 047C                        i1l1979 0423                        i1l1987 044E  
                      i1l1997 0483                        i1l1989 0460                        u132_25 026A  
                      u124_25 017D                        u116_25 0098                        i1l1999 0487  
                      u109_20 0F2C                        u141_20 035F                        u133_20 02A1  
                      u125_20 0188                        u117_20 00B1                        u109_21 0F2B  
                      u141_21 035E                        u133_21 02A0                        u125_21 0187  
                      u117_21 00B0                        u141_25 035B                        u150_20 05AB  
                      u142_20 03D2                        u134_20 02CC                        u118_20 00B7  
                      u150_21 05AA                        u142_21 03D1                        u134_21 02CB  
                      u118_21 00B6                        u142_25 03CE                        u134_25 02C8  
                      u126_25 0198                        u151_20 05B3                        u143_20 03E3  
                      u127_20 01AE                        u119_20 00D4                        u151_21 05B2  
                      u143_21 03E2                        u127_21 01AD                        u119_21 00D3  
                      u135_25 02D9                        u119_25 00D0                        u152_20 05C7  
                      u144_20 03FF                        u136_20 02EF                        u128_20 01C5  
                      u152_21 05C6                        u144_21 03FE                        u136_21 02EE  
                      u128_21 01C4                        u144_25 03FB                        u128_25 01C1  
                      u153_20 05DA                        u145_20 0460                        u137_20 031B  
                      u129_20 0238                        u153_21 05D9                        u145_21 045F  
                      u137_21 031A                        u129_21 0237                        u145_25 045C  
                      u137_25 0317                        u129_25 0234                        u154_20 05E8  
                      u146_20 04C5                        u138_20 0322                        u154_21 05E7  
                      u146_21 04C4                        u138_21 0321                        u146_25 04C1  
                      u155_20 0648                        u147_20 04D6                        u155_21 0647  
                      u147_21 04D5                        u139_25 0332                        u148_20 04F2  
                      u148_21 04F1                        u148_25 04EE                        u149_20 0553  
                      u157_20 0EB7                        u149_21 0552                        u157_21 0EB6  
                      u149_25 054F                        u158_20 0EC7                        u158_21 0EC6  
                      _TRISC6 043E                        _TRISC7 043F                     ??___aldiv 00D2  
       __end_of_sendexception 0EB3                        _getPDU 0F15                        _status 0064  
                      saved_w 007E            processPDU@buff_247 0056              __end_of_writePDU 0E86  
     __end_of__initialization 0026                 __end_of_CRC16 07F3            processPDU@regcount 004D  
          processPDU@valueint 0051                __pcstackCOMMON 0070               processPDU@i_241 0028  
             processPDU@i_250 002C               processPDU@i_244 003B               processPDU@i_253 0041  
             processPDU@i_254 0043               processPDU@i_239 0026               processPDU@i_248 002A  
             processPDU@i_257 0047               processPDU@i_258 0049               processPDU@j_249 003D  
      processPDU@valueint_262 0024          __size_of_even_parity 0035                 __end_of_myISR 0EE0  
             processPDU@count 0032               processPDU@index 005B        sendexception@errorcode 007C  
                     ??_CRC16 0072      processPDU@coilbytescount 0053                _OPTION_REGbits 0081  
                     ??_myISR 005C                    __pbssBANK0 0060                    __pbssBANK1 00A0  
processPDU@coilbytescount_245 0054                  even_parity@i 0072                    __pmaintext 0E47  
                     ?_getPDU 0070                    __pintentry 0004            __size_of_uart_init 00D9  
                  CRC16@count 0070                    __stringtab 0800                       ___aldiv 0F63  
             __size_of_getPDU 004E                       _address 0806                     ?_writePDU 0070  
                     __ptext1 06B3                       __ptext2 0F63                       __ptext3 0EB3  
                     __ptext4 002A                       __ptext5 0E86                       __ptext6 0E64  
                     __ptext7 07F3                       __ptext8 078C                       __ptext9 0F15  
                     getPDU@i 0077              ___aldiv@dividend 00CE       __size_of_uart_dataready 0006  
                     clrloop0 0E40          end_of_initialization 0026                  CRC16@reg_crc 007A  
            _HoldingRegisters 00C0                _DiscreteInputs 00B0             __end_of_uart_init 078C  
                   _RCSTAbits 0018              ___aldiv@quotient 00D5           processPDU@coilcount 0057  
         processPDU@coilsleft 0030                    _uart_write 07F3                    ??_writePDU 0071  
                  _processPDU 002A                   processPDU@i 0035                   processPDU@j 0037  
              __end_of_getPDU 0F63           start_initialization 0015              processPDU@regadd 003F  
      __size_of_sendexception 002D                      CRC16@PDU 0079                 ??_even_parity 0070  
              _InputRegisters 00C6                      ??_getPDU 0076                   ?_uart_write 0070  
                 ?_processPDU 0070       processPDU@coilcount_243 0059                _uart_dataready 0E39  
                   ___latbits 0002                 __pcstackBANK0 0020                 __pcstackBANK1 00CA  
           even_parity@chbyte 0071             even_parity@parity 0074               even_parity@tool 0075  
     processPDU@coilsleft_246 0031                      ?___aldiv 00CA                 _sendexception 0E86  
         __end_of_even_parity 0F15                  getPDU@nineth 0076                     __pstrings 0800  
      __end_of_uart_dataready 0E3F                __size_of_CRC16 0067             __size_of_writePDU 0022  
              __size_of_myISR 002D               ___aldiv@divisor 00CA             interrupt_function 0004  
             ___aldiv@counter 00D3           __size_of_uart_write 000C                     clear_ram0 0E3F  
                    _PIE1bits 008C           __size_of_processPDU 0689                     _uart_init 06B3  
              ?_sendexception 007C                    uart_init@x 00E9                   __stringbase 0805  
             ?_uart_dataready 0070                   _even_parity 0EE0                    ?_uart_init 00D9  
            __size_of___aldiv 009D            __end_of__stringtab 0806                      _checksum 0062  
                    __ptext10 0E39                      __ptext11 0EE0                 __size_of_main 001D  
             ??_sendexception 007D                 writePDU@count 0072                  ??_uart_write 0070  
                    _writePDU 0E64                  ??_processPDU 0020     sendexception@functioncode 007D  
                  _INTCONbits 000B                      intlevel1 0000             uart_init@baudrate 00D9  
          __end_of_uart_write 07FF            __end_of_processPDU 06B3                     stringcode 0800  
                   writePDU@i 0073                   ??_uart_init 00DD                      stringdir 0800  
                    stringtab 0800                  ___aldiv@sign 00D4  
